"use strict";(self.webpackChunkseaography=self.webpackChunkseaography||[]).push([[961],{5680:(e,a,n)=>{n.d(a,{xA:()=>s,yg:()=>f});var t=n(6540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=t.createContext({}),p=function(e){var a=t.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},s=function(e){var a=p(e.components);return t.createElement(c.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||l;return n?t.createElement(f,o(o({ref:a},s),{},{components:n})):t.createElement(f,o({ref:a},s))}));function f(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=u;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i[d]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5337:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var t=n(8168),r=(n(6540),n(5680));const l={},o="DataLoader",i={unversionedId:"data-loader",id:"version-0.2.x/data-loader",title:"DataLoader",description:"Seaography \u4f7f\u7528 asyncgraphql::dataloader \u5728\u67e5\u8be2\u5d4c\u5957\u5bf9\u8c61\u65f6\u89e3\u51b3 N+1 \u95ee\u9898\u3002",source:"@site/versioned_docs/version-0.2.x/06-data-loader.md",sourceDirName:".",slug:"/data-loader",permalink:"/Seaography/docs/0.2.x/data-loader",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/Seaography/versioned_docs/version-0.2.x/06-data-loader.md",tags:[],version:"0.2.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1669888475,formattedLastUpdatedAt:"Dec 1, 2022",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u5b8f\u6587\u6863",permalink:"/Seaography/docs/0.2.x/macros-documentation"}},c={},p=[],s={toc:p},d="wrapper";function m(e){let{components:a,...n}=e;return(0,r.yg)(d,(0,t.A)({},s,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"dataloader"},"DataLoader"),(0,r.yg)("p",null,"Seaography \u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/async-graphql/latest/async_graphql/dataloader/index.html"},"async_graphql::dataloader")," \u5728\u67e5\u8be2\u5d4c\u5957\u5bf9\u8c61\u65f6\u89e3\u51b3 N+1 \u95ee\u9898\u3002"),(0,r.yg)("p",null,"\u8003\u8651\u4ee5\u4e0b GraphQL \u67e5\u8be2\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  film(\n    pagination: { pages: { limit: 3, page: 0 }}\n    filters: { releaseYear: { gte: "2006" } }\n    orderBy: { title: ASC }\n  ) {\n    nodes {\n      filmId\n      title\n      description\n      releaseYear\n      filmActor {\n        actor {\n          actorId\n          firstName\n          lastName\n        }\n      }\n    }\n    pages\n    current\n  }\n}\n')),(0,r.yg)("p",null,"\u5728\u540e\u53f0\uff0c\u6267\u884c\u7684 SQL \u67e5\u8be2\u5982\u4e0b\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sql"},'SELECT "film"."film_id",\n       "film"."title",\n       "film"."description",\n       "film"."release_year",\n       "film"."language_id",\n       "film"."original_language_id",\n       "film"."rental_duration",\n       "film"."rental_rate",\n       "film"."length",\n       "film"."replacement_cost",\n       "film"."rating",\n       "film"."special_features",\n       "film"."last_update"\nFROM "film"\nWHERE "film"."release_year" >= \'2006\'\nORDER BY "film"."title" ASC\nLIMIT 3 OFFSET 0\n\nSELECT "film_actor"."actor_id", "film_actor"."film_id", "film_actor"."last_update"\nFROM "film_actor"\nWHERE "film_actor"."film_id" IN (1, 3, 2)\n\nSELECT "actor"."actor_id", "actor"."first_name", "actor"."last_name", "actor"."last_update"\nFROM "actor"\nWHERE "actor"."actor_id" IN (24, 162, 20, 160, 1, 188, 123, 30, 53, 40, 2, 64, 85, 198, 10, 19, 108, 90)\n')),(0,r.yg)("p",null,"\u4ee5 ",(0,r.yg)("inlineCode",{parentName:"p"},"film_actor")," \u4e3a\u4f8b\uff0c\u6211\u4eec\u60f3\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6 ID \u4e3a ",(0,r.yg)("inlineCode",{parentName:"p"},"(1, 3, 2)")," \u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"film_actor"),"\u3002\u6211\u4eec\u5c06 ID \u4f20\u9012\u7ed9 ",(0,r.yg)("inlineCode",{parentName:"p"},"DataLoader"),"\uff0c\u5b83\u6709\u4e24\u4e2a\u7528\u9014\u2014\u2014\u5b83\u544a\u8bc9 ",(0,r.yg)("inlineCode",{parentName:"p"},"DataLoader")," \u54ea\u4e9b\u884c\u8981\u88ab\u83b7\u53d6\uff0c\u5e76\u4e14\u4f5c\u4e3a\u552f\u4e00 ID \u6765\u786e\u5b9a\u8c03\u7528\u8005\uff0c\u4ece\u800c\u627e\u5230\u67e5\u8be2\u7ed3\u679c\u7684\u6b63\u786e\u63a5\u6536\u8005\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"pub struct FilmActorFK(pub sea_orm::Value);\n\n// film::Model\nimpl Model {\n    pub async fn FilmActor<'a>(\n        &self,\n        ctx: &async_graphql::Context<'a>,\n    ) -> Option<Vec<super::film_actor::Model>> {\n        let data_loader = ctx\n            .data::<async_graphql::dataloader::DataLoader<crate::OrmDataloader>>()\n            .unwrap();\n\n        let from_column: super::film::Column = // ...\n\n        let key = FilmActorFK(self.get(from_column));\n\n        let data: Option<_> = data_loader.load_one(key) // \u4f7f\u7528\u5916\u952e\u8fdb\u884c\u6279\u91cf\u67e5\u8be2\n            .await\n            .unwrap();\n\n        data\n    }\n}\n")),(0,r.yg)("p",null,"\u5728 ",(0,r.yg)("inlineCode",{parentName:"p"},"DataLoader")," \u5185\u90e8\uff0c\u5b83\u4f1a\u6279\u91cf\u6267\u884c\u9009\u62e9\u67e5\u8be2\u3002\u7136\u540e\uff0c\u8fd4\u56de\u4e00\u4e2a\u4ee5 ID \u4f5c\u4e3a\u952e\u7684 hashmap\u3002\u8fd9\u4f7f\u6211\u4eec\u80fd\u591f\u5c06\u67e5\u8be2\u7ed3\u679c\u4e0e\u63a5\u6536\u8005\u5173\u8054\uff0c\u4ece\u800c\u5c06\u76f8\u5e94\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u6b63\u786e\u7684\u63a5\u6536\u8005\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"#[async_trait::async_trait]\nimpl async_graphql::dataloader::Loader<FilmActorFK> for crate::OrmDataloader {\n    type Value = Vec<super::film_actor::Model>;\n    type Error = std::sync::Arc<sea_orm::error::DbErr>;\n\n    async fn load(\n        &self,\n        keys: &[FilmActorFK],\n    ) -> Result<std::collections::HashMap<FilmActorFK, Self::Value>, Self::Error> {\n        let key_values: Vec<_> = keys\n            .into_iter()\n            .map(|key| key.0.to_owned())\n            .collect();\n\n        let to_column: super::film_actor::Column = // ...\n\n        let data: std::collections::HashMap<FilmActorFK, Self::Value> = super::film_actor::Entity::find()\n            .filter(to_column.is_in(key_values)) // \u6309\u6279\u91cf\u5916\u952e\u8fc7\u6ee4\n            .all(&self.db)\n            .await?\n            .into_iter()\n            .map(|model| {\n                let key = FilmActorFK(model.get(to_column));\n                (key, model) // \u5c06\u884c\u6536\u96c6\u5230\u6709\u5916\u952e\u4f5c\u4e3a\u952e\u7684 hashmap \u4e2d\n            })\n            .into_group_map();\n\n        Ok(data)\n    }\n}\n")))}m.isMDXComponent=!0}}]);