"use strict";(self.webpackChunkseaography=self.webpackChunkseaography||[]).push([[573],{5680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var r=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(t),m=a,d=c["".concat(s,".").concat(m)]||c[m]||y[m]||o;return t?r.createElement(d,i(i({ref:n},p),{},{components:t})):r.createElement(d,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9278:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=t(8168),a=(t(6540),t(5680));const o={},i="\u751f\u6210\u7684\u9879\u76ee\u7ed3\u6784",l={unversionedId:"generated-project-structure",id:"version-0.3.0/generated-project-structure",title:"\u751f\u6210\u7684\u9879\u76ee\u7ed3\u6784",description:"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u63cf\u8ff0\u751f\u6210\u7684\u9879\u76ee\u7ed3\u6784\u3002",source:"@site/versioned_docs/version-0.3.0/03-generated-project-structure.md",sourceDirName:".",slug:"/generated-project-structure",permalink:"/Seaography/docs/generated-project-structure",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/Seaography/versioned_docs/version-0.3.0/03-generated-project-structure.md",tags:[],version:"0.3.0",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1690532191,formattedLastUpdatedAt:"Jul 28, 2023",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u8fd0\u884c\u793a\u4f8b",permalink:"/Seaography/docs/running-example"},next:{title:"\u6269\u5c55\u751f\u6210\u7684\u4ee3\u7801",permalink:"/Seaography/docs/extending-code"}},s={},u=[{value:"\u5b9e\u4f53",id:"\u5b9e\u4f53",level:3},{value:"\u793a\u4f8b\u5185\u5bb9\uff1a",id:"\u793a\u4f8b\u5185\u5bb9",level:4},{value:"<code>sea_orm_active_enums.rs</code>",id:"sea_orm_active_enumsrs",level:3},{value:"\u793a\u4f8b\u5185\u5bb9\uff1a",id:"\u793a\u4f8b\u5185\u5bb9-1",level:4},{value:"<code>query_root.rs</code>",id:"query_rootrs",level:3},{value:"\u793a\u4f8b\u5185\u5bb9\uff1a",id:"\u793a\u4f8b\u5185\u5bb9-2",level:4},{value:"<code>lib.rs</code>",id:"librs",level:3},{value:"\u793a\u4f8b\u5185\u5bb9\uff1a",id:"\u793a\u4f8b\u5185\u5bb9-3",level:4},{value:"<code>main.rs</code>",id:"mainrs",level:3}],p={toc:u},c="wrapper";function y(e){let{components:n,...t}=e;return(0,a.yg)(c,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u751f\u6210\u7684\u9879\u76ee\u7ed3\u6784"},"\u751f\u6210\u7684\u9879\u76ee\u7ed3\u6784"),(0,a.yg)("p",null,"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u5c06\u63cf\u8ff0\u751f\u6210\u7684\u9879\u76ee\u7ed3\u6784\u3002"),(0,a.yg)("p",null,"\u6240\u6709\u793a\u4f8b\u5747\u57fa\u4e8e ",(0,a.yg)("a",{parentName:"p",href:"https://dev.mysql.com/doc/sakila/en/"},"https://dev.mysql.com/doc/sakila/en/")," \u6570\u636e\u5e93\u3002"),(0,a.yg)("h3",{id:"\u5b9e\u4f53"},"\u5b9e\u4f53"),(0,a.yg)("p",null,"\u6b64\u6587\u4ef6\u5939\u5305\u542b\u6240\u6709 SeaORM \u5b9e\u4f53\u3002"),(0,a.yg)("h4",{id:"\u793a\u4f8b\u5185\u5bb9"},"\u793a\u4f8b\u5185\u5bb9\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'#![doc = "SeaORM \u5b9e\u4f53\u3002\u7531 sea-orm-codegen 0.9.1 \u751f\u6210"]\nuse sea_orm::entity::prelude::*;\n#[derive(Copy, Clone, Default, Debug, DeriveEntity)]\npub struct Entity;\nimpl EntityName for Entity {\n    fn table_name(&self) -> &str {\n        "actor"\n    }\n}\n#[derive(\n    Clone,\n    Debug,\n    PartialEq,\n    DeriveModel,\n    DeriveActiveModel,\n    async_graphql::SimpleObject,\n    seaography::macros::Filter,\n)]\n#[sea_orm(table_name = "actor")]\n#[graphql(complex)]\n#[graphql(name = "Actor")]\npub struct Model {\n    pub actor_id: u16,          // \u6f14\u5458 ID\n    pub first_name: String,      // \u540d\u5b57\n    pub last_name: String,       // \u59d3\u6c0f\n    pub last_update: DateTimeUtc, // \u6700\u540e\u66f4\u65b0\u65f6\u95f4\n}\n#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]\npub enum Column {\n    ActorId,\n    FirstName,\n    LastName,\n    LastUpdate,\n}\n#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]\npub enum PrimaryKey {\n    ActorId,\n}\nimpl PrimaryKeyTrait for PrimaryKey {\n    type ValueType = u16;\n    fn auto_increment() -> bool {\n        true\n    }\n}\n#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    FilmActor,\n}\nimpl ColumnTrait for Column {\n    type EntityName = Entity;\n    fn def(&self) -> ColumnDef {\n        match self {\n            Self::ActorId => ColumnType::SmallUnsigned.def(),\n            Self::FirstName => ColumnType::String(Some(45u32)).def(),\n            Self::LastName => ColumnType::String(Some(45u32)).def(),\n            Self::LastUpdate => ColumnType::Timestamp.def(),\n        }\n    }\n}\n#[seaography::macros::relation]\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::FilmActor => Entity::has_many(super::film_actor::Entity).into(),\n        }\n    }\n}\nimpl Related<super::film_actor::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::FilmActor.def()\n    }\n}\nimpl ActiveModelBehavior for ActiveModel {}\n')),(0,a.yg)("h3",{id:"sea_orm_active_enumsrs"},(0,a.yg)("inlineCode",{parentName:"h3"},"sea_orm_active_enums.rs")),(0,a.yg)("p",null,"\u6b64\u6587\u4ef6\u5305\u542b\u6240\u6709\u6570\u636e\u5e93\u679a\u4e3e\u3002"),(0,a.yg)("h4",{id:"\u793a\u4f8b\u5185\u5bb9-1"},"\u793a\u4f8b\u5185\u5bb9\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'#![doc = "SeaORM \u5b9e\u4f53\u3002\u7531 sea-orm-codegen 0.9.1 \u751f\u6210"]\nuse sea_orm::entity::prelude::*;\n#[derive(\n    Debug,\n    Clone,\n    PartialEq,\n    EnumIter,\n    DeriveActiveEnum,\n    Eq,\n    Copy,\n    async_graphql::Enum,\n    seaography::macros::EnumFilter,\n)]\n#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "rating")]\npub enum Rating {\n    #[sea_orm(string_value = "G")]\n    G,\n    #[sea_orm(string_value = "PG")]\n    Pg,\n    #[sea_orm(string_value = "PG-13")]\n    Pg13,\n    #[sea_orm(string_value = "R")]\n    R,\n    #[sea_orm(string_value = "NC-17")]\n    Nc17,\n}\n')),(0,a.yg)("h3",{id:"query_rootrs"},(0,a.yg)("inlineCode",{parentName:"h3"},"query_root.rs")),(0,a.yg)("p",null,"\u5305\u542b GraphQL \u5b9e\u4f53\u67e5\u8be2\u7684 QueryRoot\u3002"),(0,a.yg)("h4",{id:"\u793a\u4f8b\u5185\u5bb9-2"},"\u793a\u4f8b\u5185\u5bb9\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, seaography::macros::QueryRoot)]\n#[seaography(entity = "crate::entities::category")]\n#[seaography(entity = "crate::entities::film_actor")]\n#[seaography(entity = "crate::entities::staff")]\n#[seaography(entity = "crate::entities::store")]\n#[seaography(entity = "crate::entities::film_text")]\n#[seaography(entity = "crate::entities::film_category")]\n#[seaography(entity = "crate::entities::customer")]\n#[seaography(entity = "crate::entities::address")]\n#[seaography(entity = "crate::entities::language")]\n#[seaography(entity = "crate::entities::city")]\n#[seaography(entity = "crate::entities::payment")]\n#[seaography(entity = "crate::entities::rental")]\n#[seaography(entity = "crate::entities::country")]\n#[seaography(entity = "crate::entities::actor")]\n#[seaography(entity = "crate::entities::film")]\n#[seaography(entity = "crate::entities::inventory")]\npub struct QueryRoot;\n')),(0,a.yg)("h3",{id:"librs"},(0,a.yg)("inlineCode",{parentName:"h3"},"lib.rs")),(0,a.yg)("p",null,"\u5305\u542b\u6211\u4eec\u6269\u5c55\u7684 OrmDataLoader\uff0c\u4ee5\u63d0\u4f9b\u5b9e\u4f53\u5173\u7cfb\u52a0\u8f7d\u5668\u3002"),(0,a.yg)("h4",{id:"\u793a\u4f8b\u5185\u5bb9-3"},"\u793a\u4f8b\u5185\u5bb9\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},"use sea_orm::prelude::*;\npub mod entities;\npub mod query_root;\npub use query_root::QueryRoot;\npub struct OrmDataloader {\n    pub db: DatabaseConnection,\n}\n")),(0,a.yg)("h3",{id:"mainrs"},(0,a.yg)("inlineCode",{parentName:"h3"},"main.rs")),(0,a.yg)("p",null,"\u5efa\u7acb\u6570\u636e\u5e93\u8fde\u63a5\uff0c\u6784\u5efa GraphQL \u4e0a\u4e0b\u6587\u5e76\u670d\u52a1 API\u3002"))}y.isMDXComponent=!0}}]);