"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[47039],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(t),y=a,g=d["".concat(c,".").concat(y)]||d[y]||p[y]||l;return t?r.createElement(g,i(i({ref:n},u),{},{components:t})):r.createElement(g,i({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=y;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[d]="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},14498:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=t(58168),a=(t(96540),t(15680));const l={},i="\u539f\u59cb SQL",o={unversionedId:"basic-crud/raw-sql",id:"version-0.5.x/basic-crud/raw-sql",title:"\u539f\u59cb SQL",description:"\u901a\u8fc7\u539f\u59cb SQL \u67e5\u8be2",source:"@site/versioned_docs/version-0.5.x/05-basic-crud/07-raw-sql.md",sourceDirName:"05-basic-crud",slug:"/basic-crud/raw-sql",permalink:"/SeaORM/docs/0.5.x/basic-crud/raw-sql",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.5.x/05-basic-crud/07-raw-sql.md",tags:[],version:"0.5.x",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1640968558,formattedLastUpdatedAt:"Dec 31, 2021",sidebarPosition:7,frontMatter:{},sidebar:"version-0.5.x/tutorialSidebar",previous:{title:"JSON",permalink:"/SeaORM/docs/0.5.x/basic-crud/json"},next:{title:"\u4e00\u5bf9\u4e00",permalink:"/SeaORM/docs/0.5.x/relation/one-to-one"}},c={},s=[{value:"\u901a\u8fc7\u539f\u59cb SQL \u67e5\u8be2",id:"\u901a\u8fc7\u539f\u59cb-sql-\u67e5\u8be2",level:2},{value:"\u83b7\u53d6\u539f\u59cb SQL \u67e5\u8be2",id:"\u83b7\u53d6\u539f\u59cb-sql-\u67e5\u8be2",level:2},{value:"\u4f7f\u7528\u539f\u59cb\u67e5\u8be2\u548c\u6267\u884c\u63a5\u53e3",id:"\u4f7f\u7528\u539f\u59cb\u67e5\u8be2\u548c\u6267\u884c\u63a5\u53e3",level:2},{value:"\u4f7f\u7528 <code>query_one</code> \u548c <code>query_all</code> \u65b9\u6cd5\u83b7\u53d6\u81ea\u5b9a\u4e49\u7ed3\u679c",id:"\u4f7f\u7528-query_one-\u548c-query_all-\u65b9\u6cd5\u83b7\u53d6\u81ea\u5b9a\u4e49\u7ed3\u679c",level:3},{value:"\u4f7f\u7528 <code>execute</code> \u65b9\u6cd5\u6267\u884c\u67e5\u8be2",id:"\u4f7f\u7528-execute-\u65b9\u6cd5\u6267\u884c\u67e5\u8be2",level:3}],u={toc:s},d="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(d,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u539f\u59cb-sql"},"\u539f\u59cb SQL"),(0,a.yg)("h2",{id:"\u901a\u8fc7\u539f\u59cb-sql-\u67e5\u8be2"},"\u901a\u8fc7\u539f\u59cb SQL \u67e5\u8be2"),(0,a.yg)("p",null,"\u60a8\u53ef\u4ee5\u4f7f\u7528\u539f\u59cb\u67e5\u8be2\u9009\u62e9 ",(0,a.yg)("inlineCode",{parentName:"p"},"Model"),"\uff0c\u4f7f\u7528\u9002\u5f53\u7684\u8bed\u6cd5\u8fdb\u884c\u53c2\u6570\u7ed1\u5b9a\uff0c\u5373\u5bf9\u4e8e MySQL \u548c SQLite \u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},"?"),"\uff0c\u5bf9\u4e8e PostgreSQL \u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},"$N"),"\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'let cheese: Option<cake::Model> = cake::Entity::find()\n    .from_raw_sql(Statement::from_sql_and_values(\n        DbBackend::Postgres,\n        r#"SELECT "cake"."id", "cake"."name" FROM "cake" WHERE "id" = $1"#,\n        vec![1.into()],\n    ))\n    .one(&db)\n    .await?;\n')),(0,a.yg)("p",null,"\u60a8\u8fd8\u53ef\u4ee5\u9009\u62e9\u81ea\u5b9a\u4e49\u6a21\u578b\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9009\u62e9\u6240\u6709\u72ec\u7279\u7684\u86cb\u7cd5\u540d\u79f0\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, FromQueryResult)]\npub struct UniqueCake {\n    name: String,\n}\n\nlet unique: Vec<UniqueCake> = UniqueCake::find_by_statement(Statement::from_sql_and_values(\n        DbBackend::Postgres,\n        r#"SELECT "cake"."name" FROM "cake" GROUP BY "cake"."name"#,\n        vec![],\n    ))\n    .all(&db)\n    .await?;\n')),(0,a.yg)("h2",{id:"\u83b7\u53d6\u539f\u59cb-sql-\u67e5\u8be2"},"\u83b7\u53d6\u539f\u59cb SQL \u67e5\u8be2"),(0,a.yg)("p",null,"\u5728\u4efb\u4f55 CRUD \u64cd\u4f5c\u4e0a\u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},"build")," \u548c ",(0,a.yg)("inlineCode",{parentName:"p"},"to_string")," \u65b9\u6cd5\u4ee5\u83b7\u53d6\u7279\u5b9a\u4e8e\u6570\u636e\u5e93\u7684\u539f\u59cb SQL\uff0c\u7528\u4e8e\u8c03\u8bd5\u76ee\u7684\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::DatabaseBackend;\n\nassert_eq!(\n    cake_filling::Entity::find_by_id((6, 8))\n        .build(DatabaseBackend::MySql)\n        .to_string(),\n    vec![\n        "SELECT `cake_filling`.`cake_id`, `cake_filling`.`filling_id` FROM `cake_filling`",\n        "WHERE `cake_filling`.`cake_id` = 6 AND `cake_filling`.`filling_id` = 8",\n    ].join(" ")\n);\n')),(0,a.yg)("h2",{id:"\u4f7f\u7528\u539f\u59cb\u67e5\u8be2\u548c\u6267\u884c\u63a5\u53e3"},"\u4f7f\u7528\u539f\u59cb\u67e5\u8be2\u548c\u6267\u884c\u63a5\u53e3"),(0,a.yg)("p",null,"\u60a8\u53ef\u4ee5\u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},"sea-query")," \u6784\u5efa SQL \u8bed\u53e5\uff0c\u5e76\u5728 SeaORM \u5185\u90e8\u7684 ",(0,a.yg)("inlineCode",{parentName:"p"},"DatabaseConnection")," \u63a5\u53e3\u4e0a\u76f4\u63a5\u67e5\u8be2/\u6267\u884c\u5b83\u3002"),(0,a.yg)("h3",{id:"\u4f7f\u7528-query_one-\u548c-query_all-\u65b9\u6cd5\u83b7\u53d6\u81ea\u5b9a\u4e49\u7ed3\u679c"},"\u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"h3"},"query_one")," \u548c ",(0,a.yg)("inlineCode",{parentName:"h3"},"query_all")," \u65b9\u6cd5\u83b7\u53d6\u81ea\u5b9a\u4e49\u7ed3\u679c"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'let query_res: Option<QueryResult> = db\n    .query_one(Statement::from_string(\n        DatabaseBackend::MySql,\n        "SELECT * FROM `cake`;".to_owned(),\n    ))\n    .await?;\nlet query_res = query_res.unwrap();\nlet id: i32 = query_res.try_get("", "id")?;\n\nlet query_res_vec: Vec<QueryResult> = db\n    .query_all(Statement::from_string(\n        DatabaseBackend::MySql,\n        "SELECT * FROM `cake`;".to_owned(),\n    ))\n    .await?;\n')),(0,a.yg)("h3",{id:"\u4f7f\u7528-execute-\u65b9\u6cd5\u6267\u884c\u67e5\u8be2"},"\u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"h3"},"execute")," \u65b9\u6cd5\u6267\u884c\u67e5\u8be2"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'let exec_res: ExecResult = db\n    .execute(Statement::from_string(\n        DatabaseBackend::MySql,\n        "DROP DATABASE IF EXISTS `sea`;".to_owned(),\n    ))\n    .await?;\nassert_eq!(exec_res.rows_affected(), 1);\n')))}p.isMDXComponent=!0}}]);