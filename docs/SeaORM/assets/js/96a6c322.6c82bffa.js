"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[62725],{15680:(e,n,r)=>{r.d(n,{xA:()=>d,yg:()=>f});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},d=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return r?t.createElement(f,s(s({ref:n},d),{},{components:r})):t.createElement(f,s({ref:n},d))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},83066:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=r(58168),a=(r(96540),r(15680));const o={},s="JSON",i={unversionedId:"basic-crud/json",id:"version-0.5.x/basic-crud/json",title:"JSON",description:"\u9009\u62e9 JSON \u7ed3\u679c",source:"@site/versioned_docs/version-0.5.x/05-basic-crud/06-json.md",sourceDirName:"05-basic-crud",slug:"/basic-crud/json",permalink:"/SeaORM/docs/0.5.x/basic-crud/json",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.5.x/05-basic-crud/06-json.md",tags:[],version:"0.5.x",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1640968558,formattedLastUpdatedAt:"Dec 31, 2021",sidebarPosition:6,frontMatter:{},sidebar:"version-0.5.x/tutorialSidebar",previous:{title:"\u5220\u9664",permalink:"/SeaORM/docs/0.5.x/basic-crud/delete"},next:{title:"\u539f\u59cb SQL",permalink:"/SeaORM/docs/0.5.x/basic-crud/raw-sql"}},c={},l=[{value:"\u9009\u62e9 JSON \u7ed3\u679c",id:"\u9009\u62e9-json-\u7ed3\u679c",level:2}],d={toc:l},u="wrapper";function p(e){let{components:n,...r}=e;return(0,a.yg)(u,(0,t.A)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"json"},"JSON"),(0,a.yg)("h2",{id:"\u9009\u62e9-json-\u7ed3\u679c"},"\u9009\u62e9 JSON \u7ed3\u679c"),(0,a.yg)("p",null,"\u6240\u6709 SeaORM \u67e5\u8be2\u90fd\u80fd\u8fd4\u56de ",(0,a.yg)("inlineCode",{parentName:"p"},"serde_json::Value"),"\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'// \u6839\u636e id \u67e5\u627e\nlet cake: Option<serde_json::Value> = Cake::find_by_id(1)\n    .into_json()\n    .one(db)\n    .await?;\n\nassert_eq!(\n    cake,\n    Some(serde_json::json!({\n        "id": 1,\n        "name": "\u829d\u58eb\u86cb\u7cd5"\n    }))\n);\n\n// \u4f7f\u7528\u8fc7\u6ee4\u5668\u67e5\u627e\nlet cakes: Vec<serde_json::Value> = Cake::find()\n    .filter(cake::Column::Name.contains("\u5de7\u514b\u529b"))\n    .order_by_asc(cake::Column::Name)\n    .into_json()\n    .all(db)\n    .await?;\n\nassert_eq!(\n    cakes,\n    vec![\n        serde_json::json!({\n            "id": 2,\n            "name": "\u5de7\u514b\u529b\u68ee\u6797"\n        }),\n        serde_json::json!({\n            "id": 8,\n            "name": "\u5de7\u514b\u529b\u676f\u5b50\u86cb\u7cd5"\n        }),\n    ]\n);\n\n// \u5206\u9875 JSON \u7ed3\u679c\nlet cake_pages: Paginator<_> = Cake::find()\n    .filter(cake::Column::Name.contains("\u5de7\u514b\u529b"))\n    .order_by_asc(cake::Column::Name)\n    .into_json()\n    .paginate(db, 50);\n\nwhile let Some(cakes) = cake_pages.fetch_and_next().await? {\n    // \u5bf9 cakes \u8fdb\u884c\u5904\u7406: Vec<serde_json::Value>\n}\n')))}p.isMDXComponent=!0}}]);