"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[73510],{15680:(n,e,i)=>{i.d(e,{xA:()=>u,yg:()=>g});var t=i(96540);function a(n,e,i){return e in n?Object.defineProperty(n,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[e]=i,n}function r(n,e){var i=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),i.push.apply(i,t)}return i}function l(n){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?r(Object(i),!0).forEach((function(e){a(n,e,i[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(i,e))}))}return n}function o(n,e){if(null==n)return{};var i,t,a=function(n,e){if(null==n)return{};var i,t,a={},r=Object.keys(n);for(t=0;t<r.length;t++)i=r[t],e.indexOf(i)>=0||(a[i]=n[i]);return a}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(t=0;t<r.length;t++)i=r[t],e.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(n,i)&&(a[i]=n[i])}return a}var c=t.createContext({}),d=function(n){var e=t.useContext(c),i=e;return n&&(i="function"==typeof n?n(e):l(l({},e),n)),i},u=function(n){var e=d(n.components);return t.createElement(c.Provider,{value:e},n.children)},p="mdxType",f={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},s=t.forwardRef((function(n,e){var i=n.components,a=n.mdxType,r=n.originalType,c=n.parentName,u=o(n,["components","mdxType","originalType","parentName"]),p=d(i),s=a,g=p["".concat(c,".").concat(s)]||p[s]||f[s]||r;return i?t.createElement(g,l(l({ref:e},u),{},{components:i})):t.createElement(g,l({ref:e},u))}));function g(n,e){var i=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var r=i.length,l=new Array(r);l[0]=s;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=n,o[p]="string"==typeof n?n:a,l[1]=o;for(var d=2;d<r;d++)l[d]=i[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,i)}s.displayName="MDXCreateElement"},14446:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var t=i(58168),a=(i(96540),i(15680));const r={},l="\u81ea\u5b9a\u4e49\u8fde\u63a5\u6761\u4ef6",o={unversionedId:"relation/custom-join-condition",id:"version-1.0.x/relation/custom-join-condition",title:"\u81ea\u5b9a\u4e49\u8fde\u63a5\u6761\u4ef6",description:"\u6709\u65f6\u60a8\u53ef\u80fd\u5e0c\u671b\u5728\u53e6\u4e00\u4e2a\u8868\u4e0a\u4f7f\u7528\u81ea\u5b9a\u4e49\u6761\u4ef6\u8fdb\u884c\u8fde\u63a5\uff0c\u4f8b\u5982\uff1a",source:"@site/versioned_docs/version-1.0.x/06-relation/06-custom-join-condition.md",sourceDirName:"06-relation",slug:"/relation/custom-join-condition",permalink:"/SeaORM/docs/relation/custom-join-condition",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-1.0.x/06-relation/06-custom-join-condition.md",tags:[],version:"1.0.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1722833108,formattedLastUpdatedAt:"Aug 5, 2024",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u81ea\u5f15\u7528",permalink:"/SeaORM/docs/relation/self-referencing"},next:{title:"\u6570\u636e\u52a0\u8f7d\u5668",permalink:"/SeaORM/docs/relation/data-loader"}},c={},d=[{value:"\u5173\u7cfb",id:"\u5173\u7cfb",level:2},{value:"\u94fe\u63a5",id:"\u94fe\u63a5",level:2},{value:"\u81ea\u5b9a\u4e49\u8fde\u63a5",id:"\u81ea\u5b9a\u4e49\u8fde\u63a5",level:2}],u={toc:d},p="wrapper";function f(n){let{components:e,...i}=n;return(0,a.yg)(p,(0,t.A)({},u,i,{components:e,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u81ea\u5b9a\u4e49\u8fde\u63a5\u6761\u4ef6"},"\u81ea\u5b9a\u4e49\u8fde\u63a5\u6761\u4ef6"),(0,a.yg)("p",null,"\u6709\u65f6\u60a8\u53ef\u80fd\u5e0c\u671b\u5728\u53e6\u4e00\u4e2a\u8868\u4e0a\u4f7f\u7528\u81ea\u5b9a\u4e49\u6761\u4ef6\u8fdb\u884c\u8fde\u63a5\uff0c\u4f8b\u5982\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    `cake`.`id`,\n    `cake`.`name`\nFROM\n    `cake`\n    LEFT JOIN `fruit` ON `cake`.`id` = `fruit`.`cake_id`\n    AND `fruit`.`name` LIKE '%tropical%' -- \u81ea\u5b9a\u4e49\u8fde\u63a5\u6761\u4ef6\n")),(0,a.yg)("p",null,"\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u5b9e\u73b0\u3002"),(0,a.yg)("h2",{id:"\u5173\u7cfb"},"\u5173\u7cfb"),(0,a.yg)("p",null,"\u5c06\u60a8\u7684\u989d\u5916\u8fde\u63a5\u6761\u4ef6\u76f4\u63a5\u6dfb\u52a0\u5230\u5173\u7cfb\u679a\u4e3e\u4e2d\u3002\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u901a\u8fc7 ",(0,a.yg)("inlineCode",{parentName:"p"},"on_condition")," \u8fc7\u7a0b\u5b8f\u5c5e\u6027\u63d0\u4f9b ",(0,a.yg)("inlineCode",{parentName:"p"},"sea_query::SimpleExpr"),"\u3002"),(0,a.yg)("p",null,"\u5982\u679c\u60a8\u60f3\u8981\u6dfb\u52a0\u989d\u5916\u7684 ",(0,a.yg)("inlineCode",{parentName:"p"},"OR")," \u6761\u4ef6\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},'condition_type = "any"')," \u6765\u6539\u53d8\u5173\u7cfb\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {\n    #[sea_orm(has_many = "super::fruit::Entity")]\n    Fruit,\n    #[sea_orm(\n        has_many = "super::fruit::Entity",\n        // \u989d\u5916\u7684 on_condition\uff0c\u63a5\u53d7\u4efb\u4f55\u5b9e\u73b0\u4e86 `sea_query::IntoCondition` \u7684\u5185\u5bb9\n        on_condition = r#"super::fruit::Column::Name.like("%tropical%")"#\n    )]\n    TropicalFruit,\n    #[sea_orm(\n        has_many = "super::fruit::Entity",\n        on_condition = r#"super::fruit::Column::Name.like("%tropical%")"#\n        condition_type = "any",\n    )]\n    OrTropicalFruit,\n}\n')),(0,a.yg)("p",null,"\u4e0a\u9762\u7684\u8fc7\u7a0b\u5b8f\u5c06\u5c55\u5f00\u4e3a\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    Fruit,\n    TropicalFruit,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Fruit => Entity::has_many(super::fruit::Entity).into(),\n            Self::TropicalFruit => Entity::has_many(super::fruit::Entity)\n                .on_condition(|_left, _right| {\n                    super::fruit::Column::Name.like("%tropical%")\n                        .into_condition()\n                })\n                .into(),\n        }\n    }\n}\n')),(0,a.yg)("p",null,"\u751f\u6210\u7684 SQL \u5c06\u662f\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    cake::Entity::find()\n        .join(JoinType::LeftJoin, cake::Relation::TropicalFruit.def())\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `cake`.`id`, `cake`.`name` FROM `cake`",\n        "LEFT JOIN `fruit` ON `cake`.`id` = `fruit`.`cake_id` AND `fruit`.`name` LIKE \'%tropical%\'",\n    ]\n    .join(" ")\n);\n')),(0,a.yg)("h2",{id:"\u94fe\u63a5"},"\u94fe\u63a5"),(0,a.yg)("p",null,"\u60a8\u8fd8\u53ef\u4ee5\u5728 ",(0,a.yg)("inlineCode",{parentName:"p"},"Linked")," \u4e0a\u5b9a\u4e49\u81ea\u5b9a\u4e49\u8fde\u63a5\u6761\u4ef6\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug)]\npub struct CheeseCakeToFillingVendor;\n\nimpl Linked for CheeseCakeToFillingVendor {\n    type FromEntity = super::cake::Entity;\n\n    type ToEntity = super::vendor::Entity;\n\n    fn link(&self) -> Vec<RelationDef> {\n        vec![\n            super::cake_filling::Relation::Cake\n                .def()\n                // `on_condition` \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a\u5177\u6709\u53c2\u6570\u7684\u95ed\u5305\n                // \u8868\u793a\u8fde\u63a5\u8868\u8fbe\u5f0f\u4e2d\u7684\u5de6\u4fa7\u548c\u53f3\u4fa7\u8868\u3002\n                .on_condition(|left, _right| {\n                    Expr::col((left, super::cake::Column::Name))\n                        .like("%cheese%")\n                        .into_condition()\n                })\n                .rev(),\n            super::cake_filling::Relation::Filling.def(),\n            super::filling::Relation::Vendor.def(),\n        ]\n    }\n}\n')),(0,a.yg)("p",null,"\u751f\u6210\u7684 SQL \u5c06\u662f\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    cake::Entity::find()\n        .find_also_linked(entity_linked::CheeseCakeToFillingVendor)\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        r#"SELECT `cake`.`id` AS `A_id`, `cake`.`name` AS `A_name`,"#,\n        r#"`r2`.`id` AS `B_id`, `r2`.`name` AS `B_name`"#,\n        r#"FROM `cake`"#,\n        r#"LEFT JOIN `cake_filling` AS `r0` ON `cake`.`id` = `r0`.`cake_id` AND `cake`.`name` LIKE \'%cheese%\'"#,\n        r#"LEFT JOIN `filling` AS `r1` ON `r0`.`filling_id` = `r1`.`id`"#,\n        r#"LEFT JOIN `vendor` AS `r2` ON `r1`.`vendor_id` = `r2`.`id`"#,\n    ]\n    .join(" ")\n);\n')),(0,a.yg)("h2",{id:"\u81ea\u5b9a\u4e49\u8fde\u63a5"},"\u81ea\u5b9a\u4e49\u8fde\u63a5"),(0,a.yg)("p",null,"\u6700\u540e\uff0c\u53ef\u4ee5\u5728\u6784\u9020\u8fde\u63a5\u8868\u8fbe\u5f0f\u65f6\u5b9a\u4e49\u81ea\u5b9a\u4e49\u8fde\u63a5\u6761\u4ef6\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    cake::Entity::find()\n        .join(JoinType::LeftJoin, cake::Relation::TropicalFruit.def())\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake\n                .def()\n                .rev()\n                .on_condition(|_left, right| {\n                    Expr::col((right, cake_filling::Column::CakeId))\n                        .gt(10)\n                        .into_condition()\n                })\n        )\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Filling\n                .def()\n                .on_condition(|_left, right| {\n                    Expr::col((right, filling::Column::Name))\n                        .like("%lemon%")\n                        .into_condition()\n                })\n        )\n        .join(JoinType::LeftJoin, filling::Relation::Vendor.def())\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `cake`.`id`, `cake`.`name` FROM `cake`",\n        "LEFT JOIN `fruit` ON `cake`.`id` = `fruit`.`cake_id` AND `fruit`.`name` LIKE \'%tropical%\'",\n        "LEFT JOIN `cake_filling` ON `cake`.`id` = `cake_filling`.`cake_id` AND `cake_filling`.`cake_id` > 10",\n        "LEFT JOIN `filling` ON `cake_filling`.`filling_id` = `filling`.`id` AND `filling`.`name` LIKE \'%lemon%\'",\n        "LEFT JOIN `vendor` ON `filling`.`vendor_id` = `vendor`.`id`",\n    ]\n    .join(" ")\n);\n')),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"OR")," \u6761\u4ef6\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    cake::Entity::find()\n        .column_as(\n            Expr::col((Alias::new("cake_filling_alias"), cake_filling::Column::CakeId)),\n            "cake_filling_cake_id"\n        )\n        .join(JoinType::LeftJoin, cake::Relation::OrTropicalFruit.def())\n        .join_as_rev(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake\n                .def()\n                .condition_type(ConditionType::Any)\n                .on_condition(|left, _right| {\n                    Expr::col((left, cake_filling::Column::CakeId))\n                        .gt(10)\n                        .into_condition()\n                }),\n            Alias::new("cake_filling_alias")\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `cake`.`id`, `cake`.`name`, `cake_filling_alias`.`cake_id` AS `cake_filling_cake_id` FROM `cake`",\n        "LEFT JOIN `fruit` ON `cake`.`id` = `fruit`.`cake_id` OR `fruit`.`name` LIKE \'%tropical%\'",\n        "LEFT JOIN `cake_filling` AS `cake_filling_alias` ON `cake_filling_alias`.`cake_id` = `cake`.`id` OR `cake_filling_alias`.`cake_id` > 10",\n    ]\n    .join(" ")\n);\n')),(0,a.yg)("p",null,"\u5728\u8fde\u63a5\u8bed\u53e5\u4e2d\u6307\u5b9a\u8868\u522b\u540d\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'let cf = Alias::new("cf");\n\nassert_eq!(\n    cake::Entity::find()\n        .join_as(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Cake.def().rev(),\n            cf.clone()\n        )\n        .join(\n            JoinType::LeftJoin,\n            cake_filling::Relation::Filling.def().from_alias(cf)\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `cake`.`id`, `cake`.`name` FROM `cake`",\n        "LEFT JOIN `cake_filling` AS `cf` ON `cake`.`id` = `cf`.`cake_id`",\n        "LEFT JOIN `filling` ON `cf`.`filling_id` = `filling`.`id`",\n    ]\n    .join(" ")\n);\n')))}f.isMDXComponent=!0}}]);