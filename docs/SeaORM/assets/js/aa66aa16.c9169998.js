"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[83257],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=m(t),d=r,y=u["".concat(s,".").concat(d)]||u[d]||p[d]||i;return t?a.createElement(y,l(l({ref:n},c),{},{components:t})):a.createElement(y,l({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},67226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var a=t(58168),r=(t(96540),t(15680));const i={},l="\u521b\u5efa\u679a\u4e3e",o={unversionedId:"generate-database-schema/create-enum",id:"version-0.4.x/generate-database-schema/create-enum",title:"\u521b\u5efa\u679a\u4e3e",description:"\u5728\u5b9a\u4e49\u4e86 Entity \u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 Schema \u52a9\u624b\u7ed3\u6784\u751f\u6210\u7528\u4e8e\u521b\u5efa\u6570\u636e\u5e93\u8868\u7684 SQL \u8bed\u53e5\uff0c\u8be5\u8868\u5305\u542b\u679a\u4e3e\u5217\u3002",source:"@site/versioned_docs/version-0.4.x/04-generate-database-schema/02-create-enum.md",sourceDirName:"04-generate-database-schema",slug:"/generate-database-schema/create-enum",permalink:"/SeaORM/docs/0.4.x/generate-database-schema/create-enum",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.4.x/04-generate-database-schema/02-create-enum.md",tags:[],version:"0.4.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1640968088,formattedLastUpdatedAt:"Dec 31, 2021",sidebarPosition:2,frontMatter:{},sidebar:"version-0.4.x/tutorialSidebar",previous:{title:"\u521b\u5efa\u8868",permalink:"/SeaORM/docs/0.4.x/generate-database-schema/create-table"},next:{title:"\u9009\u62e9",permalink:"/SeaORM/docs/0.4.x/basic-crud/select"}},s={},m=[{value:"\u5b57\u7b26\u4e32\u548c\u6574\u6570\u679a\u4e3e",id:"\u5b57\u7b26\u4e32\u548c\u6574\u6570\u679a\u4e3e",level:2},{value:"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e",id:"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e",level:2},{value:"PostgreSQL",id:"postgresql",level:3},{value:"MySQL",id:"mysql",level:3},{value:"SQLite",id:"sqlite",level:3}],c={toc:m},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u521b\u5efa\u679a\u4e3e"},"\u521b\u5efa\u679a\u4e3e"),(0,r.yg)("p",null,"\u5728\u5b9a\u4e49\u4e86 ",(0,r.yg)("inlineCode",{parentName:"p"},"Entity")," \u4e4b\u540e\uff0c\u53ef\u4ee5\u901a\u8fc7 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/0.4/sea_orm/schema/struct.Schema.html"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema"))," \u52a9\u624b\u7ed3\u6784\u751f\u6210\u7528\u4e8e\u521b\u5efa\u6570\u636e\u5e93\u8868\u7684 SQL \u8bed\u53e5\uff0c\u8be5\u8868\u5305\u542b\u679a\u4e3e\u5217\u3002"),(0,r.yg)("h2",{id:"\u5b57\u7b26\u4e32\u548c\u6574\u6570\u679a\u4e3e"},"\u5b57\u7b26\u4e32\u548c\u6574\u6570\u679a\u4e3e"),(0,r.yg)("p",null,"\u7531\u4e8e\u8fd9\u53ea\u662f\u6570\u636e\u5e93\u8868\u4e2d\u7684\u666e\u901a\u5b57\u7b26\u4e32 / \u6574\u6570\u5217\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/0.4/sea_orm/schema/struct.Schema.html#method.create_table_from_entity"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema::create_table_from_entity"))," \u65b9\u6cd5\uff0c\u5982\u4e0b\u6240\u793a\u3002"),(0,r.yg)("p",null,"\u5b9a\u4e49 ",(0,r.yg)("inlineCode",{parentName:"p"},"Entity")," \u548c\u679a\u4e3e\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'pub mod active_enum {\n    use sea_orm::entity::prelude::*;\n    \n    #[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n    #[sea_orm(schema_name = "public", table_name = "active_enum")]\n    pub struct Model {\n        #[sea_orm(primary_key)]\n        pub id: i32, // \u4e3b\u952e\n        pub category: Option<Category>, // \u7c7b\u522b\n        pub color: Option<Color>, // \u989c\u8272\n    }\n    \n    #[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum)]\n    #[sea_orm(rs_type = "String", db_type = "String(Some(1))")]\n    pub enum Category {\n        #[sea_orm(string_value = "B")]\n        Big, // \u5927\n        #[sea_orm(string_value = "S")]\n        Small, // \u5c0f\n    }\n    \n    #[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum)]\n    #[sea_orm(rs_type = "i32", db_type = "Integer")]\n    pub enum Color {\n        #[sea_orm(num_value = 0)]\n        Black, // \u9ed1\u8272\n        #[sea_orm(num_value = 1)]\n        White, // \u767d\u8272\n    }\n    \n    #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\n    pub enum Relation {}\n    \n    impl ActiveModelBehavior for ActiveModel {}\n}\n')),(0,r.yg)("p",null,"\u4ece ",(0,r.yg)("inlineCode",{parentName:"p"},"Entity")," \u751f\u6210 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-query/*/sea_query/table/struct.TableCreateStatement.html"},(0,r.yg)("inlineCode",{parentName:"a"},"TableCreateStatement")),"\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"use sea_orm::{sea_query, Schema};\n\nlet builder = db.get_database_backend();\nlet schema = Schema::new(builder);\n\nassert_eq!(\n    builder.build(&schema.create_table_from_entity(active_enum::Entity)),\n    builder.build(\n        &sea_query::Table::create()\n            .table(active_enum::Entity.table_ref())\n            .col(\n                sea_query::ColumnDef::new(active_enum::Column::Id)\n                    .integer()\n                    .not_null()\n                    .auto_increment()\n                    .primary_key(),\n            )\n            .col(sea_query::ColumnDef::new(active_enum::Column::Category).string_len(1))\n            .col(sea_query::ColumnDef::new(active_enum::Column::Color).integer())\n            .to_owned()\n    )\n);\n")),(0,r.yg)("h2",{id:"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e"},"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e"),(0,r.yg)("p",null,"\u4e0d\u540c\u6570\u636e\u5e93\u7684\u679a\u4e3e\u652f\u6301\u662f\u4e0d\u540c\u7684\u3002\u6211\u4eec\u5c06\u4e3a\u6bcf\u79cd\u6570\u636e\u5e93\u89e3\u91ca\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e\u7684\u521b\u5efa\u3002"),(0,r.yg)("p",null,"\u5b9a\u4e49 ",(0,r.yg)("inlineCode",{parentName:"p"},"Entity")," \u548c\u679a\u4e3e\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'pub mod active_enum {\n    use sea_orm::entity::prelude::*;\n    \n    #[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n    #[sea_orm(schema_name = "public", table_name = "active_enum")]\n    pub struct Model {\n        #[sea_orm(primary_key)]\n        pub id: i32, // \u4e3b\u952e\n        pub tea: Option<Tea>, // \u8336\n    }\n    \n    #[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum)]\n    #[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "tea")]\n    pub enum Tea {\n        #[sea_orm(string_value = "EverydayTea")]\n        EverydayTea, // \u65e5\u5e38\u8336\n        #[sea_orm(string_value = "BreakfastTea")]\n        BreakfastTea, // \u65e9\u9910\u8336\n    }\n    \n    #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\n    pub enum Relation {}\n    \n    impl ActiveModelBehavior for ActiveModel {}\n}\n')),(0,r.yg)("h3",{id:"postgresql"},"PostgreSQL"),(0,r.yg)("p",null,"\u5728 PostgreSQL \u4e2d\uff0c\u679a\u4e3e\u88ab\u5b9a\u4e49\u4e3a\u81ea\u5b9a\u4e49\u7c7b\u578b\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/0.4/sea_orm/schema/struct.Schema.html#method.create_enum_from_entity"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema::create_enum_from_entity"))," \u65b9\u6cd5\u8fdb\u884c\u521b\u5efa\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{Schema, Statement};\n\nlet db_postgres = DbBackend::Postgres;\nlet schema = Schema::new(db_postgres);\n\nassert_eq!(\n    schema\n        .create_enum_from_entity(active_enum::Entity)\n        .iter()\n        .map(|stmt| db_postgres.build(stmt))\n        .collect::<Vec<_>>(),\n    vec![Statement::from_string(\n        db_postgres,\n        r#"CREATE TYPE "tea" AS ENUM (\'EverydayTea\', \'BreakfastTea\')"#.to_owned()\n    ),]\n);\n\nassert_eq!(\n    db_postgres.build(&schema.create_table_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_postgres,\n        vec![\n            r#"CREATE TABLE "public"."active_enum" ("#,\n            r#""id" serial NOT NULL PRIMARY KEY,"#,\n            r#""tea" tea"#,\n            r#")"#,\n        ]\n        .join(" ")\n    ),\n);\n')),(0,r.yg)("h3",{id:"mysql"},"MySQL"),(0,r.yg)("p",null,"\u5728 MySQL \u4e2d\uff0c\u679a\u4e3e\u5728\u8868\u521b\u5efa\u65f6\u5b9a\u4e49\uff0c\u56e0\u6b64\u53ea\u9700\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/0.4/sea_orm/schema/struct.Schema.html#method.create_table_from_entity"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema::create_table_from_entity"))," \u65b9\u6cd5\u5373\u53ef\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{Schema, Statement};\n\nlet db_mysql = DbBackend::MySql;\nlet schema = Schema::new(db_mysql);\n\nassert_eq!(\n    db_mysql.build(&schema.create_table_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_mysql,\n        vec![\n            "CREATE TABLE `active_enum` (",\n            "`id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,",\n            "`tea` ENUM(\'EverydayTea\', \'BreakfastTea\')",\n            ")",\n        ]\n        .join(" ")\n    ),\n);\n')),(0,r.yg)("h3",{id:"sqlite"},"SQLite"),(0,r.yg)("p",null,"SQLite \u4e0d\u652f\u6301\u679a\u4e3e\uff0c\u56e0\u6b64\u5c06\u5176\u5b58\u50a8\u4e3a ",(0,r.yg)("inlineCode",{parentName:"p"},"TEXT")," \u7c7b\u578b\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{Schema, Statement};\n\nlet db_sqlite = DbBackend::Sqlite;\nlet schema = Schema::new(db_sqlite);\n\nassert_eq!(\n    db_sqlite.build(&schema.create_table_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_sqlite,\n        vec![\n            "CREATE TABLE `active_enum` (",\n            "`id` integer NOT NULL PRIMARY KEY AUTOINCREMENT,",\n            "`tea` text",\n            ")",\n        ]\n        .join(" ")\n    ),\n);\n')))}p.isMDXComponent=!0}}]);