"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[94482],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>m});var r=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=r.createContext({}),c=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(d.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=c(t),f=i,m=p["".concat(d,".").concat(f)]||p[f]||g[f]||a;return t?r.createElement(m,l(l({ref:n},s),{},{components:t})):r.createElement(m,l({ref:n},s))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=f;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},17830:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(58168),i=(t(96540),t(15680));const a={},l="\u94fe\u63a5\u5173\u7cfb",o={unversionedId:"relation/chained-relations",id:"version-0.9.x/relation/chained-relations",title:"\u94fe\u63a5\u5173\u7cfb",description:"Related \u7279\u5f81\u8868\u793a\u6211\u4eec\u5728\u5b9e\u4f53\u5173\u7cfb\u56fe\u4e2d\u7ed8\u5236\u7684\u7bad\u5934\uff081-1\uff0c1-N\uff0cM-N\uff09\u3002\u4e00\u4e2a Linked \u662f\u7531\u4e00\u7cfb\u5217\u5173\u7cfb\u7ec4\u6210\u7684\u94fe\u6761\uff0c\u9002\u7528\u4e8e\u4ee5\u4e0b\u60c5\u51b5\uff1a",source:"@site/versioned_docs/version-0.9.x/06-relation/04-chained-relations.md",sourceDirName:"06-relation",slug:"/relation/chained-relations",permalink:"/SeaORM/docs/0.9.x/relation/chained-relations",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.9.x/06-relation/04-chained-relations.md",tags:[],version:"0.9.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1658139269,formattedLastUpdatedAt:"Jul 18, 2022",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u591a\u5bf9\u591a",permalink:"/SeaORM/docs/0.9.x/relation/many-to-many"},next:{title:"\u81ea\u5f15\u7528",permalink:"/SeaORM/docs/0.9.x/relation/self-referencing"}},d={},c=[{value:"\u5ef6\u8fdf\u52a0\u8f7d",id:"\u5ef6\u8fdf\u52a0\u8f7d",level:3},{value:"\u6025\u5207\u52a0\u8f7d",id:"\u6025\u5207\u52a0\u8f7d",level:3}],s={toc:c},p="wrapper";function g(e){let{components:n,...t}=e;return(0,i.yg)(p,(0,r.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"\u94fe\u63a5\u5173\u7cfb"},"\u94fe\u63a5\u5173\u7cfb"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Related")," \u7279\u5f81\u8868\u793a\u6211\u4eec\u5728\u5b9e\u4f53\u5173\u7cfb\u56fe\u4e2d\u7ed8\u5236\u7684\u7bad\u5934\uff081-1\uff0c1-N\uff0cM-N\uff09\u3002\u4e00\u4e2a ",(0,i.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/0.9/sea_orm/entity/trait.Linked.html"},(0,i.yg)("inlineCode",{parentName:"a"},"Linked"))," \u662f\u7531\u4e00\u7cfb\u5217\u5173\u7cfb\u7ec4\u6210\u7684\u94fe\u6761\uff0c\u9002\u7528\u4e8e\u4ee5\u4e0b\u60c5\u51b5\uff1a"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"\u5b58\u5728\u591a\u4e2a\u8fde\u63a5\u8def\u5f84\u5728\u4e00\u5bf9\u5b9e\u4f53\u4e4b\u95f4"),(0,i.yg)("li",{parentName:"ol"},"\u5728\u5173\u7cfb\u67e5\u8be2\u4e2d\u8de8\u591a\u4e2a\u5b9e\u4f53\u8fdb\u884c\u8fde\u63a5")),(0,i.yg)("p",null,"\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u793a\u4f8b ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/blob/master/src/tests_cfg/cake.rs"},"this"),"\uff0c\u6211\u4eec\u901a\u8fc7\u4e2d\u95f4\u7684 ",(0,i.yg)("inlineCode",{parentName:"p"},"cake_filling")," \u8868\u8fde\u63a5\u86cb\u7cd5\u548c\u9985\u6599\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug)]\npub struct CakeToFilling;\n\nimpl Linked for CakeToFilling {\n    type FromEntity = cake::Entity;\n\n    type ToEntity = filling::Entity;\n\n    fn link(&self) -> Vec<RelationDef> {\n        vec![\n            cake_filling::Relation::Cake.def().rev(),\n            cake_filling::Relation::Filling.def(),\n        ]\n    }\n}\n")),(0,i.yg)("p",null,"\u6216\u8005\uff0c\u53ef\u4ee5\u52a8\u6001\u5b9a\u4e49 ",(0,i.yg)("inlineCode",{parentName:"p"},"RelationDef"),"\uff0c\u4ee5\u4e0b\u5185\u5bb9\u548c\u4e0a\u9762\u7684\u5185\u5bb9\u662f\u7b49\u4ef7\u7684\uff1a"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug)]\npub struct CakeToFilling;\n\nimpl Linked for CakeToFilling {\n    type FromEntity = cake::Entity;\n\n    type ToEntity = filling::Entity;\n\n    fn link(&self) -> Vec<RelationDef> {\n        vec![\n            cake_filling::Relation::Cake.def().rev(),\n            cake_filling::Entity::belongs_to(filling::Entity)\n                .from(cake_filling::Column::FillingId)\n                .to(filling::Column::Id)\n                .into(),\n        ]\n    }\n}\n")),(0,i.yg)("h3",{id:"\u5ef6\u8fdf\u52a0\u8f7d"},"\u5ef6\u8fdf\u52a0\u8f7d"),(0,i.yg)("p",null,"\u4f7f\u7528 ",(0,i.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/0.9/sea_orm/entity/prelude/trait.ModelTrait.html#method.find_linked"},(0,i.yg)("inlineCode",{parentName:"a"},"find_linked"))," \u65b9\u6cd5\u67e5\u627e\u53ef\u4ee5\u586b\u5145\u5230\u86cb\u7cd5\u4e2d\u7684\u9985\u6599\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-rust"},'let cake_model = cake::Model {\n    id: 12,\n    name: "".to_owned(),\n};\n\nassert_eq!(\n    cake_model\n        .find_linked(cake::CakeToFilling)\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `filling`.`id`, `filling`.`name`, `filling`.`vendor_id`",\n        "FROM `filling`",\n        "INNER JOIN `cake_filling` AS `r0` ON `r0`.`filling_id` = `filling`.`id`",\n        "INNER JOIN `cake` AS `r1` ON `r1`.`id` = `r0`.`cake_id`",\n        "WHERE `r1`.`id` = 12",\n    ]\n    .join(" ")\n);\n')),(0,i.yg)("h3",{id:"\u6025\u5207\u52a0\u8f7d"},"\u6025\u5207\u52a0\u8f7d"),(0,i.yg)("p",null,"\u4f7f\u7528 ",(0,i.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/0.9/sea_orm/entity/prelude/struct.Select.html#method.find_also_linked"},(0,i.yg)("inlineCode",{parentName:"a"},"find_also_linked"))," \u65b9\u6cd5\u67e5\u627e\u6240\u6709\u4e00\u8d77\u7684\u86cb\u7cd5\u548c\u9985\u6599\u5bf9\u3002"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    cake::Entity::find()\n        .find_also_linked(cake::CakeToFilling)\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `cake`.`id` AS `A_id`, `cake`.`name` AS `A_name`,",\n        "`r1`.`id` AS `B_id`, `r1`.`name` AS `B_name`, `r1`.`vendor_id` AS `B_vendor_id`",\n        "FROM `cake`",\n        "LEFT JOIN `cake_filling` AS `r0` ON `cake`.`id` = `r0`.`cake_id`",\n        "LEFT JOIN `filling` AS `r1` ON `r0`.`filling_id` = `r1`.`id`",\n    ]\n    .join(" ")\n);\n')))}g.isMDXComponent=!0}}]);