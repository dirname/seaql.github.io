"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[74803],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>g});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),c=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(d.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,g=u["".concat(d,".").concat(m)]||u[m]||p[m]||l;return t?a.createElement(g,i(i({ref:n},s),{},{components:t})):a.createElement(g,i({ref:n},s))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},66823:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var a=t(58168),r=(t(96540),t(15680));const l={},i="\u63d2\u5165",o={unversionedId:"basic-crud/insert",id:"version-0.10.x/basic-crud/insert",title:"\u63d2\u5165",description:"\u5728\u6df1\u5165\u4e86\u89e3 SeaORM \u63d2\u5165\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4ecb\u7ecd ActiveValue \u548c ActiveModel\u3002",source:"@site/versioned_docs/version-0.10.x/05-basic-crud/02-insert.md",sourceDirName:"05-basic-crud",slug:"/basic-crud/insert",permalink:"/SeaORM/docs/0.10.x/basic-crud/insert",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.10.x/05-basic-crud/02-insert.md",tags:[],version:"0.10.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1667313808,formattedLastUpdatedAt:"Nov 1, 2022",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u9009\u62e9",permalink:"/SeaORM/docs/0.10.x/basic-crud/select"},next:{title:"\u66f4\u65b0",permalink:"/SeaORM/docs/0.10.x/basic-crud/update"}},d={},c=[{value:"ActiveValue",id:"activevalue",level:2},{value:"\u6a21\u578b\u4e0e ActiveModel",id:"\u6a21\u578b\u4e0e-activemodel",level:2},{value:"\u4ece JSON \u503c\u8bbe\u7f6e ActiveModel",id:"\u4ece-json-\u503c\u8bbe\u7f6e-activemodel",level:3},{value:"\u68c0\u67e5 ActiveModel \u662f\u5426\u66f4\u6539",id:"\u68c0\u67e5-activemodel-\u662f\u5426\u66f4\u6539",level:3},{value:"\u5c06 ActiveModel \u8f6c\u6362\u56de Model",id:"\u5c06-activemodel-\u8f6c\u6362\u56de-model",level:3},{value:"\u63d2\u5165\u4e00\u6761\u8bb0\u5f55",id:"\u63d2\u5165\u4e00\u6761\u8bb0\u5f55",level:2},{value:"\u63d2\u5165\u591a\u6761\u8bb0\u5f55",id:"\u63d2\u5165\u591a\u6761\u8bb0\u5f55",level:2},{value:"\u51b2\u7a81\u5904\u7406",id:"\u51b2\u7a81\u5904\u7406",level:2}],s={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.yg)(u,(0,a.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u63d2\u5165"},"\u63d2\u5165"),(0,r.yg)("p",null,"\u5728\u6df1\u5165\u4e86\u89e3 SeaORM \u63d2\u5165\u4e4b\u524d\uff0c\u6211\u4eec\u9700\u8981\u4ecb\u7ecd ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveValue")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveModel"),"\u3002"),(0,r.yg)("h2",{id:"activevalue"},"ActiveValue"),(0,r.yg)("p",null,"\u4e00\u4e2a\u5c01\u88c5\u7ed3\u6784\uff0c\u7528\u4e8e\u6355\u83b7\u5bf9 ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveModel")," \u5c5e\u6027\u6240\u505a\u7684\u66f4\u6539\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"use sea_orm::ActiveValue::NotSet;\n\n// \u8bbe\u7f6e\u503c\nlet _: ActiveValue<i32> = Set(10);\n\n// \u672a\u8bbe\u7f6e\u503c\nlet _: ActiveValue<i32> = NotSet;\n")),(0,r.yg)("h2",{id:"\u6a21\u578b\u4e0e-activemodel"},"\u6a21\u578b\u4e0e ActiveModel"),(0,r.yg)("p",null,"\u4e00\u4e2a ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveModel")," \u5305\u542b\u6240\u6709 ",(0,r.yg)("inlineCode",{parentName:"p"},"Model")," \u7684\u5c5e\u6027\uff0c\u5c5e\u6027\u7531 ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveValue")," \u5305\u88c5\u3002"),(0,r.yg)("p",null,"\u4f60\u53ef\u4ee5\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveModel")," \u63d2\u5165\u4e00\u884c\uff0c\u5176\u4e2d\u90e8\u5206\u5217\u88ab\u8bbe\u7f6e\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let cheese: Option<cake::Model> = Cake::find_by_id(1).one(db).await?;\n\n// \u83b7\u53d6\u6a21\u578b\nlet model: cake::Model = cheese.unwrap();\nassert_eq!(model.name, "Cheese Cake".to_owned());\n\n// \u8f6c\u6362\u4e3a ActiveModel\nlet active_model: cake::ActiveModel = model.into();\nassert_eq!(active_model.name, ActiveValue::unchanged("Cheese Cake".to_owned()));\n')),(0,r.yg)("h3",{id:"\u4ece-json-\u503c\u8bbe\u7f6e-activemodel"},"\u4ece JSON \u503c\u8bbe\u7f6e ActiveModel"),(0,r.yg)("p",null,"\u5982\u679c\u4f60\u60f3\u5c06\u7528\u6237\u8f93\u5165\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u4e2d\uff0c\u4f60\u53ef\u4ee5\u8f7b\u677e\u5730\u5c06 JSON \u503c\u8f6c\u6362\u4e3a ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveModel"),"\u3002\u6ce8\u610f\uff0c\u4f60\u53ef\u80fd\u60f3\u8981 ",(0,r.yg)("a",{parentName:"p",href:"https://serde.rs/attr-skip-serializing.html"},"\u8df3\u8fc7\u53cd\u5e8f\u5217\u5316")," JSON \u7684\u4e3b\u952e\u5c5e\u6027\uff0c\u4f60\u53ef\u4ee5\u6309\u5982\u4e0b\u65b9\u5f0f\u8fdb\u884c\u914d\u7f6e\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]\n#[sea_orm(table_name = "fruit")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    #[serde(skip_deserializing)] // \u8df3\u8fc7\u53cd\u5e8f\u5217\u5316\n    pub id: i32,\n    pub name: String,\n    pub cake_id: Option<i32>,\n}\n')),(0,r.yg)("p",null,"\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"set_from_json")," \u65b9\u6cd5\u5728 ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveModel")," \u4e2d\u8bbe\u7f6e\u5c5e\u6027\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'// \u4e00\u4e2a\u8bbe\u7f6e\u4e86\u4e3b\u952e\u7684 ActiveModel\nlet mut fruit = fruit::ActiveModel {\n    id: ActiveValue::Set(1),\n    name: ActiveValue::NotSet,\n    cake_id: ActiveValue::NotSet,\n};\n\n// \u6ce8\u610f\u8fd9\u4e2a\u65b9\u6cd5\u4e0d\u4f1a\u66f4\u6539 ActiveModel \u4e2d\u7684\u4e3b\u952e\u503c\nfruit.set_from_json(json!({\n    "id": 8,\n    "name": "Apple",\n    "cake_id": 1,\n}))?;\n\nassert_eq!(\n    fruit,\n    fruit::ActiveModel {\n        id: ActiveValue::Set(1),\n        name: ActiveValue::Set("Apple".to_owned()),\n        cake_id: ActiveValue::Set(Some(1)),\n    }\n);\n')),(0,r.yg)("p",null,"\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"from_json")," \u65b9\u6cd5\u4ece JSON \u503c\u521b\u5efa\u4e00\u4e2a\u65b0\u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveModel"),"\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let fruit = fruit::ActiveModel::from_json(json!({\n    "name": "Apple",\n}))?;\n\nassert_eq!(\n    fruit,\n    fruit::ActiveModel {\n        id: ActiveValue::NotSet,\n        name: ActiveValue::Set("Apple".to_owned()),\n        cake_id: ActiveValue::NotSet,\n    }\n);\n')),(0,r.yg)("h3",{id:"\u68c0\u67e5-activemodel-\u662f\u5426\u66f4\u6539"},"\u68c0\u67e5 ActiveModel \u662f\u5426\u66f4\u6539"),(0,r.yg)("p",null,"\u4f60\u53ef\u4ee5\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/entity/prelude/trait.ActiveModelTrait.html#method.is_changed"},(0,r.yg)("inlineCode",{parentName:"a"},"is_changed"))," \u65b9\u6cd5\u68c0\u67e5 ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveModel")," \u4e2d\u7684\u4efb\u4f55\u5b57\u6bb5\u662f\u5426\u88ab ",(0,r.yg)("inlineCode",{parentName:"p"},"Set"),"\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let mut fruit: fruit::ActiveModel = Default::default();\nassert!(!fruit.is_changed());\n\nfruit.set(fruit::Column::Name, "apple".into());\nassert!(fruit.is_changed());\n')),(0,r.yg)("h3",{id:"\u5c06-activemodel-\u8f6c\u6362\u56de-model"},"\u5c06 ActiveModel \u8f6c\u6362\u56de Model"),(0,r.yg)("p",null,"\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/entity/trait.TryIntoModel.html#tymethod.try_into_model"},"try_into_model")," \u65b9\u6cd5\uff0c\u4f60\u53ef\u4ee5\u5c06 ActiveModel \u8f6c\u6362\u56de Model\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    ActiveModel {\n        id: Set(2),\n        name: Set("Apple".to_owned()),\n        cake_id: Set(Some(1)),\n    }\n    .try_into_model()\n    .unwrap(),\n    Model {\n        id: 2,\n        name: "Apple".to_owned(),\n        cake_id: Some(1),\n    }\n);\n\nassert_eq!(\n    ActiveModel {\n        id: Set(1),\n        name: NotSet,\n        cake_id: Set(None),\n    }\n    .try_into_model(),\n    Err(DbErr::AttrNotSet(String::from("name")))\n);\n')),(0,r.yg)("h2",{id:"\u63d2\u5165\u4e00\u6761\u8bb0\u5f55"},"\u63d2\u5165\u4e00\u6761\u8bb0\u5f55"),(0,r.yg)("p",null,"\u63d2\u5165\u4e00\u4e2a\u6d3b\u52a8\u6a21\u578b\u5e76\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"Model"),"\u3002\u5176\u503c\u662f\u4ece\u6570\u636e\u5e93\u4e2d\u68c0\u7d22\u7684\uff0c\u56e0\u6b64\u4efb\u4f55\u81ea\u52a8\u751f\u6210\u7684\u5b57\u6bb5\u90fd\u5c06\u88ab\u586b\u5145\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let pear = fruit::ActiveModel {\n    name: Set("Pear".to_owned()),\n    ..Default::default() // \u6240\u6709\u5176\u4ed6\u5c5e\u6027\u4e3a `NotSet`\n};\n\nlet pear: fruit::Model = pear.insert(db).await?;\n')),(0,r.yg)("p",null,"\u63d2\u5165\u4e00\u4e2a\u6d3b\u52a8\u6a21\u578b\u5e76\u8fd4\u56de\u6700\u540e\u63d2\u5165\u7684 ID\u3002\u5176\u7c7b\u578b\u4e0e\u6a21\u578b\u7684\u4e3b\u952e\u7c7b\u578b\u5339\u914d\uff0c\u56e0\u6b64\u5982\u679c\u6a21\u578b\u6709\u590d\u5408\u4e3b\u952e\uff0c\u5b83\u53ef\u80fd\u662f\u4e00\u4e2a\u5143\u7ec4\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let pear = fruit::ActiveModel {\n    name: Set("Pear".to_owned()),\n    ..Default::default() // \u6240\u6709\u5176\u4ed6\u5c5e\u6027\u4e3a `NotSet`\n};\n\nlet res: InsertResult = fruit::Entity::insert(pear).exec(db).await?;\nassert_eq!(res.last_insert_id, 28)\n')),(0,r.yg)("h2",{id:"\u63d2\u5165\u591a\u6761\u8bb0\u5f55"},"\u63d2\u5165\u591a\u6761\u8bb0\u5f55"),(0,r.yg)("p",null,"\u63d2\u5165\u591a\u4e2a\u6d3b\u52a8\u6a21\u578b\u5e76\u8fd4\u56de\u6700\u540e\u63d2\u5165\u7684 ID\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let apple = fruit::ActiveModel {\n    name: Set("Apple".to_owned()),\n    ..Default::default()\n};\n\nlet orange = fruit::ActiveModel {\n    name: Set("Orange".to_owned()),\n    ..Default::default()\n};\n\nlet res: InsertResult = Fruit::insert_many(vec![apple, orange]).exec(db).await?;\nassert_eq!(res.last_insert_id, 30)\n')),(0,r.yg)("h2",{id:"\u51b2\u7a81\u5904\u7406"},"\u51b2\u7a81\u5904\u7406"),(0,r.yg)("p",null,"\u63d2\u5165\u6d3b\u52a8\u6a21\u578b\u5e76\u5904\u7406\u51b2\u7a81\u884c\u4e3a\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let orange = cake::ActiveModel {\n    id: ActiveValue::set(2),\n    name: ActiveValue::set("Orange".to_owned()),\n};\n\nassert_eq!(\n    cake::Entity::insert(orange.clone())\n        .on_conflict(\n            // \u51b2\u7a81\u65f6\u4ec0\u4e48\u90fd\u4e0d\u505a\n            sea_query::OnConflict::column(cake::Column::Name)\n                .do_nothing()\n                .to_owned()\n        )\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"INSERT INTO "cake" ("id", "name") VALUES (2, \'Orange\') ON CONFLICT ("name") DO NOTHING"#,\n);\n\nassert_eq!(\n    cake::Entity::insert(orange)\n        .on_conflict(\n            // \u51b2\u7a81\u65f6\u66f4\u65b0\n            sea_query::OnConflict::column(cake::Column::Name)\n                .update_column(cake::Column::Name)\n                .to_owned()\n        )\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"INSERT INTO "cake" ("id", "name") VALUES (2, \'Orange\') ON CONFLICT ("name") DO UPDATE SET "name" = "excluded"."name""#,\n);\n')))}p.isMDXComponent=!0}}]);