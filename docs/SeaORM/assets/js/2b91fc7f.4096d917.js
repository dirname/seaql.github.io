"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[61027],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},25309:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(58168),a=(n(96540),n(15680));const o={},i="\u6570\u636e\u586b\u5145",c={unversionedId:"migration/seeding-data",id:"version-0.8.x/migration/seeding-data",title:"\u6570\u636e\u586b\u5145",description:"\u60a8\u53ef\u4ee5\u4ece SchemaManager \u83b7\u53d6 DbConn\uff0c\u5e76\u6839\u636e\u9700\u8981\u6267\u884c\u6570\u636e\u64cd\u4f5c\uff0c\u4f8b\u5982\u586b\u5145\u6570\u636e\u3002",source:"@site/versioned_docs/version-0.8.x/06-migration/04-seeding-data.md",sourceDirName:"06-migration",slug:"/migration/seeding-data",permalink:"/SeaORM/docs/0.8.x/migration/seeding-data",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.8.x/06-migration/04-seeding-data.md",tags:[],version:"0.8.x",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1652611908,formattedLastUpdatedAt:"May 15, 2022",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u64cd\u4f5c\u8fc1\u79fb",permalink:"/SeaORM/docs/0.8.x/migration/running-migration"},next:{title:"\u4e00\u5bf9\u4e00",permalink:"/SeaORM/docs/0.8.x/relation/one-to-one"}},s={},l=[],p={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(d,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u6570\u636e\u586b\u5145"},"\u6570\u636e\u586b\u5145"),(0,a.yg)("p",null,"\u60a8\u53ef\u4ee5\u4ece ",(0,a.yg)("inlineCode",{parentName:"p"},"SchemaManager")," \u83b7\u53d6 ",(0,a.yg)("inlineCode",{parentName:"p"},"DbConn"),"\uff0c\u5e76\u6839\u636e\u9700\u8981\u6267\u884c\u6570\u636e\u64cd\u4f5c\uff0c\u4f8b\u5982\u586b\u5145\u6570\u636e\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm_migration::sea_orm::{entity::*, query::*};\n\n// ...\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let db = manager.get_connection();\n\n        cake::ActiveModel {\n            name: Set("Cheesecake".to_owned()),  // \u8bbe\u7f6e\u86cb\u7cd5\u540d\u79f0\u4e3a "Cheesecake"\n            ..Default::default()\n        }\n        .insert(db)\n        .await?;\n\n        Ok(())\n    }\n}\n')))}u.isMDXComponent=!0}}]);