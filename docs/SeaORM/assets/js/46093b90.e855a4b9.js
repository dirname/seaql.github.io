"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[32924],{15680:(e,n,a)=>{a.d(n,{xA:()=>s,yg:()=>c});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var g=t.createContext({}),m=function(e){var n=t.useContext(g),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},s=function(e){var n=m(e.components);return t.createElement(g.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},y=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,g=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=m(a),y=r,c=p["".concat(g,".").concat(y)]||p[y]||u[y]||i;return a?t.createElement(c,l(l({ref:n},s),{},{components:a})):t.createElement(c,l({ref:n},s))}));function c(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=y;var o={};for(var g in n)hasOwnProperty.call(n,g)&&(o[g]=n[g]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=a[m];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}y.displayName="MDXCreateElement"},38331:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>g,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>m});var t=a(58168),r=(a(96540),a(15680));const i={},l="\u7f16\u5199\u8fc1\u79fb",o={unversionedId:"migration/writing-migration",id:"version-0.11.x/migration/writing-migration",title:"\u7f16\u5199\u8fc1\u79fb",description:"\u6bcf\u4e2a\u8fc1\u79fb\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1aup \u548c down\u3002up \u65b9\u6cd5\u7528\u4e8e\u66f4\u6539\u6570\u636e\u5e93\u6a21\u5f0f\uff0c\u4f8b\u5982\u6dfb\u52a0\u65b0\u8868\u3001\u5217\u6216\u7d22\u5f15\uff0c\u800c down \u65b9\u6cd5\u5219\u64a4\u9500 up \u65b9\u6cd5\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u3002",source:"@site/versioned_docs/version-0.11.x/03-migration/02-writing-migration.md",sourceDirName:"03-migration",slug:"/migration/writing-migration",permalink:"/SeaORM/docs/0.11.x/migration/writing-migration",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.11.x/03-migration/02-writing-migration.md",tags:[],version:"0.11.x",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1697098869,formattedLastUpdatedAt:"Oct 12, 2023",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u8bbe\u7f6e\u8fc1\u79fb",permalink:"/SeaORM/docs/0.11.x/migration/setting-up-migration"},next:{title:"\u8fd0\u884c\u8fc1\u79fb",permalink:"/SeaORM/docs/0.11.x/migration/running-migration"}},g={},m=[{value:"\u521b\u5efa\u8fc1\u79fb",id:"\u521b\u5efa\u8fc1\u79fb",level:2},{value:"\u5b9a\u4e49\u8fc1\u79fb",id:"\u5b9a\u4e49\u8fc1\u79fb",level:2},{value:"SeaQuery",id:"seaquery",level:3},{value:"\u6a21\u5f0f\u521b\u5efa\u65b9\u6cd5",id:"\u6a21\u5f0f\u521b\u5efa\u65b9\u6cd5",level:4},{value:"\u6a21\u5f0f\u4fee\u6539\u65b9\u6cd5",id:"\u6a21\u5f0f\u4fee\u6539\u65b9\u6cd5",level:4},{value:"\u6a21\u5f0f\u68c0\u67e5\u65b9\u6cd5",id:"\u6a21\u5f0f\u68c0\u67e5\u65b9\u6cd5",level:4},{value:"\u5728\u4e00\u4e2a\u8fc1\u79fb\u4e2d\u7ed3\u5408\u591a\u4e2a\u6a21\u5f0f\u66f4\u6539",id:"\u5728\u4e00\u4e2a\u8fc1\u79fb\u4e2d\u7ed3\u5408\u591a\u4e2a\u6a21\u5f0f\u66f4\u6539",level:2},{value:"\u539f\u751f SQL",id:"\u539f\u751f-sql",level:3},{value:"\u539f\u5b50\u8fc1\u79fb",id:"\u539f\u5b50\u8fc1\u79fb",level:2},{value:"\u9996\u5148\u662f\u6a21\u5f0f\u8fd8\u662f\u5b9e\u4f53\uff1f",id:"\u9996\u5148\u662f\u6a21\u5f0f\u8fd8\u662f\u5b9e\u4f53",level:2}],s={toc:m},p="wrapper";function u(e){let{components:n,...a}=e;return(0,r.yg)(p,(0,t.A)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u7f16\u5199\u8fc1\u79fb"},"\u7f16\u5199\u8fc1\u79fb"),(0,r.yg)("p",null,"\u6bcf\u4e2a\u8fc1\u79fb\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1a",(0,r.yg)("inlineCode",{parentName:"p"},"up")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"down"),"\u3002",(0,r.yg)("inlineCode",{parentName:"p"},"up")," \u65b9\u6cd5\u7528\u4e8e\u66f4\u6539\u6570\u636e\u5e93\u6a21\u5f0f\uff0c\u4f8b\u5982\u6dfb\u52a0\u65b0\u8868\u3001\u5217\u6216\u7d22\u5f15\uff0c\u800c ",(0,r.yg)("inlineCode",{parentName:"p"},"down")," \u65b9\u6cd5\u5219\u64a4\u9500 ",(0,r.yg)("inlineCode",{parentName:"p"},"up")," \u65b9\u6cd5\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u3002"),(0,r.yg)("h2",{id:"\u521b\u5efa\u8fc1\u79fb"},"\u521b\u5efa\u8fc1\u79fb"),(0,r.yg)("p",null,"\u901a\u8fc7\u6267\u884c ",(0,r.yg)("inlineCode",{parentName:"p"},"sea-orm-cli migrate generate")," \u547d\u4ee4\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u8fc1\u79fb\u6587\u4ef6\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"sea-orm-cli migrate generate NAME_OF_MIGRATION [--local-time]\n\n# \u4f8b\u5982\uff0c\u751f\u6210 `migration/src/m20220101_000001_create_table.rs` \u6587\u4ef6\nsea-orm-cli migrate generate create_table\n")),(0,r.yg)("p",null,"\u6216\u8005\u4f60\u53ef\u4ee5\u4f7f\u7528\u4e0b\u9762\u7684\u6a21\u677f\u521b\u5efa\u4e00\u4e2a\u8fc1\u79fb\u6587\u4ef6\u3002\u6839\u636e\u547d\u540d\u7ea6\u5b9a\u5c06\u6587\u4ef6\u547d\u540d\u4e3a ",(0,r.yg)("inlineCode",{parentName:"p"},"mYYYYMMDD_HHMMSS_migration_name.rs"),"\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="migration/src/m20220101_000001_create_table.rs"',title:'"migration/src/m20220101_000001_create_table.rs"'},"use sea_orm_migration::prelude::*;\n\n#[derive(DeriveMigrationName)]\npub struct Migration;\n\n#[async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table( ... )\n            .await\n    }\n\n    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .drop_table( ... )\n            .await\n    }\n}\n")),(0,r.yg)("p",null,"\u6b64\u5916\uff0c\u4f60\u8fd8\u5fc5\u987b\u5728 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm-migration/*/sea_orm_migration/migrator/trait.MigratorTrait.html#tymethod.migrations"},(0,r.yg)("inlineCode",{parentName:"a"},"MigratorTrait::migrations"))," \u65b9\u6cd5\u4e2d\u5305\u542b\u65b0\u7684\u8fc1\u79fb\u3002\u8bf7\u6ce8\u610f\uff0c\u8fc1\u79fb\u5e94\u6309\u65f6\u95f4\u987a\u5e8f\u6392\u5e8f\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="migration/src/lib.rs"',title:'"migration/src/lib.rs"'},"pub use sea_orm_migration::*;\n\nmod m20220101_000001_create_table;\n\npub struct Migrator;\n\n#[async_trait]\nimpl MigratorTrait for Migrator {\n    fn migrations() -> Vec<Box<dyn MigrationTrait>> {\n        vec![\n            Box::new(m20220101_000001_create_table::Migration),\n        ]\n    }\n}\n")),(0,r.yg)("h2",{id:"\u5b9a\u4e49\u8fc1\u79fb"},"\u5b9a\u4e49\u8fc1\u79fb"),(0,r.yg)("p",null,"\u8bf7\u53c2\u9605 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm-migration/*/sea_orm_migration/manager/struct.SchemaManager.html"},(0,r.yg)("inlineCode",{parentName:"a"},"SchemaManager"))," \u4e86\u89e3 API \u53c2\u8003\u3002"),(0,r.yg)("h3",{id:"seaquery"},"SeaQuery"),(0,r.yg)("p",null,"\u70b9\u51fb ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-query#table-create"},"\u8fd9\u91cc")," \u5feb\u901f\u4e86\u89e3 SeaQuery \u7684 DDL \u8bed\u53e5\u3002"),(0,r.yg)("p",null,"\u4f60\u9700\u8981 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-query#iden"},(0,r.yg)("inlineCode",{parentName:"a"},"sea_query::Iden"))," \u6765\u5b9a\u4e49\u5c06\u5728\u8fc1\u79fb\u4e2d\u4f7f\u7528\u7684\u6807\u8bc6\u7b26\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(Iden)]\nenum Post {\n    Table,\n    Id,\n    Title,\n    #[iden = "text"] // \u91cd\u547d\u540d\u6807\u8bc6\u7b26\n    Text,\n    Category,\n}\n\nassert_eq!(Post::Table.to_string(), "post");\nassert_eq!(Post::Id.to_string(), "id");\nassert_eq!(Post::Title.to_string(), "title");\nassert_eq!(Post::Text.to_string(), "text");\n')),(0,r.yg)("h4",{id:"\u6a21\u5f0f\u521b\u5efa\u65b9\u6cd5"},"\u6a21\u5f0f\u521b\u5efa\u65b9\u6cd5"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u521b\u5efa\u8868"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{EnumIter, Iterable};\n\n#[derive(Iden)]\nenum Post {\n    Table,\n    Id,\n    Title,\n    #[iden = "text"] // \u91cd\u547d\u540d\u6807\u8bc6\u7b26\n    Text,\n    Category,\n}\n\n#[derive(Iden, EnumIter)]\npub enum Category {\n    Table,\n    #[iden = "Feed"]\n    Feed,\n    #[iden = "Story"]\n    Story,\n}\n\nmanager\n    .create_table(\n        Table::create()\n            .table(Post::Table)\n            .if_not_exists()\n            .col(\n                ColumnDef::new(Post::Id)\n                    .integer()\n                    .not_null()\n                    .auto_increment()\n                    .primary_key(),\n            )\n            .col(ColumnDef::new(Post::Title).string().not_null())\n            .col(ColumnDef::new(Post::Text).string().not_null())\n            .col(\n                // \u679a\u4e3e\u7c7b\u578b\u5fc5\u987b\u5148\u521b\u5efa\uff0c\u89c1\u4e0b\u9762\u793a\u4f8b\n                ColumnDef::new(Post::Category)\n                    .enumeration(Category::Table, [Category::Feed, Category::Story]),\n                    // \u6216\u8005\u50cf\u8fd9\u6837\u5199\u3002\n                    // \u6ce8\u610f\u4e3a\u4e86\u8ba9\u5b83\u5de5\u4f5c\uff0c\n                    // 1. \u4f60\u9700\u8981\u6d3e\u751f `EnumIter`\uff0c\n                    // 2. \u5c06 `Iterable` \u5f15\u5165\u4f5c\u7528\u57df\n                    // 3. \u786e\u4fdd `Category::Table` \u662f\u7b2c\u4e00\u4e2a\u53d8\u4f53\n                    .enumeration(Category::Table, Category::iter().skip(1)),\n            )\n            .to_owned(),\n    )\n    .await\n'))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u521b\u5efa\u7d22\u5f15"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.create_index(sea_query::Index::create()..)\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u521b\u5efa\u5916\u952e"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.create_foreign_key(sea_query::ForeignKey::create()..)\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u521b\u5efa\u6570\u636e\u7c7b\u578b\uff08\u4ec5\u9002\u7528\u4e8e PostgreSQL\uff09"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{EnumIter, Iterable};\n\n#[derive(Iden, EnumIter)]\npub enum Category {\n    Table,\n    #[iden = "Feed"]\n    Feed,\n    #[iden = "Story"]\n    Story,\n}\n\nmanager\n    .create_type(\n        Type::create()\n            .as_enum(Category::Table)\n            .values([Category::Feed, Category::Story])\n            // \u6216\u8005\u50cf\u8fd9\u6837\u5199\u3002\n            // \u6ce8\u610f\u4e3a\u4e86\u8ba9\u5b83\u5de5\u4f5c\uff0c\n            // 1. \u4f60\u9700\u8981\u6d3e\u751f `EnumIter`\uff0c\n            // 2. \u5c06 `Iterable` \u5f15\u5165\u4f5c\u7528\u57df\n            // 3. \u786e\u4fdd `Category::Table` \u662f\u7b2c\u4e00\u4e2a\u53d8\u4f53\n            .values(Category::iter().skip(1))\n            .to_owned(),\n    )\n    .await?;\n')))),(0,r.yg)("h4",{id:"\u6a21\u5f0f\u4fee\u6539\u65b9\u6cd5"},"\u6a21\u5f0f\u4fee\u6539\u65b9\u6cd5"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5220\u9664\u8868"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"use entity::post;\n\nmanager.drop_table(sea_query::Table::drop()..)\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u4fee\u6539\u8868"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.alter_table(sea_query::Table::alter()..)\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u91cd\u547d\u540d\u8868"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.rename_table(sea_query::Table::rename()..)\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u6e05\u7a7a\u8868"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.truncate_table(sea_query::Table::truncate()..)\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5220\u9664\u7d22\u5f15"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.drop_index(sea_query::Index::drop()..)\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5220\u9664\u5916\u952e"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.drop_foreign_key(sea_query::ForeignKey::drop()..)\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u4fee\u6539\u6570\u636e\u7c7b\u578b\uff08\u4ec5\u9002\u7528\u4e8e PostgreSQL\uff09"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.alter_type(sea_query::Type::alter()..)\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"\u5220\u9664\u6570\u636e\u7c7b\u578b\uff08\u4ec5\u9002\u7528\u4e8e PostgreSQL\uff09"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.drop_type(sea_query::extension::postgres::Type()..)\n")))),(0,r.yg)("h4",{id:"\u6a21\u5f0f\u68c0\u67e5\u65b9\u6cd5"},"\u6a21\u5f0f\u68c0\u67e5\u65b9\u6cd5"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u662f\u5426\u5b58\u5728\u8868",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.has_table(table_name)\n"))),(0,r.yg)("li",{parentName:"ul"},"\u662f\u5426\u5b58\u5728\u5217",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"manager.has_column(table_name, column_name)\n")))),(0,r.yg)("h2",{id:"\u5728\u4e00\u4e2a\u8fc1\u79fb\u4e2d\u7ed3\u5408\u591a\u4e2a\u6a21\u5f0f\u66f4\u6539"},"\u5728\u4e00\u4e2a\u8fc1\u79fb\u4e2d\u7ed3\u5408\u591a\u4e2a\u6a21\u5f0f\u66f4\u6539"),(0,r.yg)("p",null,"\u4f60\u53ef\u4ee5\u5728 ",(0,r.yg)("inlineCode",{parentName:"p"},"up")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"down")," \u8fc1\u79fb\u51fd\u6570\u4e2d\u7ed3\u5408\u591a\u4e2a\u66f4\u6539\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u793a\u4f8b\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n\n    manager\n        .create_table(\n            sea_query::Table::create()\n                .table(Post::Table)\n                .if_not_exists()\n                .col(\n                    ColumnDef::new(Post::Id)\n                        .integer()\n                        .not_null()\n                        .auto_increment()\n                        .primary_key()\n                )\n                .col(ColumnDef::new(Post::Title).string().not_null())\n                .col(ColumnDef::new(Post::Text).string().not_null())\n                .to_owned()\n        )\n        .await?;\n    \n    manager\n        .create_index(\n            Index::create()\n                .if_not_exists()\n                .name("idx-post_title")\n                .table(Post::Table)\n                .col(Post::Title)                        \n                .to_owned(),\n        )\n        .await?;\n    \n    Ok(()) // \u4e00\u5207\u6b63\u5e38\uff01\n}\n')),(0,r.yg)("p",null,"\u8fd9\u91cc\u662f\u5339\u914d\u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"down")," \u51fd\u6570\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n    \n    manager.drop_index(Index::drop().name("idx-post-title").to_owned())\n    .await?;\n    \n    manager.drop_table(Table::drop().table(Post::Table).to_owned())\n    .await?;\n\n    Ok(()) // \u4e00\u5207\u6b63\u5e38\uff01\n}\n')),(0,r.yg)("h3",{id:"\u539f\u751f-sql"},"\u539f\u751f SQL"),(0,r.yg)("p",null,"\u4f60\u53ef\u4ee5\u7528\u539f\u751f SQL \u7f16\u5199\u8fc1\u79fb\u6587\u4ef6\uff0c\u4f46\u8fd9\u6837\u4f1a\u5931\u53bb SeaQuery \u63d0\u4f9b\u7684\u591a\u540e\u7aef\u517c\u5bb9\u6027\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="migration/src/m20220101_000001_create_table.rs"',title:'"migration/src/m20220101_000001_create_table.rs"'},'use sea_orm::Statement;\nuse sea_orm_migration::prelude::*;\n\n#[derive(DeriveMigrationName)]\npub struct Migration;\n\n#[async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let db = manager.get_connection();\n\n        // \u5982\u679c SQL \u8bed\u53e5\u6ca1\u6709\u503c\u7ed1\u5b9a\uff0c\u4f7f\u7528 `execute_unprepared`\n        db.execute_unprepared(\n            "CREATE TABLE `cake` (\n                `id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,\n                `name` varchar(255) NOT NULL\n            )"\n        )\n        .await?;\n\n        // \u5982\u679c SQL \u5305\u542b\u503c\u7ed1\u5b9a\uff0c\u6784\u5efa\u4e00\u4e2a `Statement`\n        let stmt = Statement::from_sql_and_values(\n            manager.get_database_backend(),\n            r#"INSERT INTO `cake` (`name`) VALUES (?)"#,\n            ["Cheese Cake".into()]\n        );\n        db.execute(stmt).await?;\n\n        Ok(())\n    }\n\n    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .get_connection()\n            .execute_unprepared("DROP TABLE `cake`")\n            .await?;\n\n        Ok(())\n    }\n}\n')),(0,r.yg)("h2",{id:"\u539f\u5b50\u8fc1\u79fb"},"\u539f\u5b50\u8fc1\u79fb"),(0,r.yg)("p",null,"\u5728 PostgreSQL \u4e2d\uff0c\u8fc1\u79fb\u5c06\u539f\u5b50\u6267\u884c\uff0c\u8fd9\u610f\u5473\u7740\u8fc1\u79fb\u811a\u672c\u5c06\u5728\u4e8b\u52a1\u5185\u90e8\u6267\u884c\u3002\u5982\u679c\u8fc1\u79fb\u5931\u8d25\uff0c\u5bf9\u6570\u636e\u5e93\u6240\u505a\u7684\u66f4\u6539\u5c06\u88ab\u56de\u6eda\u3002\u7136\u800c\uff0cMySQL \u548c SQLite \u4e0d\u652f\u6301\u539f\u5b50\u8fc1\u79fb\u3002"),(0,r.yg)("p",null,"\u4f60\u53ef\u4ee5\u5728\u6bcf\u4e2a\u8fc1\u79fb\u5185\u542f\u52a8\u4e00\u4e2a\u4e8b\u52a1\uff0c\u4ee5\u6267\u884c\u5982 ",(0,r.yg)("a",{parentName:"p",href:"/SeaORM/docs/0.11.x/migration/seeding-data#seeding-data-transactionally"},"\u4e3a\u65b0\u521b\u5efa\u7684\u8868\u586b\u5145\u793a\u4f8b\u6570\u636e")," \u7684\u64cd\u4f5c\u3002"),(0,r.yg)("h2",{id:"\u9996\u5148\u662f\u6a21\u5f0f\u8fd8\u662f\u5b9e\u4f53"},"\u9996\u5148\u662f\u6a21\u5f0f\u8fd8\u662f\u5b9e\u4f53\uff1f"),(0,r.yg)("p",null,"\u5728\u6574\u4f53\u4e0a\uff0c\u6211\u4eec\u63a8\u8350\u9996\u5148\u91c7\u7528\u6a21\u5f0f\u4f18\u5148\u7684\u65b9\u6cd5\uff1a\u4f60\u9996\u5148\u7f16\u5199\u8fc1\u79fb\uff0c\u7136\u540e\u4ece\u5b9e\u65f6\u6570\u636e\u5e93\u751f\u6210\u5b9e\u4f53\u3002"),(0,r.yg)("p",null,"\u6709\u65f6\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"/SeaORM/docs/0.11.x/schema-statement/create-table"},(0,r.yg)("inlineCode",{parentName:"a"},"create_*_from_entity"))," \u65b9\u6cd5\uff0c\u901a\u8fc7\u591a\u4e2a\u624b\u5de5\u7f16\u5199\u7684\u5b9e\u4f53\u6587\u4ef6\u5f15\u5bfc\u4f60\u7684\u6570\u636e\u5e93\u3002"),(0,r.yg)("p",null,"\u5982\u679c\u4f60\u6253\u7b97\u6c38\u8fdc\u4e0d\u66f4\u6539\u5b9e\u4f53\u6a21\u5f0f\uff0c\u8fd9\u5b8c\u5168\u6ca1\u95ee\u9898\u3002\u6216\u8005\uff0c\u4f60\u53ef\u4ee5\u4fdd\u7559\u539f\u59cb\u5b9e\u4f53\uff0c\u5e76\u5728\u8fc1\u79fb\u6587\u4ef6\u4e2d\u5d4c\u5165\u4e00\u4efd\u526f\u672c\u3002"))}u.isMDXComponent=!0}}]);