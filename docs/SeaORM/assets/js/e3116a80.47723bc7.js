"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[11454],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>g});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(t),d=a,g=p["".concat(c,".").concat(d)]||p[d]||m[d]||i;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5279:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(58168),a=(t(96540),t(15680));const i={},o="\u586b\u5145\u6570\u636e",s={unversionedId:"migration/seeding-data",id:"version-0.9.x/migration/seeding-data",title:"\u586b\u5145\u6570\u636e",description:"\u60a8\u53ef\u4ee5\u4ece SchemaManager \u83b7\u53d6 DbConn \u5e76\u6839\u636e\u9700\u8981\u6267\u884c\u6570\u636e\u64cd\u4f5c\uff0c\u4f8b\u5982\u586b\u5145\u6570\u636e\u3002",source:"@site/versioned_docs/version-0.9.x/03-migration/04-seeding-data.md",sourceDirName:"03-migration",slug:"/migration/seeding-data",permalink:"/SeaORM/docs/0.9.x/migration/seeding-data",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.9.x/03-migration/04-seeding-data.md",tags:[],version:"0.9.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1663917639,formattedLastUpdatedAt:"Sep 23, 2022",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u8fd0\u884c\u8fc1\u79fb",permalink:"/SeaORM/docs/0.9.x/migration/running-migration"},next:{title:"\u4f7f\u7528 sea-orm-cli",permalink:"/SeaORM/docs/0.9.x/generate-entity/sea-orm-cli"}},c={},l=[],u={toc:l},p="wrapper";function m(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u586b\u5145\u6570\u636e"},"\u586b\u5145\u6570\u636e"),(0,a.yg)("p",null,"\u60a8\u53ef\u4ee5\u4ece ",(0,a.yg)("inlineCode",{parentName:"p"},"SchemaManager")," \u83b7\u53d6 ",(0,a.yg)("inlineCode",{parentName:"p"},"DbConn")," \u5e76\u6839\u636e\u9700\u8981\u6267\u884c\u6570\u636e\u64cd\u4f5c\uff0c\u4f8b\u5982\u586b\u5145\u6570\u636e\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm_migration::sea_orm::{entity::*, query::*};\n\n// ...\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let db = manager.get_connection();\n\n        cake::ActiveModel {\n            name: Set("Cheesecake".to_owned()), // \u8bbe\u7f6e\u86cb\u7cd5\u540d\u79f0\u4e3a "Cheesecake"\n            ..Default::default()\n        }\n        .insert(db)\n        .await?;\n\n        Ok(())\n    }\n}\n')),(0,a.yg)("p",null,"\u60a8\u4e5f\u53ef\u4ee5\u7f16\u5199 SeaQuery \u8bed\u53e5\u6765\u586b\u5145\u8868\u683c\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm_migration::sea_orm::{entity::*, query::*};\n\n// ...\n\n#[async_trait::async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let insert = Query::insert()\n            .into_table(Cake::Table) // \u63d2\u5165\u5230 Cake \u8868\n            .columns([Cake::Name]) // \u6307\u5b9a\u63d2\u5165\u7684\u5217\n            .values_panic(["Tiramisu".into()]) // \u8bbe\u7f6e\u503c\u4e3a "Tiramisu"\n            .to_owned();\n\n        manager.exec_stmt(insert).await?;\n\n        Ok(())\n    }\n}\n\n/// \u4e86\u89e3\u66f4\u591a\u4fe1\u606f\uff0c\u8bf7\u8bbf\u95ee https://docs.rs/sea-query#iden\n#[derive(Iden)]\npub enum Cake {\n    Table, // \u8868\u540d\n    Id,    // ID\n    Name,  // \u540d\u79f0\n}\n')))}m.isMDXComponent=!0}}]);