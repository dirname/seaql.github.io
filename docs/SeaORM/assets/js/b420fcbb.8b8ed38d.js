"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[8810],{15680:(e,r,n)=>{n.d(r,{xA:()=>y,yg:()=>g});var t=n(96540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),p=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},y=function(e){var r=p(e.components);return t.createElement(s.Provider,{value:r},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,y=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return n?t.createElement(g,i(i({ref:r},y),{},{components:n})):t.createElement(g,i({ref:r},y))}));function g(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},56626:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=n(58168),a=(n(96540),n(15680));const o={},i="Newtype",l={unversionedId:"generate-entity/newtype",id:"version-0.10.x/generate-entity/newtype",title:"Newtype",description:"\u60a8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7c7b\u578b\u5e76\u5c06\u5176\u7528\u4f5c\u6a21\u578b\u5b57\u6bb5\u3002\u4ee5\u4e0b\u7279\u6027\u5fc5\u987b\u5b9e\u73b0\u3002",source:"@site/versioned_docs/version-0.10.x/04-generate-entity/05-newtype.md",sourceDirName:"04-generate-entity",slug:"/generate-entity/newtype",permalink:"/SeaORM/docs/0.10.x/generate-entity/newtype",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.10.x/04-generate-entity/05-newtype.md",tags:[],version:"0.10.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1681449882,formattedLastUpdatedAt:"Apr 14, 2023",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u679a\u4e3e",permalink:"/SeaORM/docs/0.10.x/generate-entity/enumeration"},next:{title:"\u9009\u62e9",permalink:"/SeaORM/docs/0.10.x/basic-crud/select"}},s={},p=[],y={toc:p},u="wrapper";function c(e){let{components:r,...n}=e;return(0,a.yg)(u,(0,t.A)({},y,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"newtype"},"Newtype"),(0,a.yg)("p",null,"\u60a8\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7c7b\u578b\u5e76\u5c06\u5176\u7528\u4f5c\u6a21\u578b\u5b57\u6bb5\u3002\u4ee5\u4e0b\u7279\u6027\u5fc5\u987b\u5b9e\u73b0\u3002"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"\u4e3a ",(0,a.yg)("a",{parentName:"li",href:"https://docs.rs/sea-query/0.27/sea_query/value/enum.Value.html"},(0,a.yg)("inlineCode",{parentName:"a"},"sea_query::Value"))," \u5b9e\u73b0 ",(0,a.yg)("inlineCode",{parentName:"li"},"From<newtype>")),(0,a.yg)("li",{parentName:"ol"},"\u4e3a ",(0,a.yg)("inlineCode",{parentName:"li"},"newtype")," \u5b9e\u73b0 ",(0,a.yg)("a",{parentName:"li",href:"https://docs.rs/sea-orm/0.10/sea_orm/trait.TryGetable.html"},(0,a.yg)("inlineCode",{parentName:"a"},"sea_orm::TryGetable"))),(0,a.yg)("li",{parentName:"ol"},"\u4e3a ",(0,a.yg)("inlineCode",{parentName:"li"},"newtype")," \u5b9e\u73b0 ",(0,a.yg)("a",{parentName:"li",href:"https://docs.rs/sea-query/0.27/sea_query/value/trait.ValueType.html"},(0,a.yg)("inlineCode",{parentName:"a"},"sea_query::ValueType"))),(0,a.yg)("li",{parentName:"ol"},"\u4e3a ",(0,a.yg)("inlineCode",{parentName:"li"},"newtype")," \u5b9e\u73b0 ",(0,a.yg)("a",{parentName:"li",href:"https://docs.rs/sea-query/0.27/sea_query/value/trait.Nullable.html"},(0,a.yg)("inlineCode",{parentName:"a"},"sea_query::Nullable")))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::entity::prelude::*;\nuse sea_orm::{TryGetError, TryGetable};\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "json_vec")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub str_vec: Option<StringVec>,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}\n\n#[derive(Clone, Debug, PartialEq, Eq)]\npub struct StringVec(pub Vec<String>);\n\nimpl From<StringVec> for Value {\n    fn from(source: StringVec) -> Self {\n        Value::String(serde_json::to_string(&source).ok().map(Box::new)) // \u5c06 StringVec \u8f6c\u6362\u4e3a Value\n    }\n}\n\nimpl sea_orm::TryGetable for StringVec {\n    fn try_get(res: &QueryResult, pre: &str, col: &str) -> Result<Self, TryGetError> {\n        let json_str: String = res.try_get(pre, col).map_err(TryGetError::DbErr)?; // \u5c1d\u8bd5\u4ece\u67e5\u8be2\u7ed3\u679c\u83b7\u53d6\u503c\n        serde_json::from_str(&json_str).map_err(|e| TryGetError::DbErr(DbErr::Json(e.to_string()))) // \u5c06 JSON \u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a StringVec\n    }\n}\n\nimpl sea_query::ValueType for StringVec {\n    fn try_from(v: Value) -> Result<Self, sea_query::ValueTypeErr> {\n        match v {\n            Value::String(Some(x)) => Ok(StringVec(\n                serde_json::from_str(&x).map_err(|_| sea_query::ValueTypeErr)?, // \u5c1d\u8bd5\u5c06\u5b57\u7b26\u4e32\u89e3\u6790\u4e3a StringVec\n            )),\n            _ => Err(sea_query::ValueTypeErr), // \u8fd4\u56de\u9519\u8bef\n        }\n    }\n\n    fn type_name() -> String {\n        stringify!(StringVec).to_owned() // \u8fd4\u56de\u7c7b\u578b\u540d\u79f0\n    }\n\n    fn array_type() -> sea_orm::sea_query::ArrayType {\n        sea_orm::sea_query::ArrayType::String // \u6570\u7ec4\u7c7b\u578b\u4e3a\u5b57\u7b26\u4e32\n    }\n\n    fn column_type() -> sea_query::ColumnType {\n        sea_query::ColumnType::String(None) // \u5217\u7c7b\u578b\u4e3a\u5b57\u7b26\u4e32\n    }\n}\n\nimpl sea_query::Nullable for StringVec {\n    fn null() -> Value {\n        Value::String(None) // \u8fd4\u56de\u7a7a\u503c\n    }\n}\n')))}c.isMDXComponent=!0}}]);