"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[4417],{15680:(e,a,n)=>{n.d(a,{xA:()=>s,yg:()=>y});var r=n(96540);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var g=r.createContext({}),m=function(e){var a=r.useContext(g),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},s=function(e){var a=m(e.components);return r.createElement(g.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},c=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,l=e.originalType,g=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=m(n),c=t,y=p["".concat(g,".").concat(c)]||p[c]||u[c]||l;return n?r.createElement(y,i(i({ref:a},s),{},{components:n})):r.createElement(y,i({ref:a},s))}));function y(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var g in a)hasOwnProperty.call(a,g)&&(o[g]=a[g]);o.originalType=e,o[p]="string"==typeof e?e:t,i[1]=o;for(var m=2;m<l;m++)i[m]=n[m];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6258:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>g,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>m});var r=n(58168),t=(n(96540),n(15680));const l={},i="\u7f16\u5199\u8fc1\u79fb",o={unversionedId:"migration/writing-migration",id:"version-1.0.x/migration/writing-migration",title:"\u7f16\u5199\u8fc1\u79fb",description:"\u6bcf\u4e2a\u8fc1\u79fb\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1aup \u548c down\u3002up \u65b9\u6cd5\u7528\u4e8e\u66f4\u6539\u6570\u636e\u5e93\u6a21\u5f0f\uff0c\u4f8b\u5982\u6dfb\u52a0\u65b0\u8868\u3001\u5217\u6216\u7d22\u5f15\uff0c\u800c down \u65b9\u6cd5\u5219\u64a4\u9500\u5728 up \u65b9\u6cd5\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u3002",source:"@site/versioned_docs/version-1.0.x/03-migration/02-writing-migration.md",sourceDirName:"03-migration",slug:"/migration/writing-migration",permalink:"/SeaORM/docs/migration/writing-migration",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-1.0.x/03-migration/02-writing-migration.md",tags:[],version:"1.0.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1722833108,formattedLastUpdatedAt:"Aug 5, 2024",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u8bbe\u7f6e\u8fc1\u79fb",permalink:"/SeaORM/docs/migration/setting-up-migration"},next:{title:"\u6267\u884c\u8fc1\u79fb",permalink:"/SeaORM/docs/migration/running-migration"}},g={},m=[{value:"\u521b\u5efa\u8fc1\u79fb",id:"\u521b\u5efa\u8fc1\u79fb",level:2},{value:"\u5b9a\u4e49\u8fc1\u79fb",id:"\u5b9a\u4e49\u8fc1\u79fb",level:2},{value:"\u4f7f\u7528 SeaQuery",id:"\u4f7f\u7528-seaquery",level:3},{value:"\u6a21\u5f0f\u521b\u5efa\u65b9\u6cd5",id:"\u6a21\u5f0f\u521b\u5efa\u65b9\u6cd5",level:4},{value:"\u6a21\u5f0f\u53d8\u66f4\u65b9\u6cd5",id:"\u6a21\u5f0f\u53d8\u66f4\u65b9\u6cd5",level:4},{value:"\u6a21\u5f0f\u68c0\u67e5\u65b9\u6cd5",id:"\u6a21\u5f0f\u68c0\u67e5\u65b9\u6cd5",level:4},{value:"\u4f7f\u7528\u539f\u59cb SQL",id:"\u4f7f\u7528\u539f\u59cb-sql",level:3},{value:"\u63d0\u793a 1\uff1a\u5728\u4e00\u4e2a\u8fc1\u79fb\u4e2d\u7ec4\u5408\u591a\u4e2a\u6a21\u5f0f\u66f4\u6539",id:"\u63d0\u793a-1\u5728\u4e00\u4e2a\u8fc1\u79fb\u4e2d\u7ec4\u5408\u591a\u4e2a\u6a21\u5f0f\u66f4\u6539",level:2},{value:"\u63d0\u793a 2\uff1a<code>ADD COLUMN IF NOT EXISTS</code>",id:"\u63d0\u793a-2add-column-if-not-exists",level:2},{value:"\u63d0\u793a 3\uff1a\u4f7f\u7528\u5b9e\u4f53\u586b\u5145\u6570\u636e",id:"\u63d0\u793a-3\u4f7f\u7528\u5b9e\u4f53\u586b\u5145\u6570\u636e",level:2},{value:"\u539f\u5b50\u8fc1\u79fb",id:"\u539f\u5b50\u8fc1\u79fb",level:2},{value:"\u9996\u5148\u662f\u6a21\u5f0f\u8fd8\u662f\u9996\u5148\u662f\u5b9e\u4f53\uff1f",id:"\u9996\u5148\u662f\u6a21\u5f0f\u8fd8\u662f\u9996\u5148\u662f\u5b9e\u4f53",level:2}],s={toc:m},p="wrapper";function u(e){let{components:a,...n}=e;return(0,t.yg)(p,(0,r.A)({},s,n,{components:a,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"\u7f16\u5199\u8fc1\u79fb"},"\u7f16\u5199\u8fc1\u79fb"),(0,t.yg)("p",null,"\u6bcf\u4e2a\u8fc1\u79fb\u5305\u542b\u4e24\u4e2a\u65b9\u6cd5\uff1a",(0,t.yg)("inlineCode",{parentName:"p"},"up")," \u548c ",(0,t.yg)("inlineCode",{parentName:"p"},"down"),"\u3002",(0,t.yg)("inlineCode",{parentName:"p"},"up")," \u65b9\u6cd5\u7528\u4e8e\u66f4\u6539\u6570\u636e\u5e93\u6a21\u5f0f\uff0c\u4f8b\u5982\u6dfb\u52a0\u65b0\u8868\u3001\u5217\u6216\u7d22\u5f15\uff0c\u800c ",(0,t.yg)("inlineCode",{parentName:"p"},"down")," \u65b9\u6cd5\u5219\u64a4\u9500\u5728 ",(0,t.yg)("inlineCode",{parentName:"p"},"up")," \u65b9\u6cd5\u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u3002"),(0,t.yg)("p",null,"SeaORM \u8fc1\u79fb\u7cfb\u7edf\u5177\u6709\u4ee5\u4e0b\u4f18\u70b9\uff1a"),(0,t.yg)("ol",null,(0,t.yg)("li",{parentName:"ol"},"\u4f7f\u7528 SeaQuery \u6216 SQL \u7f16\u5199 DDL \u8bed\u53e5"),(0,t.yg)("li",{parentName:"ol"},"\u6267\u884c\u591a\u4e2a DDL\uff08\u5e26\u6761\u4ef6\uff09"),(0,t.yg)("li",{parentName:"ol"},"\u4f7f\u7528 SeaORM API \u586b\u5145\u6570\u636e")),(0,t.yg)("h2",{id:"\u521b\u5efa\u8fc1\u79fb"},"\u521b\u5efa\u8fc1\u79fb"),(0,t.yg)("p",null,"\u901a\u8fc7\u6267\u884c ",(0,t.yg)("inlineCode",{parentName:"p"},"sea-orm-cli migrate generate")," \u547d\u4ee4\u751f\u6210\u65b0\u7684\u8fc1\u79fb\u6587\u4ef6\u3002"),(0,t.yg)("p",null,"\u5982\u679c\u60a8\u5728\u6587\u4ef6\u540d\u4e2d\u4f7f\u7528\u7a7a\u683c\uff0c\u6587\u4ef6\u540d\u5c06\u81ea\u52a8\u6309\u7167\u7ea6\u5b9a\u8fdb\u884c\u8f6c\u6362\u3002"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-shell"},'sea-orm-cli migrate generate NAME_OF_MIGRATION [--local-time]\n\n# \u4f8b\u5982\uff0c\u751f\u6210 `migration/src/m20220101_000001_create_table.rs`\nsea-orm-cli migrate generate create_table\n\n# \u8fd9\u5c06\u521b\u5efa\u4e0e\u4e0a\u9762\u547d\u4ee4\u76f8\u540c\u7684\u8fc1\u79fb\u6587\u4ef6\nsea-orm-cli migrate generate "create table"\n')),(0,t.yg)("p",null,"\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u6a21\u677f\u521b\u5efa\u8fc1\u79fb\u6587\u4ef6\u3002\u6839\u636e\u547d\u540d\u7ea6\u5b9a\u5c06\u6587\u4ef6\u547d\u540d\u4e3a ",(0,t.yg)("inlineCode",{parentName:"p"},"mYYYYMMDD_HHMMSS_migration_name.rs"),"\u3002"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="migration/src/m20220101_000001_create_table.rs"',title:'"migration/src/m20220101_000001_create_table.rs"'},"use sea_orm_migration::prelude::*;\n\n#[derive(DeriveMigrationName)]\npub struct Migration;\n\n#[async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .create_table( ... )\n            .await\n    }\n\n    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .drop_table( ... )\n            .await\n    }\n}\n")),(0,t.yg)("p",null,"\u53e6\u5916\uff0c\u60a8\u5fc5\u987b\u5728 ",(0,t.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm-migration/*/sea_orm_migration/migrator/trait.MigratorTrait.html#tymethod.migrations"},(0,t.yg)("inlineCode",{parentName:"a"},"MigratorTrait::migrations"))," \u65b9\u6cd5\u4e2d\u5305\u542b\u65b0\u7684\u8fc1\u79fb\u3002\u8bf7\u6ce8\u610f\uff0c\u8fc1\u79fb\u5e94\u6309\u65f6\u95f4\u987a\u5e8f\u6392\u5e8f\u3002"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="migration/src/lib.rs"',title:'"migration/src/lib.rs"'},"pub use sea_orm_migration::*;\n\nmod m20220101_000001_create_table;\n\npub struct Migrator;\n\n#[async_trait]\nimpl MigratorTrait for Migrator {\n    fn migrations() -> Vec<Box<dyn MigrationTrait>> {\n        vec![\n            Box::new(m20220101_000001_create_table::Migration),\n        ]\n    }\n}\n")),(0,t.yg)("h2",{id:"\u5b9a\u4e49\u8fc1\u79fb"},"\u5b9a\u4e49\u8fc1\u79fb"),(0,t.yg)("p",null,"\u8bf7\u53c2\u89c1 ",(0,t.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm-migration/*/sea_orm_migration/manager/struct.SchemaManager.html"},(0,t.yg)("inlineCode",{parentName:"a"},"SchemaManager"))," \u83b7\u53d6 API \u53c2\u8003\u3002"),(0,t.yg)("h3",{id:"\u4f7f\u7528-seaquery"},"\u4f7f\u7528 SeaQuery"),(0,t.yg)("p",null,"\u70b9\u51fb ",(0,t.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-query#table-create"},"\u8fd9\u91cc")," \u5feb\u901f\u6d4f\u89c8 SeaQuery \u7684 DDL \u8bed\u53e5\u3002"),(0,t.yg)("p",null,"\u60a8\u53ef\u4ee5\u4f7f\u7528 ",(0,t.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/derive.DeriveIden.html"},(0,t.yg)("inlineCode",{parentName:"a"},"DeriveIden"))," \u5b8f\u6765\u5b9a\u4e49\u5c06\u7528\u4e8e\u8fc1\u79fb\u7684\u6807\u8bc6\u7b26\u3002"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(DeriveIden)]\nenum Post {\n    Table, // \u8fd9\u662f\u4e00\u4e2a\u7279\u6b8a\u60c5\u51b5\uff1b\u5c06\u6620\u5c04\u5230 `post`\n    Id,\n    Title,\n    #[sea_orm(iden = "full_text")] // \u91cd\u547d\u540d\u6807\u8bc6\u7b26\n    Text,\n}\n\nassert_eq!(Post::Table.to_string(), "post");\nassert_eq!(Post::Id.to_string(), "id");\nassert_eq!(Post::Title.to_string(), "title");\nassert_eq!(Post::Text.to_string(), "full_text");\n')),(0,t.yg)("p",null,"\u4ee5\u4e0b\u662f\u4e00\u4e9b\u60a8\u53ef\u80fd\u4f1a\u53d1\u73b0\u6709\u7528\u7684\u5e38\u89c1 DDL \u4ee3\u7801\u7247\u6bb5\u3002"),(0,t.yg)("h4",{id:"\u6a21\u5f0f\u521b\u5efa\u65b9\u6cd5"},"\u6a21\u5f0f\u521b\u5efa\u65b9\u6cd5"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u521b\u5efa\u8868"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{EnumIter, Iterable};\n\n#[derive(DeriveIden)]\nenum Post {\n    Table,\n    Id,\n    Title,\n    #[sea_orm(iden = "text")] // \u91cd\u547d\u540d\u6807\u8bc6\u7b26\n    Text,\n    Category,\n}\n\n#[derive(Iden, EnumIter)]\npub enum Category {\n    #[iden = "Feed"]\n    Feed,\n    #[iden = "Story"]\n    Story,\n}\n\n// \u8bb0\u5f97\u5c06 `sea_orm_migration::schema::*` schema \u5e2e\u52a9\u5668\u5bfc\u5165\u4f5c\u7528\u57df\nuse sea_orm_migration::{prelude::*, schema::*};\n\n// \u4f7f\u7528\u5e2e\u52a9\u5668\u5b9a\u4e49\u6a21\u5f0f\nmanager\n    .create_table(\n        Table::create()\n            .table(Post::Table)\n            .if_not_exists()\n            .col(pk_auto(Post::Id))\n            .col(string(Post::Title))\n            .col(string(Post::Text))\n            .col(enumeration_null(Post::Category, Alias::new("category"), Category::iter()))\n    )\n    .await\n\n// \u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u4e0d\u4f7f\u7528\u5e2e\u52a9\u5668\u5b9a\u4e49\u6a21\u5f0f\nmanager\n    .create_table(\n        Table::create()\n            .table(Post::Table)\n            .if_not_exists()\n            .col(\n                ColumnDef::new(Post::Id)\n                    .integer()\n                    .not_null()\n                    .auto_increment()\n                    .primary_key(),\n            )\n            .col(ColumnDef::new(Post::Title).string().not_null())\n            .col(ColumnDef::new(Post::Text).string().not_null())\n            .col(\n                ColumnDef::new(Post::Category)\n                    .enumeration(Alias::new("category"), Category::iter()),\n            )\n    )\n    .await\n'))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u521b\u5efa\u7d22\u5f15"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},"manager.create_index(sea_query::Index::create()..)\n"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u521b\u5efa\u5916\u952e"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},"manager.create_foreign_key(sea_query::ForeignKey::create()..)\n"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u521b\u5efa\u6570\u636e\u7c7b\u578b\uff08\u4ec5 PostgreSQL\uff09"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{EnumIter, Iterable};\n\n#[derive(DeriveIden)]\nstruct CategoryEnum;\n\n#[derive(DeriveIden, EnumIter)]\nenum CategoryVariants {\n    Feed,\n    #[sea_orm(iden = "story")]\n    Story,\n}\n\nmanager\n    .create_type(\n        Type::create()\n            .as_enum(CategoryEnum)\n            .values(CategoryVariants::iter())\n    )\n    .await?;\n')))),(0,t.yg)("h4",{id:"\u6a21\u5f0f\u53d8\u66f4\u65b9\u6cd5"},"\u6a21\u5f0f\u53d8\u66f4\u65b9\u6cd5"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u5220\u9664\u8868"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},"use entity::post;\n\nmanager.drop_table(sea_query::Table::drop()..)\n"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u4fee\u6539\u8868"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},"manager.alter_table(sea_query::Table::alter()..)\n"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u91cd\u547d\u540d\u8868"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},"manager.rename_table(sea_query::Table::rename()..)\n"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u6e05\u7a7a\u8868"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},"manager.truncate_table(sea_query::Table::truncate()..)\n"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u5220\u9664\u7d22\u5f15"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},"manager.drop_index(sea_query::Index::drop()..)\n"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u5220\u9664\u5916\u952e"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},"manager.drop_foreign_key(sea_query::ForeignKey::drop()..)\n"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u4fee\u6539\u6570\u636e\u7c7b\u578b\uff08\u4ec5 PostgreSQL\uff09"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},"manager.alter_type(sea_query::Type::alter()..)\n"))),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("p",{parentName:"li"},"\u5220\u9664\u6570\u636e\u7c7b\u578b\uff08\u4ec5 PostgreSQL\uff09"),(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},"manager.drop_type(sea_query::extension::postgres::Type()..)\n")))),(0,t.yg)("h4",{id:"\u6a21\u5f0f\u68c0\u67e5\u65b9\u6cd5"},"\u6a21\u5f0f\u68c0\u67e5\u65b9\u6cd5"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"\u662f\u5426\u5b58\u5728\u8868",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},'manager.has_table("table_name")\n'))),(0,t.yg)("li",{parentName:"ul"},"\u662f\u5426\u5b58\u5728\u5217",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},'manager.has_column("table_name", "column_name")\n'))),(0,t.yg)("li",{parentName:"ul"},"\u662f\u5426\u5b58\u5728\u7d22\u5f15",(0,t.yg)("pre",{parentName:"li"},(0,t.yg)("code",{parentName:"pre",className:"language-rust"},'manager.has_index("table_name", "index_name")\n')))),(0,t.yg)("h3",{id:"\u4f7f\u7528\u539f\u59cb-sql"},"\u4f7f\u7528\u539f\u59cb SQL"),(0,t.yg)("p",null,"\u60a8\u53ef\u4ee5\u4f7f\u7528\u539f\u59cb SQL \u7f16\u5199\u8fc1\u79fb\u6587\u4ef6\uff0c\u4f46\u8fd9\u6837\u4f1a\u5931\u53bb SeaQuery \u63d0\u4f9b\u7684\u591a\u540e\u7aef\u517c\u5bb9\u6027\u3002"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="migration/src/m20220101_000001_create_table.rs"',title:'"migration/src/m20220101_000001_create_table.rs"'},'use sea_orm::Statement;\nuse sea_orm_migration::prelude::*;\n\n#[derive(DeriveMigrationName)]\npub struct Migration;\n\n#[async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let db = manager.get_connection();\n\n        // \u5982\u679c SQL \u8bed\u53e5\u6ca1\u6709\u503c\u7ed1\u5b9a\uff0c\u8bf7\u4f7f\u7528 `execute_unprepared`\n        db.execute_unprepared(\n            "CREATE TABLE `cake` (\n                `id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,\n                `name` varchar(255) NOT NULL\n            )"\n        )\n        .await?;\n\n        // \u5982\u679c SQL \u5305\u542b\u503c\u7ed1\u5b9a\uff0c\u8bf7\u6784\u9020 `Statement`\n        let stmt = Statement::from_sql_and_values(\n            manager.get_database_backend(),\n            r#"INSERT INTO `cake` (`name`) VALUES (?)"#,\n            ["Cheese Cake".into()]\n        );\n        db.execute(stmt).await?;\n\n        Ok(())\n    }\n\n    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        manager\n            .get_connection()\n            .execute_unprepared("DROP TABLE `cake`")\n            .await?;\n\n        Ok(())\n    }\n}\n')),(0,t.yg)("h2",{id:"\u63d0\u793a-1\u5728\u4e00\u4e2a\u8fc1\u79fb\u4e2d\u7ec4\u5408\u591a\u4e2a\u6a21\u5f0f\u66f4\u6539"},"\u63d0\u793a 1\uff1a\u5728\u4e00\u4e2a\u8fc1\u79fb\u4e2d\u7ec4\u5408\u591a\u4e2a\u6a21\u5f0f\u66f4\u6539"),(0,t.yg)("p",null,"\u60a8\u53ef\u4ee5\u5728 ",(0,t.yg)("inlineCode",{parentName:"p"},"up")," \u548c ",(0,t.yg)("inlineCode",{parentName:"p"},"down")," \u8fc1\u79fb\u51fd\u6570\u4e2d\u7ec4\u5408\u591a\u4e2a\u66f4\u6539\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u793a\u4f8b\uff1a"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-rust"},'// \u8bb0\u5f97\u5c06 `sea_orm_migration::schema::*` schema \u5e2e\u52a9\u5668\u5bfc\u5165\u4f5c\u7528\u57df\nuse sea_orm_migration::{prelude::*, schema::*};\n\nasync fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n\n    manager\n        .create_table(\n            sea_query::Table::create()\n                .table(Post::Table)\n                .if_not_exists()\n                .col(pk_auto(Post::Id))\n                .col(string(Post::Title))\n                .col(string(Post::Text))\n        )\n        .await?;\n    \n    manager\n        .create_index(\n            Index::create()\n                .if_not_exists()\n                .name("idx-post_title")\n                .table(Post::Table)\n                .col(Post::Title)                        \n        )\n        .await?;\n    \n    Ok(()) // \u4e00\u5207\u6b63\u5e38\uff01\n}\n')),(0,t.yg)("p",null,"\u8fd9\u91cc\u662f\u5bf9\u5e94\u7684 ",(0,t.yg)("inlineCode",{parentName:"p"},"down")," \u51fd\u6570\uff1a"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-rust"},'async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n    \n    manager.drop_index(Index::drop().name("idx-post-title"))\n    .await?;\n    \n    manager.drop_table(Table::drop().table(Post::Table))\n    .await?;\n\n    Ok(()) // \u4e00\u5207\u6b63\u5e38\uff01\n}\n')),(0,t.yg)("h2",{id:"\u63d0\u793a-2add-column-if-not-exists"},"\u63d0\u793a 2\uff1a",(0,t.yg)("inlineCode",{parentName:"h2"},"ADD COLUMN IF NOT EXISTS")),(0,t.yg)("p",null,"\u7531\u4e8e\u8be5\u8bed\u6cd5\u5728 MySQL \u4e2d\u4e0d\u53ef\u7528\uff0c\u60a8\u53ef\u4ee5\uff1a"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-rust"},'async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n    if manager.has_column("my_table", "col_to_add").await? {\n        // ALTER TABLE `my_table` ADD COLUMN `col_to_add` ..\n    }\n\n    Ok(())\n}\n')),(0,t.yg)("h2",{id:"\u63d0\u793a-3\u4f7f\u7528\u5b9e\u4f53\u586b\u5145\u6570\u636e"},"\u63d0\u793a 3\uff1a\u4f7f\u7528\u5b9e\u4f53\u586b\u5145\u6570\u636e"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-rust"},'async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n    let db = manager.get_connection();\n\n    cake::ActiveModel {\n        name: Set("Cheesecake".to_owned()),\n        ..Default::default()\n    }\n    .insert(db)\n    .await?;\n\n    Ok(())\n}\n')),(0,t.yg)("p",null,(0,t.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/blob/master/examples/seaography_example/migration/src/m20230102_000001_seed_bakery_data.rs"},"\u5b8c\u6574\u793a\u4f8b"),"\u3002"),(0,t.yg)("h2",{id:"\u539f\u5b50\u8fc1\u79fb"},"\u539f\u5b50\u8fc1\u79fb"),(0,t.yg)("p",null,"\u8fc1\u79fb\u5c06\u5728 PostgreSQL \u4e2d\u4ee5\u539f\u5b50\u65b9\u5f0f\u6267\u884c\uff0c\u8fd9\u610f\u5473\u7740\u8fc1\u79fb\u811a\u672c\u5c06\u5728\u4e8b\u52a1\u5185\u6267\u884c\u3002\u5982\u679c\u8fc1\u79fb\u5931\u8d25\uff0c\u5bf9\u6570\u636e\u5e93\u6240\u505a\u7684\u66f4\u6539\u5c06\u88ab\u56de\u6eda\u3002\u7136\u800c\uff0cMySQL \u548c SQLite \u4e0d\u652f\u6301\u539f\u5b50\u8fc1\u79fb\u3002"),(0,t.yg)("p",null,"\u60a8\u53ef\u4ee5\u5728\u6bcf\u4e2a\u8fc1\u79fb\u4e2d\u542f\u52a8\u4e00\u4e2a\u4e8b\u52a1\uff0c\u4ee5\u6267\u884c\uff0c\u4f8b\u5982\u4e3a\u65b0\u521b\u5efa\u7684\u8868 ",(0,t.yg)("a",{parentName:"p",href:"/SeaORM/docs/migration/seeding-data#seeding-data-transactionally"},"\u586b\u5145\u793a\u4f8b\u6570\u636e")," \u7684\u64cd\u4f5c\u3002"),(0,t.yg)("h2",{id:"\u9996\u5148\u662f\u6a21\u5f0f\u8fd8\u662f\u9996\u5148\u662f\u5b9e\u4f53"},"\u9996\u5148\u662f\u6a21\u5f0f\u8fd8\u662f\u9996\u5148\u662f\u5b9e\u4f53\uff1f"),(0,t.yg)("p",null,"\u603b\u4f53\u800c\u8a00\uff0c\u6211\u4eec\u63a8\u8350\u91c7\u7528\u4ee5\u6a21\u5f0f\u4e3a\u5148\u7684\u65b9\u6cd5\uff1a\u9996\u5148\u7f16\u5199\u8fc1\u79fb\uff0c\u7136\u540e\u4ece\u5b9e\u65f6\u6570\u636e\u5e93\u751f\u6210\u5b9e\u4f53\u3002"),(0,t.yg)("p",null,"\u6709\u65f6\uff0c\u60a8\u53ef\u80fd\u5e0c\u671b\u4f7f\u7528 ",(0,t.yg)("a",{parentName:"p",href:"/SeaORM/docs/schema-statement/create-table"},(0,t.yg)("inlineCode",{parentName:"a"},"create_*_from_entity"))," \u65b9\u6cd5\u901a\u8fc7\u591a\u4e2a\u624b\u52a8\u7f16\u5199\u7684\u5b9e\u4f53\u6587\u4ef6\u542f\u52a8\u6570\u636e\u5e93\u3002"),(0,t.yg)("p",null,"\u5982\u679c\u60a8\u6253\u7b97\u4ece\u4e0d\u66f4\u6539\u5b9e\u4f53\u6a21\u5f0f\uff0c\u8fd9\u5b8c\u5168\u53ef\u4ee5\u3002\u5982\u679c\u60a8\u613f\u610f\uff0c\u53ef\u4ee5\u4fdd\u7559\u539f\u59cb\u5b9e\u4f53\u5e76\u5728\u8fc1\u79fb\u6587\u4ef6\u4e2d\u5d4c\u5165\u4e00\u4e2a\u526f\u672c\u3002"))}u.isMDXComponent=!0}}]);