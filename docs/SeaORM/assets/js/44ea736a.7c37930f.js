"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[70176],{15680:(e,t,n)=>{n.d(t,{xA:()=>s,yg:()=>m});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=u(n),f=a,m=c["".concat(p,".").concat(f)]||c[f]||y[f]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},13611:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var r=n(58168),a=(n(96540),n(15680));const o={},i="\u4e00\u5bf9\u591a",l={unversionedId:"relation/one-to-many",id:"version-0.4.x/relation/one-to-many",title:"\u4e00\u5bf9\u591a",description:"\u4e00\u5bf9\u591a\u5173\u7cfb\u7c7b\u4f3c\u4e8e\u4e00\u5bf9\u4e00\u5173\u7cfb\u3002\u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u4e3e\u4f8b\u8bf4\u660e\u4e86 \u201c\u4e00\u4e2a Cake \u5b9e\u4f53\u6700\u591a\u6709\u4e00\u4e2a Fruit \u914d\u6599\u201d\u3002\u5728\u4e00\u5bf9\u591a\u5173\u7cfb\u4e2d\uff0c\u6211\u4eec\u5c06 \u201c\u6700\u591a\u4e00\u4e2a\u201d \u7684\u9650\u5236\u66f4\u6539\u4e3a\u53ef\u4ee5\u6709\u591a\u4e2a\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u4e00\u4e2a Cake \u5b9e\u4f53\uff0c\u5b83\u53ef\u80fd\u6709\u591a\u4e2a Fruit \u914d\u6599\u3002",source:"@site/versioned_docs/version-0.4.x/06-relation/02-one-to-many.md",sourceDirName:"06-relation",slug:"/relation/one-to-many",permalink:"/SeaORM/docs/0.4.x/relation/one-to-many",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.4.x/06-relation/02-one-to-many.md",tags:[],version:"0.4.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1640968085,formattedLastUpdatedAt:"Dec 31, 2021",sidebarPosition:2,frontMatter:{},sidebar:"version-0.4.x/tutorialSidebar",previous:{title:"\u4e00\u5bf9\u4e00",permalink:"/SeaORM/docs/0.4.x/relation/one-to-one"},next:{title:"\u591a\u5bf9\u591a",permalink:"/SeaORM/docs/0.4.x/relation/many-to-many"}},p={},u=[{value:"\u5b9a\u4e49\u5173\u7cfb",id:"\u5b9a\u4e49\u5173\u7cfb",level:2},{value:"\u5b9a\u4e49\u9006\u5173\u7cfb",id:"\u5b9a\u4e49\u9006\u5173\u7cfb",level:2}],s={toc:u},c="wrapper";function y(e){let{components:t,...n}=e;return(0,a.yg)(c,(0,r.A)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u4e00\u5bf9\u591a"},"\u4e00\u5bf9\u591a"),(0,a.yg)("p",null,"\u4e00\u5bf9\u591a\u5173\u7cfb\u7c7b\u4f3c\u4e8e\u4e00\u5bf9\u4e00\u5173\u7cfb\u3002\u5728\u4e0a\u4e00\u8282\u4e2d\uff0c\u6211\u4eec\u4e3e\u4f8b\u8bf4\u660e\u4e86 \u201c\u4e00\u4e2a ",(0,a.yg)("inlineCode",{parentName:"p"},"Cake")," \u5b9e\u4f53\u6700\u591a\u6709\u4e00\u4e2a ",(0,a.yg)("inlineCode",{parentName:"p"},"Fruit")," \u914d\u6599\u201d\u3002\u5728\u4e00\u5bf9\u591a\u5173\u7cfb\u4e2d\uff0c\u6211\u4eec\u5c06 \u201c\u6700\u591a\u4e00\u4e2a\u201d \u7684\u9650\u5236\u66f4\u6539\u4e3a\u53ef\u4ee5\u6709\u591a\u4e2a\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u6709\u4e00\u4e2a ",(0,a.yg)("inlineCode",{parentName:"p"},"Cake")," \u5b9e\u4f53\uff0c\u5b83\u53ef\u80fd\u6709\u591a\u4e2a ",(0,a.yg)("inlineCode",{parentName:"p"},"Fruit")," \u914d\u6599\u3002"),(0,a.yg)("h2",{id:"\u5b9a\u4e49\u5173\u7cfb"},"\u5b9a\u4e49\u5173\u7cfb"),(0,a.yg)("p",null,"\u8fd9\u51e0\u4e4e\u4e0e\u5b9a\u4e49\u4e00\u5bf9\u4e00\u5173\u7cfb\u76f8\u540c\uff1b\u552f\u4e00\u7684\u533a\u522b\u662f\u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},"Entity::has_many()")," \u65b9\u6cd5\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust",metastring:'{2,8,13} title="entity/cake.rs"',"{2,8,13}":!0,title:'"entity/cake.rs"'},"pub enum Relation {\n    Fruit,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Fruit => Entity::has_many(super::fruit::Entity).into(),\n        }\n    }\n}\n\nimpl Related<super::fruit::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Fruit.def()\n    }\n}\n")),(0,a.yg)("h2",{id:"\u5b9a\u4e49\u9006\u5173\u7cfb"},"\u5b9a\u4e49\u9006\u5173\u7cfb"),(0,a.yg)("p",null,"\u8fd9\u4e0e\u5b9a\u4e49\u4e00\u5bf9\u4e00\u7684\u9006\u5173\u7cfb\u76f8\u540c\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="entity/fruit.rs"',title:'"entity/fruit.rs"'},"#[derive(Copy, Clone, Debug, EnumIter)]\npub enum Relation {\n    Cake,\n}\n\nimpl RelationTrait for Relation {\n    fn def(&self) -> RelationDef {\n        match self {\n            Self::Cake => Entity::belongs_to(super::cake::Entity)\n                .from(Column::CakeId)\n                .to(super::cake::Column::Id)\n                .into(),\n        }\n    }\n}\n\nimpl Related<super::cake::Entity> for Entity {\n    fn to() -> RelationDef {\n        Relation::Cake.def()\n    }\n}\n")))}y.isMDXComponent=!0}}]);