"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[48352],{15680:(e,r,n)=>{n.d(r,{xA:()=>y,yg:()=>g});var t=n(96540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function i(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=t.createContext({}),u=function(e){var r=t.useContext(s),n=r;return e&&(n="function"==typeof e?e(r):l(l({},r),e)),n},y=function(e){var r=u(e.components);return t.createElement(s.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},c=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,y=i(e,["components","mdxType","originalType","parentName"]),p=u(n),c=a,g=p["".concat(s,".").concat(c)]||p[c]||m[c]||o;return n?t.createElement(g,l(l({ref:r},y),{},{components:n})):t.createElement(g,l({ref:r},y))}));function g(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"},93687:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var t=n(58168),a=(n(96540),n(15680));const o={},l="\u65b0\u7c7b\u578b",i={unversionedId:"generate-entity/newtype",id:"generate-entity/newtype",title:"\u65b0\u7c7b\u578b",description:"\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7c7b\u578b (T) \u5e76\u5c06\u5176\u7528\u4f5c\u6a21\u578b\u5b57\u6bb5\u3002\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u7279\u6027\u3002",source:"@site/docs/04-generate-entity/05-newtype.md",sourceDirName:"04-generate-entity",slug:"/generate-entity/newtype",permalink:"/SeaORM/docs/next/generate-entity/newtype",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/04-generate-entity/05-newtype.md",tags:[],version:"current",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1690399695,formattedLastUpdatedAt:"Jul 26, 2023",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u679a\u4e3e",permalink:"/SeaORM/docs/next/generate-entity/enumeration"},next:{title:"\u57fa\u7840\u6a21\u5f0f",permalink:"/SeaORM/docs/next/basic-crud/basic-schema"}},s={},u=[],y={toc:u},p="wrapper";function m(e){let{components:r,...n}=e;return(0,a.yg)(p,(0,t.A)({},y,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u65b0\u7c7b\u578b"},"\u65b0\u7c7b\u578b"),(0,a.yg)("p",null,"\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u65b0\u7c7b\u578b (",(0,a.yg)("inlineCode",{parentName:"p"},"T"),") \u5e76\u5c06\u5176\u7528\u4f5c\u6a21\u578b\u5b57\u6bb5\u3002\u9700\u8981\u5b9e\u73b0\u4ee5\u4e0b\u7279\u6027\u3002"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},"\u4e3a ",(0,a.yg)("a",{parentName:"li",href:"https://docs.rs/sea-query/*/sea_query/value/enum.Value.html"},(0,a.yg)("inlineCode",{parentName:"a"},"sea_query::Value"))," \u5b9e\u73b0 ",(0,a.yg)("inlineCode",{parentName:"li"},"From<T>")),(0,a.yg)("li",{parentName:"ol"},"\u4e3a ",(0,a.yg)("inlineCode",{parentName:"li"},"T")," \u5b9e\u73b0 ",(0,a.yg)("a",{parentName:"li",href:"https://docs.rs/sea-orm/*/sea_orm/trait.TryGetable.html"},(0,a.yg)("inlineCode",{parentName:"a"},"sea_orm::TryGetable"))),(0,a.yg)("li",{parentName:"ol"},"\u4e3a ",(0,a.yg)("inlineCode",{parentName:"li"},"T")," \u5b9e\u73b0 ",(0,a.yg)("a",{parentName:"li",href:"https://docs.rs/sea-query/*/sea_query/value/trait.ValueType.html"},(0,a.yg)("inlineCode",{parentName:"a"},"sea_query::ValueType"))),(0,a.yg)("li",{parentName:"ol"},"\u5982\u679c\u5b57\u6bb5\u662f ",(0,a.yg)("inlineCode",{parentName:"li"},"Option<T>"),"\uff0c\u4e3a ",(0,a.yg)("inlineCode",{parentName:"li"},"T")," \u5b9e\u73b0 ",(0,a.yg)("a",{parentName:"li",href:"https://docs.rs/sea-query/*/sea_query/value/trait.Nullable.html"},(0,a.yg)("inlineCode",{parentName:"a"},"sea_query::Nullable")))),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "custom_value_type")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub number: Integer,\n    // \u4ec5\u9002\u7528\u4e8e Postgres\n    pub str_vec: StringVec,\n}\n\n#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]\npub enum Relation {}\n\nimpl ActiveModelBehavior for ActiveModel {}\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveValueType)]\npub struct Integer(i32);\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveValueType)]\npub struct StringVec(pub Vec<String>);\n')),(0,a.yg)("details",null,(0,a.yg)("summary",null,"`StringVec` \u6269\u5c55\u4e3a\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},"impl std::convert::From<StringVec> for Value {\n    fn from(source: StringVec) -> Self {\n        source.0.into()\n    }\n}\n\nimpl sea_orm::TryGetable for StringVec {\n    fn try_get_by<I: sea_orm::ColIdx>(res: &QueryResult, idx: I) -> Result<Self, sea_orm::TryGetError> {\n        <Vec<String> as sea_orm::TryGetable>::try_get_by(res, idx).map(|v| StringVec(v))\n    }\n}\n\nimpl sea_orm::sea_query::ValueType for StringVec {\n    fn try_from(v: Value) -> Result<Self, sea_orm::sea_query::ValueTypeErr> {\n        <Vec<String> as sea_orm::sea_query::ValueType>::try_from(v).map(|v| StringVec(v))\n    }\n\n    fn type_name() -> String {\n        stringify!(StringVec).to_owned()\n    }\n\n    fn array_type() -> sea_orm::sea_query::ArrayType {\n        sea_orm::sea_query::ArrayType::String\n    }\n\n    fn column_type() -> sea_orm::sea_query::ColumnType {\n        sea_orm::sea_query::ColumnType::String(None)\n    }\n}\n"))),(0,a.yg)("p",null,"\u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5c06\u5bf9\u8c61\u5e8f\u5217\u5316/\u53cd\u5e8f\u5217\u5316\u4e3a/\u4ece JSON \u5b9a\u4e49\u4e00\u4e2a\u540e\u7aef\u901a\u7528\u7684 ",(0,a.yg)("inlineCode",{parentName:"p"},"Vec<T>")," \u5b57\u6bb5\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::entity::prelude::*;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(table_name = "json_vec")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub str_vec: ObjectVec,\n}\n\n#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize, FromJsonQueryResult)]\npub struct ObjectVec(pub Vec<MyObject>);\n\n#[derive(Clone, Debug, PartialEq, Eq, Serialize, Deserialize)]\npub struct MyObject {\n    ..\n}\n')),(0,a.yg)("details",null,(0,a.yg)("summary",null,"`ObjectVec` \u6269\u5c55\u4e3a\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},"impl sea_orm::TryGetableFromJson for ObjectVec {}\n\nimpl std::convert::From<ObjectVec> for sea_orm::Value {\n    fn from(source: ObjectVec) -> Self {\n        sea_orm::Value::Json(serde_json::to_value(&source).ok().map(|s| std::boxed::Box::new(s)))\n    }\n}\n\nimpl sea_orm::sea_query::ValueType for ObjectVec {\n    fn try_from(v: sea_orm::Value) -> Result<Self, sea_orm::sea_query::ValueTypeErr> {\n        match v {\n            sea_orm::Value::Json(Some(json)) => Ok(\n                serde_json::from_value(*json).map_err(|_| sea_orm::sea_query::ValueTypeErr)?,\n            ),\n            _ => Err(sea_orm::sea_query::ValueTypeErr),\n        }\n    }\n\n    fn type_name() -> String {\n        stringify!(ObjectVec).to_owned()\n    }\n\n    fn array_type() -> sea_orm::sea_query::ArrayType {\n        sea_orm::sea_query::ArrayType::Json\n    }\n\n    fn column_type() -> sea_orm::sea_query::ColumnType {\n        sea_orm::sea_query::ColumnType::Json\n    }\n}\n\nimpl sea_orm::sea_query::Nullable for ObjectVec {\n    fn null() -> sea_orm::Value {\n        sea_orm::Value::Json(None)\n    }\n}\n"))))}m.isMDXComponent=!0}}]);