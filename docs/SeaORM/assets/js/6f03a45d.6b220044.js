"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[83632],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>d});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),g=a,d=m["".concat(l,".").concat(g)]||m[g]||p[g]||i;return t?r.createElement(d,o(o({ref:n},u),{},{components:t})):r.createElement(d,o({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},73287:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(58168),a=(t(96540),t(15680));const i={},o="\u6570\u636e\u79cd\u5b50",s={unversionedId:"migration/seeding-data",id:"version-0.12.x/migration/seeding-data",title:"\u6570\u636e\u79cd\u5b50",description:"\u60a8\u53ef\u4ee5\u4ece SchemaManager \u83b7\u53d6 DbConn \u5e76\u6839\u636e\u9700\u8981\u6267\u884c\u6570\u636e\u64cd\u4f5c\uff0c\u4f8b\u5982\uff0c\u63d2\u5165\u79cd\u5b50\u6570\u636e\u3002",source:"@site/versioned_docs/version-0.12.x/03-migration/04-seeding-data.md",sourceDirName:"03-migration",slug:"/migration/seeding-data",permalink:"/SeaORM/docs/0.12.x/migration/seeding-data",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.12.x/03-migration/04-seeding-data.md",tags:[],version:"0.12.x",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1691002505,formattedLastUpdatedAt:"Aug 2, 2023",sidebarPosition:4,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u8fd0\u884c\u8fc1\u79fb",permalink:"/SeaORM/docs/0.12.x/migration/running-migration"},next:{title:"\u4f7f\u7528 sea-orm-cli",permalink:"/SeaORM/docs/0.12.x/generate-entity/sea-orm-cli"}},l={},c=[{value:"\u4e8b\u52a1\u6027\u7684\u6570\u636e\u79cd\u5b50",id:"\u4e8b\u52a1\u6027\u7684\u6570\u636e\u79cd\u5b50",level:2}],u={toc:c},m="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(m,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u6570\u636e\u79cd\u5b50"},"\u6570\u636e\u79cd\u5b50"),(0,a.yg)("p",null,"\u60a8\u53ef\u4ee5\u4ece ",(0,a.yg)("inlineCode",{parentName:"p"},"SchemaManager")," \u83b7\u53d6 ",(0,a.yg)("inlineCode",{parentName:"p"},"DbConn")," \u5e76\u6839\u636e\u9700\u8981\u6267\u884c\u6570\u636e\u64cd\u4f5c\uff0c\u4f8b\u5982\uff0c\u63d2\u5165\u79cd\u5b50\u6570\u636e\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm_migration::sea_orm::{entity::*, query::*};\n\n// ...\n\n#[async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let db = manager.get_connection();\n\n        cake::ActiveModel {\n            name: Set("Cheesecake".to_owned()),\n            ..Default::default()\n        }\n        .insert(db)\n        .await?;\n\n        Ok(())\n    }\n}\n')),(0,a.yg)("p",null,"\u60a8\u8fd8\u53ef\u4ee5\u7f16\u5199 SeaQuery \u8bed\u53e5\u6765\u63d2\u5165\u6570\u636e\u5230\u8868\u4e2d\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm_migration::sea_orm::{entity::*, query::*};\n\n// ...\n\n#[async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        let insert = Query::insert()\n            .into_table(Cake::Table)\n            .columns([Cake::Name])\n            .values_panic(["Tiramisu".into()])\n            .to_owned();\n\n        manager.exec_stmt(insert).await?;\n\n        Ok(())\n    }\n}\n\n#[derive(DeriveIden)]\npub enum Cake {\n    Table,\n    Id,\n    Name,\n}\n')),(0,a.yg)("h2",{id:"\u4e8b\u52a1\u6027\u7684\u6570\u636e\u79cd\u5b50"},"\u4e8b\u52a1\u6027\u7684\u6570\u636e\u79cd\u5b50"),(0,a.yg)("p",null,"\u542f\u52a8\u4e00\u4e2a\u4e8b\u52a1\u5e76\u5728\u8fc1\u79fb\u7684 up \u548c down \u4e2d\u6267\u884c SQL\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm_migration::sea_orm::{entity::*, query::*};\n\n// ...\n\n#[async_trait]\nimpl MigrationTrait for Migration {\n    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {\n        // \u83b7\u53d6\u8fde\u63a5\u5e76\u5f00\u59cb\u4e00\u4e2a\u4e8b\u52a1\n        let db = manager.get_connection();\n        let transaction = db.begin().await?;\n\n        // \u4f7f\u7528\u4e8b\u52a1\u8fde\u63a5\u63d2\u5165\u6570\u636e\n        cake::ActiveModel {\n            name: Set("Cheesecake".to_owned()),\n            ..Default::default()\n        }\n        .insert(&transaction)\n        .await?;\n\n        // \u63d0\u4ea4\u4e8b\u52a1\n        transaction.commit().await?;\n\n        Ok(())\n    }\n}\n')))}p.isMDXComponent=!0}}]);