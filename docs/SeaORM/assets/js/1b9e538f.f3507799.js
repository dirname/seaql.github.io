"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[91150],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>m});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=l(t),y=a,m=d["".concat(u,".").concat(y)]||d[y]||p[y]||o;return t?r.createElement(m,i(i({ref:n},s),{},{components:t})):r.createElement(m,i({ref:n},s))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=y;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c[d]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},72013:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=t(58168),a=(t(96540),t(15680));const o={},i="\u5b50\u67e5\u8be2",c={unversionedId:"advanced-query/subquery",id:"advanced-query/subquery",title:"\u5b50\u67e5\u8be2",description:"\u5e26\u5b50\u67e5\u8be2\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f",source:"@site/docs/08-advanced-query/05-subquery.md",sourceDirName:"08-advanced-query",slug:"/advanced-query/subquery",permalink:"/SeaORM/docs/next/advanced-query/subquery",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/08-advanced-query/05-subquery.md",tags:[],version:"current",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1658049747,formattedLastUpdatedAt:"Jul 17, 2022",sidebarPosition:5,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u81ea\u5b9a\u4e49\u8fde\u63a5",permalink:"/SeaORM/docs/next/advanced-query/custom-joins"},next:{title:"\u4e8b\u52a1",permalink:"/SeaORM/docs/next/advanced-query/transaction"}},u={},l=[{value:"\u5e26\u5b50\u67e5\u8be2\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f",id:"\u5e26\u5b50\u67e5\u8be2\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f",level:2}],s={toc:l},d="wrapper";function p(e){let{components:n,...t}=e;return(0,a.yg)(d,(0,r.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u5b50\u67e5\u8be2"},"\u5b50\u67e5\u8be2"),(0,a.yg)("h2",{id:"\u5e26\u5b50\u67e5\u8be2\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f"},"\u5e26\u5b50\u67e5\u8be2\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f"),(0,a.yg)("p",null,"\u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},"in_subquery")," \u6216 ",(0,a.yg)("inlineCode",{parentName:"p"},"not_in_subquery")," \u65b9\u6cd5\u6784\u9020\u5e26\u5b50\u67e5\u8be2\u7684\u6761\u4ef6\u8868\u8fbe\u5f0f\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::Condition;\nuse sea_query::Query;\n\nassert_eq!(\n    cake::Entity::find()\n        .filter(\n            Condition::any().add(\n                cake::Column::Id.in_subquery(\n                    Query::select()\n                        .expr(cake::Column::Id.max())\n                        .from(cake::Entity)\n                        .to_owned()\n                )\n            )\n        )\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `cake`.`id`, `cake`.`name` FROM `cake`",\n        "WHERE `cake`.`id` IN (SELECT MAX(`cake`.`id`) FROM `cake`)",\n    ]\n    .join(" ")\n);\n')))}p.isMDXComponent=!0}}]);