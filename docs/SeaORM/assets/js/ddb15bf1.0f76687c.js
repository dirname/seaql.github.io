"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[86070],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>u});var i=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),d=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=d(e.components);return i.createElement(c.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},g=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=d(t),g=r,u=p["".concat(c,".").concat(g)]||p[g]||f[g]||a;return t?i.createElement(u,l(l({ref:n},s),{},{components:t})):i.createElement(u,l({ref:n},s))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=g;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<a;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}g.displayName="MDXCreateElement"},47162:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var i=t(58168),r=(t(96540),t(15680));const a={},l="\u94fe\u63a5\u5173\u7cfb",o={unversionedId:"relation/chained-relations",id:"version-0.5.x/relation/chained-relations",title:"\u94fe\u63a5\u5173\u7cfb",description:"\u5982\u679c\u4f60\u5728\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u6709\u591a\u4e2a\u8fde\u63a5\u8def\u5f84\uff0c\u6216\u8005\u6709\u901a\u8fc7\u591a\u4e2a\u5b9e\u4f53\u7684\u590d\u6742\u8fde\u63a5\uff0c\u53ef\u4ee5\u4f7f\u7528 Linked \u8fdb\u884c\u5b9a\u4e49\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u793a\u8303\u5982\u4f55\u901a\u8fc7\u4e2d\u95f4\u7684 cakefilling \u8868\u8fde\u63a5\u86cb\u7cd5\u548c\u9985\u6599\u3002",source:"@site/versioned_docs/version-0.5.x/06-relation/04-chained-relations.md",sourceDirName:"06-relation",slug:"/relation/chained-relations",permalink:"/SeaORM/docs/0.5.x/relation/chained-relations",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.5.x/06-relation/04-chained-relations.md",tags:[],version:"0.5.x",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1641018762,formattedLastUpdatedAt:"Jan 1, 2022",sidebarPosition:4,frontMatter:{},sidebar:"version-0.5.x/tutorialSidebar",previous:{title:"\u591a\u5bf9\u591a",permalink:"/SeaORM/docs/0.5.x/relation/many-to-many"},next:{title:"\u81ea\u5f15\u7528",permalink:"/SeaORM/docs/0.5.x/relation/self-referencing"}},c={},d=[{value:"\u61d2\u52a0\u8f7d",id:"\u61d2\u52a0\u8f7d",level:3},{value:"\u6025\u5207\u52a0\u8f7d",id:"\u6025\u5207\u52a0\u8f7d",level:3}],s={toc:d},p="wrapper";function f(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,i.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u94fe\u63a5\u5173\u7cfb"},"\u94fe\u63a5\u5173\u7cfb"),(0,r.yg)("p",null,"\u5982\u679c\u4f60\u5728\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u6709\u591a\u4e2a\u8fde\u63a5\u8def\u5f84\uff0c\u6216\u8005\u6709\u901a\u8fc7\u591a\u4e2a\u5b9e\u4f53\u7684\u590d\u6742\u8fde\u63a5\uff0c\u53ef\u4ee5\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/0.5/sea_orm/entity/trait.Linked.html"},(0,r.yg)("inlineCode",{parentName:"a"},"Linked"))," \u8fdb\u884c\u5b9a\u4e49\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u793a\u8303\u5982\u4f55\u901a\u8fc7\u4e2d\u95f4\u7684 cake_filling \u8868\u8fde\u63a5\u86cb\u7cd5\u548c\u9985\u6599\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug)]\npub struct CakeToFilling;\n\nimpl Linked for CakeToFilling {\n    type FromEntity = cake::Entity;\n\n    type ToEntity = filling::Entity;\n\n    fn link(&self) -> Vec<RelationDef> {\n        vec![\n            cake_filling::Relation::Cake.def().rev(),\n            cake_filling::Relation::Filling.def(),\n        ]\n    }\n}\n")),(0,r.yg)("p",null,"\u6b64\u5916\uff0c",(0,r.yg)("inlineCode",{parentName:"p"},"RelationDef")," \u4e5f\u53ef\u4ee5\u52a8\u6001\u5b9a\u4e49\uff0c\u4ee5\u4e0b\u4ee3\u7801\u4e0e\u4e0a\u9762\u7684\u6548\u679c\u76f8\u540c\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"#[derive(Debug)]\npub struct CakeToFilling;\n\nimpl Linked for CakeToFilling {\n    type FromEntity = cake::Entity;\n\n    type ToEntity = filling::Entity;\n\n    fn link(&self) -> Vec<RelationDef> {\n        vec![\n            cake_filling::Relation::Cake.def().rev(),\n            cake_filling::Entity::belongs_to(filling::Entity)\n                .from(cake_filling::Column::FillingId)\n                .to(filling::Column::Id)\n                .into(),\n        ]\n    }\n}\n")),(0,r.yg)("h3",{id:"\u61d2\u52a0\u8f7d"},"\u61d2\u52a0\u8f7d"),(0,r.yg)("p",null,"\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/0.5/sea_orm/entity/prelude/trait.ModelTrait.html#method.find_linked"},(0,r.yg)("inlineCode",{parentName:"a"},"find_linked"))," \u65b9\u6cd5\u67e5\u627e\u53ef\u4ee5\u586b\u5165\u86cb\u7cd5\u7684\u9985\u6599\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let cake_model = cake::Model {\n    id: 12,\n    name: "".to_owned(),\n};\n\nassert_eq!(\n    cake_model\n        .find_linked(cake::CakeToFilling)\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        r#"SELECT `filling`.`id`, `filling`.`name`"#,\n        r#"FROM `filling`"#,\n        r#"INNER JOIN `cake_filling` ON `cake_filling`.`filling_id` = `filling`.`id`"#,\n        r#"INNER JOIN `cake` ON `cake`.`id` = `cake_filling`.`cake_id`"#,\n        r#"WHERE `cake`.`id` = 12"#,\n    ]\n    .join(" ")\n);\n')),(0,r.yg)("h3",{id:"\u6025\u5207\u52a0\u8f7d"},"\u6025\u5207\u52a0\u8f7d"),(0,r.yg)("p",null,"\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/0.5/sea_orm/entity/prelude/struct.Select.html#method.find_also_linked"},(0,r.yg)("inlineCode",{parentName:"a"},"find_also_linked"))," \u65b9\u6cd5\u5728\u5355\u4e2a\u9009\u62e9\u4e2d\u67e5\u627e\u6240\u6709\u86cb\u7cd5\u548c\u9985\u6599\u7684\u914d\u5bf9\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'assert_eq!(\n    cake::Entity::find()\n        .find_also_linked(cake::CakeToFilling)\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `cake`.`id` AS `A_id`, `cake`.`name` AS `A_name`,",\n        "`filling`.`id` AS `B_id`, `filling`.`name` AS `B_name`",\n        "FROM `cake`",\n        "LEFT JOIN `cake_filling` ON `cake`.`id` = `cake_filling`.`cake_id`",\n        "LEFT JOIN `filling` ON `cake_filling`.`filling_id` = `filling`.`id`",\n    ]\n    .join(" ")\n);\n')))}f.isMDXComponent=!0}}]);