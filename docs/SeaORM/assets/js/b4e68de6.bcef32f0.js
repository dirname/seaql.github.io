"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[73337],{15680:(e,r,n)=>{n.d(r,{xA:()=>d,yg:()=>y});var t=n(96540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=t.createContext({}),s=function(e){var r=t.useContext(c),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},d=function(e){var r=s(e.components);return t.createElement(c.Provider,{value:r},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},m=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,y=p["".concat(c,".").concat(m)]||p[m]||u[m]||o;return n?t.createElement(y,i(i({ref:r},d),{},{components:n})):t.createElement(y,i({ref:r},d))}));function y(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in r)hasOwnProperty.call(r,c)&&(l[c]=r[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},70940:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var t=n(58168),a=(n(96540),n(15680));const o={},i="\u9519\u8bef\u5904\u7406",l={unversionedId:"advanced-query/error-handling",id:"version-0.12.x/advanced-query/error-handling",title:"\u9519\u8bef\u5904\u7406",description:"\u5728 SeaORM \u4e2d\uff0c\u6240\u6709\u8fd0\u884c\u65f6\u9519\u8bef\u7531 DbErr \u8868\u793a\u3002",source:"@site/versioned_docs/version-0.12.x/08-advanced-query/09-error-handling.md",sourceDirName:"08-advanced-query",slug:"/advanced-query/error-handling",permalink:"/SeaORM/docs/0.12.x/advanced-query/error-handling",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.12.x/08-advanced-query/09-error-handling.md",tags:[],version:"0.12.x",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1690464322,formattedLastUpdatedAt:"Jul 27, 2023",sidebarPosition:9,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u81ea\u5b9a\u4e49\u6d3b\u52a8\u6a21\u578b",permalink:"/SeaORM/docs/0.12.x/advanced-query/custom-active-model"},next:{title:"\u521b\u5efa\u8868",permalink:"/SeaORM/docs/0.12.x/schema-statement/create-table"}},c={},s=[{value:"\u5904\u7406\u5e38\u89c1\u7684 SQL \u9519\u8bef",id:"\u5904\u7406\u5e38\u89c1\u7684-sql-\u9519\u8bef",level:2},{value:"\u5904\u7406\u6570\u636e\u5e93\u7279\u5b9a\u9519\u8bef",id:"\u5904\u7406\u6570\u636e\u5e93\u7279\u5b9a\u9519\u8bef",level:2}],d={toc:s},p="wrapper";function u(e){let{components:r,...n}=e;return(0,a.yg)(p,(0,t.A)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u9519\u8bef\u5904\u7406"},"\u9519\u8bef\u5904\u7406"),(0,a.yg)("p",null,"\u5728 SeaORM \u4e2d\uff0c\u6240\u6709\u8fd0\u884c\u65f6\u9519\u8bef\u7531 ",(0,a.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/error/enum.DbErr.html"},(0,a.yg)("inlineCode",{parentName:"a"},"DbErr"))," \u8868\u793a\u3002"),(0,a.yg)("h2",{id:"\u5904\u7406\u5e38\u89c1\u7684-sql-\u9519\u8bef"},"\u5904\u7406\u5e38\u89c1\u7684 SQL \u9519\u8bef"),(0,a.yg)("p",null,"\u60a8\u53ef\u4ee5\u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},"DbErr::sql_err()")," \u65b9\u6cd5\u5c06\u4e0e SQL \u76f8\u5173\u7684\u9519\u8bef\u8f6c\u6362\u4e3a\u5e38\u89c1\u7684\u6570\u636e\u5e93\u9519\u8bef ",(0,a.yg)("inlineCode",{parentName:"p"},"SqlErr"),"\uff0c\u4f8b\u5982\u552f\u4e00\u7ea6\u675f\u6216\u5916\u952e\u51b2\u7a81\u9519\u8bef\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'assert!(matches!(\n    cake.into_active_model().insert(db).await\n        .expect_err("\u63d2\u5165\u91cd\u590d\u4e3b\u952e\u7684\u884c\u5e94\u8be5\u5931\u8d25")\n        .sql_err(),\n    Some(SqlErr::UniqueConstraintViolation(_))\n));\n\nassert!(matches!(\n    fk_cake.insert(db).await\n        .expect_err("\u63d2\u5165\u65e0\u6548\u5916\u952e\u7684\u884c\u5e94\u8be5\u5931\u8d25")\n        .sql_err(),\n    Some(SqlErr::ForeignKeyConstraintViolation(_))\n));\n')),(0,a.yg)("h2",{id:"\u5904\u7406\u6570\u636e\u5e93\u7279\u5b9a\u9519\u8bef"},"\u5904\u7406\u6570\u636e\u5e93\u7279\u5b9a\u9519\u8bef"),(0,a.yg)("p",null,"\u60a8\u53ef\u4ee5\u4ece ",(0,a.yg)("inlineCode",{parentName:"p"},"RuntimeErr")," \u4e2d\u68c0\u7d22\u6570\u636e\u5e93\u7279\u5b9a\u7684\u9519\u8bef\u4ee3\u7801\uff1a"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'let my_cake = cake::ActiveModel { id: Set(1), .. };\n\n// \u63d2\u5165\u4e00\u9053\u65b0\u86cb\u7cd5\uff0c\u5176\u4e3b\u952e\uff08`id` \u5217\uff09\u8bbe\u7f6e\u4e3a 1\u3002\nlet cake = my_cake.save(db).await.expect("\u65e0\u6cd5\u63d2\u5165\u86cb\u7cd5");\n\n// \u518d\u6b21\u63d2\u5165\u76f8\u540c\u7684\u884c\u5931\u8d25\uff0c\u56e0\u4e3a\u6bcf\u4e00\u884c\u7684\u4e3b\u952e\u5e94\u8be5\u662f\u552f\u4e00\u7684\u3002\nlet error: DbErr = cake\n    .into_active_model()\n    .insert(db)\n    .await\n    .expect_err("\u63d2\u5165\u5e94\u8be5\u7531\u4e8e\u91cd\u590d\u4e3b\u952e\u800c\u5931\u8d25");\n\nmatch error {\n    DbErr::Exec(RuntimeErr::SqlxError(error)) => match error {\n        sqlx::Error::Database(e) => {\n            // \u6211\u4eec\u68c0\u67e5\u6570\u636e\u5e93\uff08\u5728\u672c\u4f8b\u4e2d\u662f MySQL\uff09\u629b\u51fa\u7684\u9519\u8bef\u4ee3\u7801\uff0c\n            // `23000` \u8868\u793a `ER_DUP_KEY`\uff1a\u8868\u4e2d\u6709\u4e00\u4e2a\u91cd\u590d\u7684\u952e\u3002\n            assert_eq!(e.code().unwrap(), "23000");\n        }\n        _ => panic!("\u610f\u5916\u7684 sqlx::Error \u7c7b\u578b"),\n    },\n    _ => panic!("\u610f\u5916\u7684 DbErr \u7c7b\u578b"),\n}\n')))}u.isMDXComponent=!0}}]);