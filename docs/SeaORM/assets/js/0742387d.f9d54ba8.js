"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[83350],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function m(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?m(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):m(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},m=Object.keys(e);for(a=0;a<m.length;a++)t=m[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(a=0;a<m.length;a++)t=m[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),o=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=o(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},_=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,m=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=o(t),_=r,y=c["".concat(l,".").concat(_)]||c[_]||p[_]||m;return t?a.createElement(y,s(s({ref:n},u),{},{components:t})):a.createElement(y,s({ref:n},u))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var m=t.length,s=new Array(m);s[0]=_;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var o=2;o<m;o++)s[o]=t[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}_.displayName="MDXCreateElement"},93183:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>m,metadata:()=>i,toc:()=>o});var a=t(58168),r=(t(96540),t(15680));const m={},s="\u521b\u5efa\u679a\u4e3e",i={unversionedId:"schema-statement/create-enum",id:"schema-statement/create-enum",title:"\u521b\u5efa\u679a\u4e3e",description:"\u60a8\u53ef\u4ee5\u901a\u8fc7 Schema \u8f85\u52a9\u7ed3\u6784\u751f\u6210 SQL \u8bed\u53e5\u6765\u521b\u5efa\u5e26\u6709\u679a\u4e3e\u5217\u7684\u6570\u636e\u5e93\u8868\u3002",source:"@site/docs/09-schema-statement/02-create-enum.md",sourceDirName:"09-schema-statement",slug:"/schema-statement/create-enum",permalink:"/SeaORM/docs/next/schema-statement/create-enum",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/docs/09-schema-statement/02-create-enum.md",tags:[],version:"current",lastUpdatedBy:"Chris Tsang",lastUpdatedAt:1717255614,formattedLastUpdatedAt:"Jun 1, 2024",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u521b\u5efa\u8868",permalink:"/SeaORM/docs/next/schema-statement/create-table"},next:{title:"\u521b\u5efa\u7d22\u5f15",permalink:"/SeaORM/docs/next/schema-statement/create-index"}},l={},o=[{value:"\u5b57\u7b26\u4e32\u548c\u6574\u6570\u679a\u4e3e",id:"\u5b57\u7b26\u4e32\u548c\u6574\u6570\u679a\u4e3e",level:2},{value:"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e",id:"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e",level:2},{value:"PostgreSQL",id:"postgresql",level:3},{value:"MySQL",id:"mysql",level:3},{value:"SQLite",id:"sqlite",level:3}],u={toc:o},c="wrapper";function p(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,a.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u521b\u5efa\u679a\u4e3e"},"\u521b\u5efa\u679a\u4e3e"),(0,r.yg)("p",null,"\u60a8\u53ef\u4ee5\u901a\u8fc7 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/schema/struct.Schema.html"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema"))," \u8f85\u52a9\u7ed3\u6784\u751f\u6210 SQL \u8bed\u53e5\u6765\u521b\u5efa\u5e26\u6709\u679a\u4e3e\u5217\u7684\u6570\u636e\u5e93\u8868\u3002"),(0,r.yg)("h2",{id:"\u5b57\u7b26\u4e32\u548c\u6574\u6570\u679a\u4e3e"},"\u5b57\u7b26\u4e32\u548c\u6574\u6570\u679a\u4e3e"),(0,r.yg)("p",null,"\u8fd9\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5b57\u7b26\u4e32/\u6574\u6570\u5217\uff0c\u6620\u5c04\u5230 Rust \u679a\u4e3e\u3002\u793a\u4f8b\u5b9e\u4f53\u5b9a\u4e49\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="active_enum.rs"',title:'"active_enum.rs"'},'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(schema_name = "public", table_name = "active_enum")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub category: Option<Category>,\n    pub color: Option<Color>,\n}\n\n#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "String(StringLen::N(1))")]\npub enum Category {\n    #[sea_orm(string_value = "B")]\n    Big,\n    #[sea_orm(string_value = "S")]\n    Small,\n}\n\n#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "i32", db_type = "Integer")]\npub enum Color {\n    #[sea_orm(num_value = 0)]\n    Black,\n    #[sea_orm(num_value = 1)]\n    White,\n}\n')),(0,r.yg)("p",null,"\u4f5c\u4e3a\u8bf4\u660e\uff0c\u679a\u4e3e\u53ea\u662f\u666e\u901a\u6570\u636e\u5e93\u5217\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"use sea_orm::{sea_query, Schema};\n\nlet builder = db.get_database_backend();\nlet schema = Schema::new(builder);\n\nassert_eq!(\n    builder.build(&schema.create_table_from_entity(active_enum::Entity)),\n    builder.build(\n        &sea_query::Table::create()\n            .table(active_enum::Entity.table_ref())\n            .col(\n                sea_query::ColumnDef::new(active_enum::Column::Id)\n                    .integer()\n                    .not_null()\n                    .auto_increment()\n                    .primary_key(),\n            )\n            .col(sea_query::ColumnDef::new(active_enum::Column::Category).string_len(1))\n            .col(sea_query::ColumnDef::new(active_enum::Column::Color).integer())\n            .to_owned()\n    )\n);\n")),(0,r.yg)("details",null,(0,r.yg)("summary",null,"\u8bf7\u6ce8\u610f\uff0c\u4e0d\u7b26\u5408 UAX#31 \u7684\u5b57\u7b26\u5c06\u6309\u7167\u4e0b\u9762\u7684\u793a\u4f8b\u8fdb\u884c\u8f6c\u6362\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(Clone, Debug, PartialEq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "String(StringLen::None)")]\npub enum StringValue {\n    #[sea_orm(string_value = "")]\n    Member1,\n    #[sea_orm(string_value = "$")]\n    Member2,\n    #[sea_orm(string_value = "$$")]\n    Member3,\n    #[sea_orm(string_value = "AB")]\n    Member4,\n    #[sea_orm(string_value = "A_B")]\n    Member5,\n    #[sea_orm(string_value = "A$B")]\n    Member6,\n    #[sea_orm(string_value = "0 123")]\n    Member7,\n}\n\n// \u751f\u6210\u7684\u5c06\u662f\u4ee5\u4e0b\u5185\u5bb9\npub enum StringValueVariant {\n    __Empty,\n    _0x24,\n    _0x240x24,\n    Ab,\n    A0x5Fb,\n    A0x24B,\n    _0x300x20123,\n}\n'))),(0,r.yg)("h2",{id:"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e"},"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e"),(0,r.yg)("p",null,"\u4e0d\u540c\u6570\u636e\u5e93\u7684\u679a\u4e3e\u652f\u6301\u5404\u4e0d\u76f8\u540c\u3002\u6211\u4eec\u9010\u4e00\u8fdb\u884c\u8bf4\u660e\u3002"),(0,r.yg)("p",null,"\u8003\u8651\u4ee5\u4e0b\u5b9e\u4f53\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="active_enum.rs"',title:'"active_enum.rs"'},'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, Eq, DeriveEntityModel)]\n#[sea_orm(schema_name = "public", table_name = "active_enum")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub tea: Option<Tea>,\n}\n\n#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "tea")]\npub enum Tea {\n    #[sea_orm(string_value = "EverydayTea")]\n    EverydayTea,\n    #[sea_orm(string_value = "BreakfastTea")]\n    BreakfastTea,\n}\n')),(0,r.yg)("p",null,"\u6ce8\u610f ",(0,r.yg)("inlineCode",{parentName:"p"},"db_type")," \u548c\u989d\u5916\u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"enum_name")," \u5c5e\u6027\u3002"),(0,r.yg)("h3",{id:"postgresql"},"PostgreSQL"),(0,r.yg)("p",null,"\u5728 PostgreSQL \u4e2d\uff0c\u679a\u4e3e\u7531 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-query/*/sea_query/extension/postgres/struct.TypeCreateStatement.html"},(0,r.yg)("inlineCode",{parentName:"a"},"TypeCreateStatement"))," \u5b9a\u4e49\uff0c\u53ef\u4ee5\u901a\u8fc7 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/schema/struct.Schema.html#method.create_enum_from_entity"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema::create_enum_from_entity"))," \u65b9\u6cd5\u4ece ",(0,r.yg)("inlineCode",{parentName:"p"},"Entity")," \u521b\u5efa\u3002"),(0,r.yg)("p",null,"\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/schema/struct.Schema.html#method.create_enum_from_active_enum"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema::create_enum_from_active_enum"))," \u65b9\u6cd5\u4ece ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveEnum")," \u521b\u5efa\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{Schema, Statement};\n\nlet db_postgres = DbBackend::Postgres;\nlet schema = Schema::new(db_postgres);\n\nassert_eq!(\n    schema\n        .create_enum_from_entity(active_enum::Entity)\n        .iter()\n        .map(|stmt| db_postgres.build(stmt))\n        .collect::<Vec<_>>(),\n    [Statement::from_string(\n        db_postgres,\n        r#"CREATE TYPE "tea" AS ENUM (\'EverydayTea\', \'BreakfastTea\')"#\n    ),]\n);\n\nassert_eq!(\n    db_postgres.build(&schema.create_enum_from_active_enum::<Tea>()),\n    Statement::from_string(\n        db_postgres,\n        r#"CREATE TYPE "tea" AS ENUM (\'EverydayTea\', \'BreakfastTea\')"#\n    )\n);\n\nassert_eq!(\n    db_postgres.build(&schema.create_table_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_postgres,\n        [\n            r#"CREATE TABLE "public"."active_enum" ("#,\n            r#""id" serial NOT NULL PRIMARY KEY,"#,\n            r#""tea" tea"#,\n            r#")"#,\n        ]\n        .join(" ")\n    ),\n);\n')),(0,r.yg)("h3",{id:"mysql"},"MySQL"),(0,r.yg)("p",null,"\u5728 MySQL \u4e2d\uff0c\u679a\u4e3e\u662f\u5728\u521b\u5efa\u8868\u65f6\u5b9a\u4e49\u7684\uff0c\u56e0\u6b64\u60a8\u53ea\u9700\u8981\u8c03\u7528\u4e00\u6b21 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/schema/struct.Schema.html#method.create_table_from_entity"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema::create_table_from_entity")),"\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{Schema, Statement};\n\nlet db_mysql = DbBackend::MySql;\nlet schema = Schema::new(db_mysql);\n\nassert_eq!(\n    db_mysql.build(&schema.create_table_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_mysql,\n        [\n            "CREATE TABLE `active_enum` (",\n            "`id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,",\n            "`tea` ENUM(\'EverydayTea\', \'BreakfastTea\')",\n            ")",\n        ]\n        .join(" ")\n    ),\n);\n')),(0,r.yg)("h3",{id:"sqlite"},"SQLite"),(0,r.yg)("p",null,"SQLite \u4e0d\u652f\u6301\u679a\u4e3e\uff0c\u56e0\u6b64\u5c06\u5b58\u50a8\u4e3a ",(0,r.yg)("inlineCode",{parentName:"p"},"TEXT"),"\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{Schema, Statement};\n\nlet db_sqlite = DbBackend::Sqlite;\nlet schema = Schema::new(db_sqlite);\n\nassert_eq!(\n    db_sqlite.build(&schema.create_enum_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_sqlite,\n        [\n            "CREATE TABLE `active_enum` (",\n            "`id` integer NOT NULL PRIMARY KEY AUTOINCREMENT,",\n            "`tea` text",\n            ")",\n        ]\n        .join(" ")\n    ),\n);\n')))}p.isMDXComponent=!0}}]);