"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[30345],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>k});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),l=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(i.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(t),m=r,k=p["".concat(i,".").concat(m)]||p[m]||u[m]||o;return t?a.createElement(k,s(s({ref:n},d),{},{components:t})):a.createElement(k,s({ref:n},d))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=m;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[p]="string"==typeof e?e:r,s[1]=c;for(var l=2;l<o;l++)s[l]=t[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},16709:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var a=t(58168),r=(t(96540),t(15680));const o={},s="Mock \u63a5\u53e3",c={unversionedId:"write-test/mock",id:"version-0.10.x/write-test/mock",title:"Mock \u63a5\u53e3",description:"\u60a8\u53ef\u4ee5\u4f7f\u7528 mock \u6570\u636e\u5e93\u63a5\u53e3\u5bf9\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\u3002",source:"@site/versioned_docs/version-0.10.x/07-write-test/02-mock.md",sourceDirName:"07-write-test",slug:"/write-test/mock",permalink:"/SeaORM/docs/0.10.x/write-test/mock",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.10.x/07-write-test/02-mock.md",tags:[],version:"0.10.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1667313808,formattedLastUpdatedAt:"Nov 1, 2022",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u7a33\u5065\u4e0e\u6b63\u786e",permalink:"/SeaORM/docs/0.10.x/write-test/testing"},next:{title:"\u4f7f\u7528 SQLite",permalink:"/SeaORM/docs/0.10.x/write-test/sqlite"}},i={},l=[{value:"\u6a21\u62df\u67e5\u8be2\u7ed3\u679c",id:"\u6a21\u62df\u67e5\u8be2\u7ed3\u679c",level:2},{value:"\u6a21\u62df\u6267\u884c\u7ed3\u679c",id:"\u6a21\u62df\u6267\u884c\u7ed3\u679c",level:2}],d={toc:l},p="wrapper";function u(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,a.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"mock-\u63a5\u53e3"},"Mock \u63a5\u53e3"),(0,r.yg)("p",null,"\u60a8\u53ef\u4ee5\u4f7f\u7528 mock \u6570\u636e\u5e93\u63a5\u53e3\u5bf9\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5\u3002"),(0,r.yg)("p",null,"mock \u6570\u636e\u5e93\u6ca1\u6709\u6570\u636e\uff0c\u56e0\u6b64\u60a8\u9700\u8981\u5b9a\u4e49\u9884\u671f\u7684\u6570\u636e\uff0c\u4ee5\u4fbf\u5728\u6267\u884c CRUD \u64cd\u4f5c\u65f6\u8fd4\u56de\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u67e5\u8be2\u7ed3\u679c\u5e94\u63d0\u4f9b\u4ee5\u652f\u6301\u9009\u62e9\u64cd\u4f5c"),(0,r.yg)("li",{parentName:"ul"},"\u6267\u884c\u7ed3\u679c\u5e94\u63d0\u4f9b\u4ee5\u652f\u6301\u63d2\u5165\u3001\u66f4\u65b0\u548c\u5220\u9664\u64cd\u4f5c")),(0,r.yg)("p",null,"\u4e3a\u4e86\u786e\u4fdd\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u7684\u6b63\u786e\u6027\uff0c\u60a8\u8fd8\u53ef\u4ee5\u9a8c\u8bc1 mock \u6570\u636e\u5e93\u4e2d\u7684\u4e8b\u52a1\u65e5\u5fd7\u3002"),(0,r.yg)("p",null,"\u67e5\u770b\u6211\u4eec\u5982\u4f55\u4f7f\u7528 mock \u8fde\u63a5\u7f16\u5199\u5355\u5143\u6d4b\u8bd5 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm/blob/master/src/executor/paginator.rs#L250"},"here"),"\u3002"),(0,r.yg)("h2",{id:"\u6a21\u62df\u67e5\u8be2\u7ed3\u679c"},"\u6a21\u62df\u67e5\u8be2\u7ed3\u679c"),(0,r.yg)("p",null,"\u6211\u4eec\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"MockDatabase::new(DatabaseBackend::Postgres)")," \u521b\u5efa\u4e00\u4e2a PostgreSQL \u7684 mock \u6570\u636e\u5e93\u3002\u7136\u540e\uff0c\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"append_query_results")," \u65b9\u6cd5\u51c6\u5907\u67e5\u8be2\u7ed3\u679c\u3002\u8bf7\u6ce8\u610f\uff0c\u6211\u4eec\u4f20\u9012\u4e00\u4e2a\u5411\u91cf\u7684\u5411\u91cf\uff0c\u8868\u793a\u591a\u4e2a\u67e5\u8be2\u7ed3\u679c\uff0c\u6bcf\u4e2a\u7ed3\u679c\u5305\u542b\u591a\u4e2a\u6a21\u578b\u3002\u6700\u540e\uff0c\u6211\u4eec\u5c06\u5176\u8f6c\u6362\u4e3a\u8fde\u63a5\uff0c\u5e76\u50cf\u6b63\u5e38\u7684\u5b9e\u65f6\u8fde\u63a5\u4e00\u6837\u4f7f\u7528\u5b83\u6765\u6267\u884c CRUD \u64cd\u4f5c\u3002"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"MockDatabase")," \u7684\u4e00\u4e2a\u7279\u522b\u4e4b\u5904\u662f\uff0c\u60a8\u53ef\u4ee5\u68c0\u67e5\u5b83\u7684\u4e8b\u52a1\u65e5\u5fd7\u3002\u5bf9 mock \u6570\u636e\u5e93\u8fd0\u884c\u7684\u4efb\u4f55 SQL \u67e5\u8be2\u90fd\u5c06\u88ab\u8bb0\u5f55\uff1b\u60a8\u53ef\u4ee5\u9a8c\u8bc1\u6bcf\u4e2a\u65e5\u5fd7\uff0c\u4ee5\u786e\u4fdd\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u903b\u8f91\u7684\u6b63\u786e\u6027\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'#[cfg(test)]\nmod tests {\n    use sea_orm::{\n        entity::prelude::*, entity::*, tests_cfg::*,\n        DatabaseBackend, MockDatabase, Transaction,\n    };\n\n    #[async_std::test]\n    async fn test_find_cake() -> Result<(), DbErr> {\n        // \u521b\u5efa\u5e26\u6709\u6a21\u62df\u67e5\u8be2\u7ed3\u679c\u7684 MockDatabase\n        let db = MockDatabase::new(DatabaseBackend::Postgres)\n            .append_query_results(vec![\n                // \u7b2c\u4e00\u4e2a\u67e5\u8be2\u7ed3\u679c\n                vec![cake::Model {\n                    id: 1,\n                    name: "New York Cheese".to_owned(),\n                }],\n                // \u7b2c\u4e8c\u4e2a\u67e5\u8be2\u7ed3\u679c\n                vec![\n                    cake::Model {\n                        id: 1,\n                        name: "New York Cheese".to_owned(),\n                    },\n                    cake::Model {\n                        id: 2,\n                        name: "Chocolate Forest".to_owned(),\n                    },\n                ],\n            ])\n            .append_query_results(vec![\n                // \u7b2c\u4e09\u4e2a\u67e5\u8be2\u7ed3\u679c\n                vec![(\n                    cake::Model {\n                        id: 1,\n                        name: "Apple Cake".to_owned(),\n                    },\n                    fruit::Model {\n                        id: 2,\n                        name: "Apple".to_owned(),\n                        cake_id: Some(1),\n                    },\n                )],\n            ])\n            .into_connection();\n\n        // \u4ece MockDatabase \u67e5\u627e\u86cb\u7cd5\n        // \u8fd4\u56de\u7b2c\u4e00\u4e2a\u67e5\u8be2\u7ed3\u679c\n        assert_eq!(\n            cake::Entity::find().one(&db).await?,\n            Some(cake::Model {\n                id: 1,\n                name: "New York Cheese".to_owned(),\n            })\n        );\n\n        // \u4ece MockDatabase \u67e5\u627e\u6240\u6709\u86cb\u7cd5\n        // \u8fd4\u56de\u7b2c\u4e8c\u4e2a\u67e5\u8be2\u7ed3\u679c\n        assert_eq!(\n            cake::Entity::find().all(&db).await?,\n            vec![\n                cake::Model {\n                    id: 1,\n                    name: "New York Cheese".to_owned(),\n                },\n                cake::Model {\n                    id: 2,\n                    name: "Chocolate Forest".to_owned(),\n                },\n            ]\n        );\n\n        // \u67e5\u627e\u6240\u6709\u86cb\u7cd5\u53ca\u5176\u76f8\u5173\u6c34\u679c\n        assert_eq!(\n            cake::Entity::find()\n                .find_also_related(fruit::Entity)\n                .all(&db)\n                .await?,\n            vec![(\n                cake::Model {\n                    id: 1,\n                    name: "Apple Cake".to_owned(),\n                },\n                Some(fruit::Model {\n                    id: 2,\n                    name: "Apple".to_owned(),\n                    cake_id: Some(1),\n                })\n            )]\n        );\n\n        // \u68c0\u67e5\u4e8b\u52a1\u65e5\u5fd7\n        assert_eq!(\n            db.into_transaction_log(),\n            vec![\n                Transaction::from_sql_and_values(\n                    DatabaseBackend::Postgres,\n                    r#"SELECT "cake"."id", "cake"."name" FROM "cake" LIMIT $1"#,\n                    vec![1u64.into()]\n                ),\n                Transaction::from_sql_and_values(\n                    DatabaseBackend::Postgres,\n                    r#"SELECT "cake"."id", "cake"."name" FROM "cake""#,\n                    vec![]\n                ),\n                Transaction::from_sql_and_values(\n                    DatabaseBackend::Postgres,\n                    r#"SELECT "cake"."id" AS "A_id", "cake"."name" AS "A_name", "fruit"."id" AS "B_id", "fruit"."name" AS "B_name", "fruit"."cake_id" AS "B_cake_id" FROM "cake" LEFT JOIN "fruit" ON "cake"."id" = "fruit"."cake_id""#,\n                    vec![]\n                ),\n            ]\n        );\n\n        Ok(())\n    }\n}\n')),(0,r.yg)("h2",{id:"\u6a21\u62df\u6267\u884c\u7ed3\u679c"},"\u6a21\u62df\u6267\u884c\u7ed3\u679c"),(0,r.yg)("p",null,"\u8fd9\u4e0e\u6a21\u62df\u67e5\u8be2\u7ed3\u679c\u975e\u5e38\u76f8\u4f3c\uff0c\u4e0d\u540c\u4e4b\u5904\u5728\u4e8e\u6211\u4eec\u5728\u8fd9\u91cc\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"append_exec_results")," \u65b9\u6cd5\uff0c\u5e76\u5728\u5355\u5143\u6d4b\u8bd5\u4e2d\u6267\u884c\u63d2\u5165\u3001\u66f4\u65b0\u548c\u5220\u9664\u64cd\u4f5c\u3002",(0,r.yg)("inlineCode",{parentName:"p"},"append_exec_results")," \u65b9\u6cd5\u63a5\u53d7\u4e00\u4e2a ",(0,r.yg)("inlineCode",{parentName:"p"},"MockExecResult")," \u7684\u5411\u91cf\uff0c\u6bcf\u4e2a\u5143\u7d20\u8868\u793a\u76f8\u5e94\u64cd\u4f5c\u7684\u6267\u884c\u7ed3\u679c\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'#[cfg(test)]\nmod tests {\n    use sea_orm::{\n        entity::prelude::*, entity::*, tests_cfg::*,\n        DatabaseBackend, MockDatabase, MockExecResult, Transaction,\n    };\n\n    #[async_std::test]\n    async fn test_insert_cake() -> Result<(), DbErr> {\n        // \u521b\u5efa\u5e26\u6709\u6a21\u62df\u6267\u884c\u7ed3\u679c\u7684 MockDatabase\n        let db = MockDatabase::new(DatabaseBackend::Postgres)\n            .append_query_results(vec![\n                vec![cake::Model {\n                    id: 15,\n                    name: "Apple Pie".to_owned(),\n                }],\n                vec![cake::Model {\n                    id: 16,\n                    name: "Apple Pie".to_owned(),\n                }],\n            ])\n            .append_exec_results(vec![\n                MockExecResult {\n                    last_insert_id: 15,\n                    rows_affected: 1,\n                },\n                MockExecResult {\n                    last_insert_id: 16,\n                    rows_affected: 1,\n                },\n            ])\n            .into_connection();\n\n        // \u51c6\u5907 ActiveModel\n        let apple = cake::ActiveModel {\n            name: Set("Apple Pie".to_owned()),\n            ..Default::default()\n        };\n\n        // \u5c06 ActiveModel \u63d2\u5165\u5230 MockDatabase\n        assert_eq!(\n            apple.clone().insert(&db).await?,\n            cake::Model {\n                id: 15,\n                name: "Apple Pie".to_owned()\n            }\n        );\n\n        // \u5982\u679c\u60a8\u60f3\u68c0\u67e5\u6700\u540e\u63d2\u5165\u7684 ID\n        let insert_result = cake::Entity::insert(apple).exec(&db).await?;\n        assert_eq!(insert_result.last_insert_id, 16);\n\n        // \u68c0\u67e5\u4e8b\u52a1\u65e5\u5fd7\n        assert_eq!(\n            db.into_transaction_log(),\n            vec![\n                Transaction::from_sql_and_values(\n                    DatabaseBackend::Postgres,\n                    r#"INSERT INTO "cake" ("name") VALUES ($1) RETURNING "id", "name""#,\n                    vec!["Apple Pie".into()]\n                ),\n                Transaction::from_sql_and_values(\n                    DatabaseBackend::Postgres,\n                    r#"INSERT INTO "cake" ("name") VALUES ($1) RETURNING "id""#,\n                    vec!["Apple Pie".into()]\n                ),\n            ]\n        );\n\n        Ok(())\n    }\n}\n')))}u.isMDXComponent=!0}}]);