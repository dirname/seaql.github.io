"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[93988],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>_});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),o=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=o(n),y=r,_=c["".concat(l,".").concat(y)]||c[y]||p[y]||s;return n?a.createElement(_,m(m({ref:t},u),{},{components:n})):a.createElement(_,m({ref:t},u))}));function _(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,m=new Array(s);m[0]=y;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,m[1]=i;for(var o=2;o<s;o++)m[o]=n[o];return a.createElement.apply(null,m)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},82825:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>m,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>o});var a=n(58168),r=(n(96540),n(15680));const s={},m="\u521b\u5efa\u679a\u4e3e",i={unversionedId:"generate-sea-query-statement/create-enum",id:"version-0.10.x/generate-sea-query-statement/create-enum",title:"\u521b\u5efa\u679a\u4e3e",description:"\u60a8\u53ef\u4ee5\u901a\u8fc7 Schema \u8f85\u52a9\u7ed3\u6784\u751f\u6210\u7528\u4e8e\u521b\u5efa\u5305\u542b\u679a\u4e3e\u5217\u7684\u6570\u636e\u5e93\u8868\u7684 SQL \u8bed\u53e5\u3002",source:"@site/versioned_docs/version-0.10.x/09-generate-sea-query-statement/02-create-enum.md",sourceDirName:"09-generate-sea-query-statement",slug:"/generate-sea-query-statement/create-enum",permalink:"/SeaORM/docs/0.10.x/generate-sea-query-statement/create-enum",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.10.x/09-generate-sea-query-statement/02-create-enum.md",tags:[],version:"0.10.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1667313808,formattedLastUpdatedAt:"Nov 1, 2022",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u521b\u5efa\u8868",permalink:"/SeaORM/docs/0.10.x/generate-sea-query-statement/create-table"},next:{title:"\u521b\u5efa\u7d22\u5f15",permalink:"/SeaORM/docs/0.10.x/generate-sea-query-statement/create-index"}},l={},o=[{value:"\u5b57\u7b26\u4e32\u4e0e\u6574\u6570\u679a\u4e3e",id:"\u5b57\u7b26\u4e32\u4e0e\u6574\u6570\u679a\u4e3e",level:2},{value:"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e",id:"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e",level:2},{value:"PostgreSQL",id:"postgresql",level:3},{value:"MySQL",id:"mysql",level:3},{value:"SQLite",id:"sqlite",level:3}],u={toc:o},c="wrapper";function p(e){let{components:t,...n}=e;return(0,r.yg)(c,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"\u521b\u5efa\u679a\u4e3e"},"\u521b\u5efa\u679a\u4e3e"),(0,r.yg)("p",null,"\u60a8\u53ef\u4ee5\u901a\u8fc7 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/schema/struct.Schema.html"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema"))," \u8f85\u52a9\u7ed3\u6784\u751f\u6210\u7528\u4e8e\u521b\u5efa\u5305\u542b\u679a\u4e3e\u5217\u7684\u6570\u636e\u5e93\u8868\u7684 SQL \u8bed\u53e5\u3002"),(0,r.yg)("h2",{id:"\u5b57\u7b26\u4e32\u4e0e\u6574\u6570\u679a\u4e3e"},"\u5b57\u7b26\u4e32\u4e0e\u6574\u6570\u679a\u4e3e"),(0,r.yg)("p",null,"\u8fd9\u53ea\u662f\u4e00\u4e2a\u666e\u901a\u7684\u5b57\u7b26\u4e32/\u6574\u6570\u5217\uff0c\u6620\u5c04\u5230 Rust \u679a\u4e3e\u3002\u793a\u4f8b\u5b9e\u4f53\u5b9a\u4e49\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="active_enum.rs"',title:'"active_enum.rs"'},'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(schema_name = "public", table_name = "active_enum")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub category: Option<Category>,\n    pub color: Option<Color>,\n}\n\n#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "String(Some(1))")]\npub enum Category {\n    #[sea_orm(string_value = "B")]\n    Big,\n    #[sea_orm(string_value = "S")]\n    Small,\n}\n\n#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "i32", db_type = "Integer")]\npub enum Color {\n    #[sea_orm(num_value = 0)]\n    Black,\n    #[sea_orm(num_value = 1)]\n    White,\n}\n')),(0,r.yg)("p",null,"\u4f5c\u4e3a\u8bf4\u660e\uff0c\u679a\u4e3e\u53ea\u662f\u666e\u901a\u7684\u6570\u636e\u5e93\u5217\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"use sea_orm::{sea_query, Schema};\n\nlet builder = db.get_database_backend();\nlet schema = Schema::new(builder);\n\nassert_eq!(\n    builder.build(&schema.create_table_from_entity(active_enum::Entity)),\n    builder.build(\n        &sea_query::Table::create()\n            .table(active_enum::Entity.table_ref())\n            .col(\n                sea_query::ColumnDef::new(active_enum::Column::Id)\n                    .integer()\n                    .not_null()\n                    .auto_increment()\n                    .primary_key(),\n            )\n            .col(sea_query::ColumnDef::new(active_enum::Column::Category).string_len(1))\n            .col(sea_query::ColumnDef::new(active_enum::Column::Color).integer())\n            .to_owned()\n    )\n);\n")),(0,r.yg)("h2",{id:"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e"},"\u539f\u751f\u6570\u636e\u5e93\u679a\u4e3e"),(0,r.yg)("p",null,"\u4e0d\u540c\u6570\u636e\u5e93\u5bf9\u679a\u4e3e\u7684\u652f\u6301\u4e0d\u540c\u3002\u6211\u4eec\u9010\u4e00\u4ecb\u7ecd\u3002"),(0,r.yg)("p",null,"\u8003\u8651\u4ee5\u4e0b\u5b9e\u4f53\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="active_enum.rs"',title:'"active_enum.rs"'},'use sea_orm::entity::prelude::*;\n\n#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]\n#[sea_orm(schema_name = "public", table_name = "active_enum")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub id: i32,\n    pub tea: Option<Tea>,\n}\n\n#[derive(Debug, Clone, PartialEq, EnumIter, DeriveActiveEnum)]\n#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "tea")]\npub enum Tea {\n    #[sea_orm(string_value = "EverydayTea")]\n    EverydayTea,\n    #[sea_orm(string_value = "BreakfastTea")]\n    BreakfastTea,\n}\n')),(0,r.yg)("p",null,"\u8bf7\u6ce8\u610f ",(0,r.yg)("inlineCode",{parentName:"p"},"db_type")," \u548c\u989d\u5916\u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"enum_name")," \u5c5e\u6027\u3002"),(0,r.yg)("h3",{id:"postgresql"},"PostgreSQL"),(0,r.yg)("p",null,"\u5728 PostgreSQL \u4e2d\uff0c\u679a\u4e3e\u7531 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-query/*/sea_query/extension/postgres/struct.TypeCreateStatement.html"},(0,r.yg)("inlineCode",{parentName:"a"},"TypeCreateStatement"))," \u5b9a\u4e49\uff0c\u53ef\u4ee5\u901a\u8fc7 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/schema/struct.Schema.html#method.create_enum_from_entity"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema::create_enum_from_entity"))," \u65b9\u6cd5\u4ece\u5b9e\u4f53\u521b\u5efa\u3002"),(0,r.yg)("p",null,"\u60a8\u4e5f\u53ef\u4ee5\u901a\u8fc7 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/schema/struct.Schema.html#method.create_enum_from_active_enum"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema::create_enum_from_active_enum"))," \u65b9\u6cd5\u4ece ",(0,r.yg)("inlineCode",{parentName:"p"},"ActiveEnum")," \u521b\u5efa\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{Schema, Statement};\n\nlet db_postgres = DbBackend::Postgres;\nlet schema = Schema::new(db_postgres);\n\nassert_eq!(\n    schema\n        .create_enum_from_entity(active_enum::Entity)\n        .iter()\n        .map(|stmt| db_postgres.build(stmt))\n        .collect::<Vec<_>>(),\n    vec![Statement::from_string(\n        db_postgres,\n        r#"CREATE TYPE "tea" AS ENUM (\'EverydayTea\', \'BreakfastTea\')"#.to_owned()\n    ),]\n);\n\nassert_eq!(\n    db_postgres.build(&schema.create_enum_from_active_enum::<Tea>()),\n    Statement::from_string(\n        db_postgres,\n        r#"CREATE TYPE "tea" AS ENUM (\'EverydayTea\', \'BreakfastTea\')"#.to_owned()\n    )\n);\n\nassert_eq!(\n    db_postgres.build(&schema.create_table_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_postgres,\n        vec![\n            r#"CREATE TABLE "public"."active_enum" ("#,\n            r#""id" serial NOT NULL PRIMARY KEY,"#,\n            r#""tea" tea"#,\n            r#")"#,\n        ]\n        .join(" ")\n    ),\n);\n')),(0,r.yg)("h3",{id:"mysql"},"MySQL"),(0,r.yg)("p",null,"\u5728 MySQL \u4e2d\uff0c\u679a\u4e3e\u5728\u521b\u5efa\u8868\u65f6\u5b9a\u4e49\uff0c\u56e0\u6b64\u60a8\u53ea\u9700\u8c03\u7528\u4e00\u6b21 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-orm/*/sea_orm/schema/struct.Schema.html#method.create_table_from_entity"},(0,r.yg)("inlineCode",{parentName:"a"},"Schema::create_table_from_entity")),"\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{Schema, Statement};\n\nlet db_mysql = DbBackend::MySql;\nlet schema = Schema::new(db_mysql);\n\nassert_eq!(\n    db_mysql.build(&schema.create_table_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_mysql,\n        vec![\n            "CREATE TABLE `active_enum` (",\n            "`id` int NOT NULL AUTO_INCREMENT PRIMARY KEY,",\n            "`tea` ENUM(\'EverydayTea\', \'BreakfastTea\')",\n            ")",\n        ]\n        .join(" ")\n    ),\n);\n')),(0,r.yg)("h3",{id:"sqlite"},"SQLite"),(0,r.yg)("p",null,"SQLite \u4e0d\u652f\u6301\u679a\u4e3e\uff0c\u56e0\u6b64\u5c06\u5176\u5b58\u50a8\u4e3a ",(0,r.yg)("inlineCode",{parentName:"p"},"TEXT"),"\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{Schema, Statement};\n\nlet db_sqlite = DbBackend::Sqlite;\nlet schema = Schema::new(db_sqlite);\n\nassert_eq!(\n    db_sqlite.build(&schema.create_enum_from_entity(active_enum::Entity)),\n    Statement::from_string(\n        db_sqlite,\n        vec![\n            "CREATE TABLE `active_enum` (",\n            "`id` integer NOT NULL PRIMARY KEY AUTOINCREMENT,",\n            "`tea` text",\n            ")",\n        ]\n        .join(" ")\n    ),\n);\n')))}p.isMDXComponent=!0}}]);