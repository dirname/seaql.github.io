"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[86253],{15680:(e,n,t)=>{t.d(n,{xA:()=>s,yg:()=>f});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=u(t),y=o,f=d["".concat(c,".").concat(y)]||d[y]||p[y]||i;return t?r.createElement(f,a(a({ref:n},s),{},{components:t})):r.createElement(f,a({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=y;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},25569:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=t(58168),o=(t(96540),t(15680));const i={},a="\u81ea\u5b9a\u4e49\u8fde\u63a5",l={unversionedId:"advanced-query/custom-joins",id:"version-0.4.x/advanced-query/custom-joins",title:"\u81ea\u5b9a\u4e49\u8fde\u63a5",description:"\u60a8\u53ef\u4ee5\u4f7f\u7528 join \u65b9\u6cd5\u6784\u5efa\u590d\u6742\u7684\u8fde\u63a5\u9009\u62e9\u67e5\u8be2\u3002\u5b83\u63a5\u53d7\u5728\u5b9e\u4f53\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u4efb\u4f55 RelationDef\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 belongs_to \u65b9\u6cd5\u5b9a\u4e49\u5173\u7cfb\u3002\u8fde\u63a5\u7c7b\u578b\u901a\u8fc7 JoinType \u6307\u5b9a\uff0c\u4f8b\u5982\u5185\u8fde\u63a5\u3001\u5de6\u8fde\u63a5\u548c\u53f3\u8fde\u63a5\u3002",source:"@site/versioned_docs/version-0.4.x/08-advanced-query/04-custom-joins.md",sourceDirName:"08-advanced-query",slug:"/advanced-query/custom-joins",permalink:"/SeaORM/docs/0.4.x/advanced-query/custom-joins",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.4.x/08-advanced-query/04-custom-joins.md",tags:[],version:"0.4.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1640968085,formattedLastUpdatedAt:"Dec 31, 2021",sidebarPosition:4,frontMatter:{},sidebar:"version-0.4.x/tutorialSidebar",previous:{title:"\u805a\u5408\u51fd\u6570",permalink:"/SeaORM/docs/0.4.x/advanced-query/aggregate-function"},next:{title:"\u5b50\u67e5\u8be2",permalink:"/SeaORM/docs/0.4.x/advanced-query/subquery"}},c={},u=[],s={toc:u},d="wrapper";function p(e){let{components:n,...t}=e;return(0,o.yg)(d,(0,r.A)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"\u81ea\u5b9a\u4e49\u8fde\u63a5"},"\u81ea\u5b9a\u4e49\u8fde\u63a5"),(0,o.yg)("p",null,"\u60a8\u53ef\u4ee5\u4f7f\u7528 ",(0,o.yg)("inlineCode",{parentName:"p"},"join")," \u65b9\u6cd5\u6784\u5efa\u590d\u6742\u7684\u8fde\u63a5\u9009\u62e9\u67e5\u8be2\u3002\u5b83\u63a5\u53d7\u5728\u5b9e\u4f53\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u4efb\u4f55 ",(0,o.yg)("inlineCode",{parentName:"p"},"RelationDef"),"\uff0c\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 ",(0,o.yg)("inlineCode",{parentName:"p"},"belongs_to")," \u65b9\u6cd5\u5b9a\u4e49\u5173\u7cfb\u3002\u8fde\u63a5\u7c7b\u578b\u901a\u8fc7 ",(0,o.yg)("inlineCode",{parentName:"p"},"JoinType")," \u6307\u5b9a\uff0c\u4f8b\u5982\u5185\u8fde\u63a5\u3001\u5de6\u8fde\u63a5\u548c\u53f3\u8fde\u63a5\u3002"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{JoinType, RelationTrait};\nuse sea_query::Expr;\n\nassert_eq!(\n    cake::Entity::find()\n        .column_as(filling::Column::Id.count(), "count")\n        .join_rev(\n            // \u52a8\u6001\u6784\u9020 `RelationDef`\n            JoinType::InnerJoin,\n            cake_filling::Entity::belongs_to(cake::Entity)\n                .from(cake_filling::Column::CakeId)\n                .to(cake::Column::Id)\n                .into()\n        )\n        // \u590d\u7528\u73b0\u6709\u5b9e\u4f53\u7684 `Relation`\n        .join(JoinType::InnerJoin, cake_filling::Relation::Filling.def())\n        .group_by(cake::Column::Id)\n        .having(filling::Column::Id.count().equals(Expr::value(2)))\n        .build(DbBackend::MySql)\n        .to_string(),\n    [\n        "SELECT `cake`.`id`, `cake`.`name`, COUNT(`filling`.`id`) AS `count` FROM `cake`",\n        "INNER JOIN `cake_filling` ON `cake_filling`.`cake_id` = `cake`.`id`",\n        "INNER JOIN `filling` ON `cake_filling`.`filling_id` = `filling`.`id`",\n        "GROUP BY `cake`.`id`",\n        "HAVING COUNT(`filling`.`id`) = 2",\n    ]\n    .join(" ")\n);\n')))}p.isMDXComponent=!0}}]);