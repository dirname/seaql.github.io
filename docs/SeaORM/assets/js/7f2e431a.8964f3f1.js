"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[74630],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=a,y=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(y,i(i({ref:n},u),{},{components:t})):r.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1921:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=t(58168),a=(t(96540),t(15680));const o={},i="\u81ea\u5b9a\u4e49\u9009\u62e9",l={unversionedId:"advanced-query/custom-select",id:"version-0.4.x/advanced-query/custom-select",title:"\u81ea\u5b9a\u4e49\u9009\u62e9",description:"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSeaORM \u5c06\u9009\u62e9\u5728 Column \u679a\u4e3e\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u5217\u3002\u5982\u679c\u60a8\u5e0c\u671b\u8986\u76d6\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u8fdb\u884c\u66f4\u6539\u3002",source:"@site/versioned_docs/version-0.4.x/08-advanced-query/01-custom-select.md",sourceDirName:"08-advanced-query",slug:"/advanced-query/custom-select",permalink:"/SeaORM/docs/0.4.x/advanced-query/custom-select",draft:!1,editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/SeaORM/versioned_docs/version-0.4.x/08-advanced-query/01-custom-select.md",tags:[],version:"0.4.x",lastUpdatedBy:"Billy Chan",lastUpdatedAt:1640968085,formattedLastUpdatedAt:"Dec 31, 2021",sidebarPosition:1,frontMatter:{},sidebar:"version-0.4.x/tutorialSidebar",previous:{title:"\u4f7f\u7528 SQLite",permalink:"/SeaORM/docs/0.4.x/write-test/sqlite"},next:{title:"\u6761\u4ef6\u8868\u8fbe\u5f0f",permalink:"/SeaORM/docs/0.4.x/advanced-query/conditional-expression"}},c={},s=[{value:"\u6e05\u9664\u9ed8\u8ba4\u9009\u62e9",id:"\u6e05\u9664\u9ed8\u8ba4\u9009\u62e9",level:2},{value:"\u4ec5\u9009\u62e9\u67d0\u4e9b\u5c5e\u6027",id:"\u4ec5\u9009\u62e9\u67d0\u4e9b\u5c5e\u6027",level:2},{value:"\u9009\u62e9\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f",id:"\u9009\u62e9\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f",level:2},{value:"\u5904\u7406\u81ea\u5b9a\u4e49\u9009\u62e9",id:"\u5904\u7406\u81ea\u5b9a\u4e49\u9009\u62e9",level:2}],u={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"\u81ea\u5b9a\u4e49\u9009\u62e9"},"\u81ea\u5b9a\u4e49\u9009\u62e9"),(0,a.yg)("p",null,"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSeaORM \u5c06\u9009\u62e9\u5728 ",(0,a.yg)("inlineCode",{parentName:"p"},"Column")," \u679a\u4e3e\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u5217\u3002\u5982\u679c\u60a8\u5e0c\u671b\u8986\u76d6\u9ed8\u8ba4\u8bbe\u7f6e\uff0c\u53ef\u4ee5\u8fdb\u884c\u66f4\u6539\u3002"),(0,a.yg)("h2",{id:"\u6e05\u9664\u9ed8\u8ba4\u9009\u62e9"},"\u6e05\u9664\u9ed8\u8ba4\u9009\u62e9"),(0,a.yg)("p",null,"\u5982\u679c\u9700\u8981\uff0c\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},"select_only")," \u65b9\u6cd5\u6765\u6e05\u9664\u9ed8\u8ba4\u9009\u62e9\u3002\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5728\u6b64\u4e4b\u540e\u9009\u62e9\u4e00\u4e9b\u5c5e\u6027\u6216\u751a\u81f3\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'// \u9009\u62e9\u6240\u6709\u5217\nassert_eq!(\n    cake::Entity::find()\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."id", "cake"."name" FROM "cake""#\n);\n')),(0,a.yg)("h2",{id:"\u4ec5\u9009\u62e9\u67d0\u4e9b\u5c5e\u6027"},"\u4ec5\u9009\u62e9\u67d0\u4e9b\u5c5e\u6027"),(0,a.yg)("p",null,"\u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},"select_only")," \u548c ",(0,a.yg)("inlineCode",{parentName:"p"},"column")," \u65b9\u6cd5\u7ed3\u5408\u6765\u4ec5\u9009\u62e9\u60a8\u60f3\u8981\u7684\u5c5e\u6027\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'// \u4ec5\u9009\u62e9 name \u5217\nassert_eq!(\n    cake::Entity::find()\n        .select_only()\n        .column(cake::Column::Name)\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."name" FROM "cake""#\n);\n')),(0,a.yg)("h2",{id:"\u9009\u62e9\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f"},"\u9009\u62e9\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f"),(0,a.yg)("p",null,"\u4f7f\u7528 ",(0,a.yg)("inlineCode",{parentName:"p"},"column_as")," \u65b9\u6cd5\u9009\u62e9\u4efb\u4f55\u81ea\u5b9a\u4e49\u8868\u8fbe\u5f0f\uff0c\u5b83\u63a5\u53d7\u4efb\u4f55 ",(0,a.yg)("a",{parentName:"p",href:"https://docs.rs/sea-query/*/sea_query/expr/enum.SimpleExpr.html"},(0,a.yg)("inlineCode",{parentName:"a"},"sea_query::SimpleExpr"))," \u548c\u4e00\u4e2a\u522b\u540d\u3002\u4f7f\u7528 ",(0,a.yg)("a",{parentName:"p",href:"https://docs.rs/sea-query/*/sea_query/expr/struct.Expr.html"},(0,a.yg)("inlineCode",{parentName:"a"},"sea_query::Expr"))," \u8f85\u52a9\u5de5\u5177\u6765\u6784\u5efa ",(0,a.yg)("inlineCode",{parentName:"p"},"SimpleExpr"),"\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_query::{Alias, Expr};\n\nassert_eq!(\n    cake::Entity::find()\n        .column_as(Expr::col(cake::Column::Id).max().sub(Expr::col(cake::Column::Id)), "id_diff")\n        .column_as(Expr::cust("CURRENT_TIMESTAMP"), "current_time")\n        .build(DbBackend::Postgres)\n        .to_string(),\n    r#"SELECT "cake"."id", "cake"."name", MAX("id") - "id" AS "id_diff", CURRENT_TIMESTAMP AS "current_time" FROM "cake""#\n);\n')),(0,a.yg)("h2",{id:"\u5904\u7406\u81ea\u5b9a\u4e49\u9009\u62e9"},"\u5904\u7406\u81ea\u5b9a\u4e49\u9009\u62e9"),(0,a.yg)("p",null,"\u60a8\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49 ",(0,a.yg)("inlineCode",{parentName:"p"},"struct")," \u6765\u5904\u7406\u590d\u6742\u67e5\u8be2\u7684\u7ed3\u679c\uff0c\u8be5 ",(0,a.yg)("inlineCode",{parentName:"p"},"struct")," \u9700\u8981\u5b9e\u73b0 ",(0,a.yg)("inlineCode",{parentName:"p"},"FromQueryResult")," \u7279\u6027\u3002\u5f53\u5904\u7406\u81ea\u5b9a\u4e49\u5217\u6216\u591a\u4e2a\u8fde\u63a5\u65f6\uff0c\u8fd9\u7279\u522b\u6709\u7528\uff0c\u5b83\u4eec\u4e0d\u80fd\u76f4\u63a5\u8f6c\u6362\u4e3a\u6a21\u578b\u3002\u5b83\u53ef\u4ee5\u7528\u4e8e\u63a5\u6536\u4efb\u4f55\u67e5\u8be2\u7684\u7ed3\u679c\uff0c\u751a\u81f3\u662f\u539f\u59cb SQL\u3002"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::{FromQueryResult, JoinType, RelationTrait};\nuse sea_query::Expr;\n\n#[derive(FromQueryResult)]\nstruct CakeAndFillingCount {\n    id: i32,\n    name: String,\n    count: i32,\n}\n\nlet cake_counts: Vec<CakeAndFillingCount> = cake::Entity::find()\n    .column_as(filling::Column::Id.count(), "count")\n    .join_rev(\n        // \u52a8\u6001\u6784\u9020 `RelationDef`\n        JoinType::InnerJoin,\n        cake_filling::Entity::belongs_to(cake::Entity)\n            .from(cake_filling::Column::CakeId)\n            .to(cake::Column::Id)\n            .into()\n    )\n    // \u91cd\u7528\u73b0\u6709\u5b9e\u4f53\u7684 `Relation`\n    .join(JoinType::InnerJoin, cake_filling::Relation::Filling.def())\n    .group_by(cake::Column::Id)\n    .into_model::<CakeAndFillingCount>()\n    .all(db)\n    .await?;\n')))}d.isMDXComponent=!0}}]);