"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[5597],{5680:(e,a,t)=>{t.d(a,{xA:()=>g,yg:()=>d});var n=t(6540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=n.createContext({}),o=function(e){var a=n.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},g=function(e){var a=o(e.components);return n.createElement(p.Provider,{value:a},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,p=e.parentName,g=i(e,["components","mdxType","originalType","parentName"]),m=o(t),c=r,d=m["".concat(p,".").concat(c)]||m[c]||u[c]||s;return t?n.createElement(d,l(l({ref:a},g),{},{components:t})):n.createElement(d,l({ref:a},g))}));function d(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=c;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var o=2;o<s;o++)l[o]=t[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8014:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>o});var n=t(8168),r=(t(6540),t(5680));const s={slug:"2024-05-05-redis-kafka-data-sink",title:"\u6784\u5efa Redis / Kafka \u6570\u636e\u63a5\u6536\u5668",author:"Chris Tsang",author_title:"SeaQL\u56e2\u961f",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",image:"https://www.sea-ql.org/SeaStreamer/img/SeaStreamer%20banner.png",tags:["news"]},l=void 0,i={permalink:"/blog/2024-05-05-redis-kafka-data-sink",editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2024-05-05-redis-kafka-data-sink.md",source:"@site/blog/2024-05-05-redis-kafka-data-sink.md",title:"\u6784\u5efa Redis / Kafka \u6570\u636e\u63a5\u6536\u5668",description:"\u672c\u6559\u7a0b\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Rust \u6784\u5efa\u4e00\u4e2a\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\uff1a",date:"2024-05-05T00:00:00.000Z",formattedDate:"May 5, 2024",tags:[{label:"news",permalink:"/blog/tags/news"}],readingTime:7.565,hasTruncateMarker:!1,authors:[{name:"Chris Tsang",title:"SeaQL\u56e2\u961f",url:"https://github.com/tyt2y3",imageURL:"https://avatars.githubusercontent.com/u/1782664?v=4"}],frontMatter:{slug:"2024-05-05-redis-kafka-data-sink",title:"\u6784\u5efa Redis / Kafka \u6570\u636e\u63a5\u6536\u5668",author:"Chris Tsang",author_title:"SeaQL\u56e2\u961f",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",image:"https://www.sea-ql.org/SeaStreamer/img/SeaStreamer%20banner.png",tags:["news"]},prevItem:{title:"\u540c\u6b65\u4e0e\u5f02\u6b65 Rust \u4e4b\u95f4\u7684\u5f69\u8679\u6865",permalink:"/blog/2024-05-20-async-rainbow-bridge"},nextItem:{title:"SeaORM 1.0-rc.x \u4e2d\u7684\u65b0\u7279\u6027",permalink:"/blog/2024-04-08-whats-new-in-seaorm-1.0-rc.x"}},p={authorsImageUrls:[void 0]},o=[{value:"1. Websocket \u8ba2\u9605",id:"1-websocket-\u8ba2\u9605",level:2},{value:"2. Redis / Kafka \u6d41\u751f\u4ea7\u8005",id:"2-redis--kafka-\u6d41\u751f\u4ea7\u8005",level:2},{value:"3. SQL \u6570\u636e\u63a5\u6536\u5668",id:"3-sql-\u6570\u636e\u63a5\u6536\u5668",level:2},{value:"\u7ed3\u8bba",id:"\u7ed3\u8bba",level:2},{value:"Rustacean \u8d34\u7eb8\u5305 \ud83e\udd80",id:"rustacean-\u8d34\u7eb8\u5305-",level:2}],g={toc:o},m="wrapper";function u(e){let{components:a,...t}=e;return(0,r.yg)(m,(0,n.A)({},g,t,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("img",{src:"https://www.sea-ql.org/SeaStreamer/img/SeaStreamer%20banner.png"}),(0,r.yg)("p",null,"\u672c\u6559\u7a0b\u5c06\u5411\u60a8\u5c55\u793a\u5982\u4f55\u4f7f\u7528 Rust \u6784\u5efa\u4e00\u4e2a\u7cfb\u7edf\uff0c\u8be5\u7cfb\u7edf\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\uff1a"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"\u8ba2\u9605\u5b9e\u65f6 websocket \u6570\u636e\u6d41"),(0,r.yg)("li",{parentName:"ol"},"\u5c06\u6570\u636e\u6d41\u4f20\u8f93\u5230 Kafka / Redis"),(0,r.yg)("li",{parentName:"ol"},"\u5c06\u6570\u636e\u4fdd\u5b58\u5230 SQL \u6570\u636e\u5e93")),(0,r.yg)("p",null,"\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u91c7\u7528\u5fae\u670d\u52a1\u67b6\u6784\uff0c\u5e76\u5c06\u529f\u80fd\u62c6\u5206\u4e3a\u4e24\u4e2a\u5e94\u7528\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Websocket \u6570\u636e\u6d41    \u2502 ---\x3e   Redis / Kafka   ---\x3e \u2502 SQL \u6570\u636e\u63a5\u6536\u5668 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n")),(0,r.yg)("p",null,"\u5728\u6d41\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u901a\u5e38\u4f7f\u7528\u201c\u6e90\u201d\u548c\u201c\u63a5\u6536\u5668\u201d\u8fd9\u4e24\u4e2a\u672f\u8bed\uff0c\u4f46\u6570\u636e\u63a5\u6536\u5668\u53ea\u662f\u5c06\u6570\u636e\u6301\u4e45\u5316\u5230\u5b58\u50a8\u4e2d\u7684\u6d41\u6d88\u8d39\u8005\u3002"),(0,r.yg)("p",null,"\u5728\u6e90\u7aef\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer"},"SeaStreamer"),"\u3002\u5728\u63a5\u6536\u5668\u7aef\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-orm"},"SeaORM"),"\u3002\u4ee5\u4e0b\u662f\u652f\u6301\u7684\u6280\u672f\uff1b\u5728\u672c\u6587\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"Redis")," \u548c ",(0,r.yg)("inlineCode",{parentName:"p"},"SQLite"),"\uff0c\u56e0\u4e3a\u5b83\u4eec\u6613\u4e8e\u8bbe\u7f6e\u3002"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"SeaStreamer"),(0,r.yg)("th",{parentName:"tr",align:null},"SeaORM"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Kafka, Redis"),(0,r.yg)("td",{parentName:"tr",align:null},"MySQL, Postgres, SQLite, SQL Server",(0,r.yg)("sup",{parentName:"td",id:"fnref-1-e9d9cb"},(0,r.yg)("a",{parentName:"sup",href:"#fn-1-e9d9cb",className:"footnote-ref"},"1")))))),(0,r.yg)("p",null,"\u8981\u5f00\u59cb\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7 Docker \u5feb\u901f\u542f\u52a8\u4e00\u4e2a Redis \u5b9e\u4f8b\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"docker run -d --rm --name redis -p 6379:6379 redis\n")),(0,r.yg)("h2",{id:"1-websocket-\u8ba2\u9605"},"1. Websocket \u8ba2\u9605"),(0,r.yg)("p",null,"\u8ba9\u6211\u4eec\u5728 Rust \u4e2d\u7f16\u5199\u4e00\u4e2a websocket \u8ba2\u9605\u8005\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u5c06\u4f7f\u7528\u51fa\u8272\u7684 ",(0,r.yg)("a",{parentName:"p",href:"https://crates.io/crates/async-tungstenite"},"async-tungstenite")," \u5e93\u3002"),(0,r.yg)("p",null,"\u6211\u4eec\u5c06\u8ba2\u9605 Kraken \u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"GBP/USD")," \u6c47\u7387\u6570\u636e\u6d41\uff0cAPI \u6587\u6863\u53ef\u4ee5\u5728 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.kraken.com/websockets/#message-spread"},"\u8fd9\u91cc")," \u627e\u5230\u3002\u6ce8\u610f\uff1a\u8fd9\u4e9b\u6570\u636e\u5e76\u4e0d\u662f\u771f\u5b9e\u7684\u5916\u6c47\u6570\u636e\uff0c\u4f46\u5e94\u8be5\u8db3\u591f\u7528\u4e8e\u6f14\u793a\u3002"),(0,r.yg)("p",null,"\u6b65\u9aa4 1\uff0c\u521b\u5efa\u4e00\u4e2a websocket \u8fde\u63a5\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let (mut ws, _) = async_tungstenite::tokio::connect_async("wss://ws.kraken.com/").await?;\n')),(0,r.yg)("p",null,"\u6b65\u9aa4 2\uff0c\u53d1\u9001\u8ba2\u9605\u8bf7\u6c42\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'ws.send(Message::Text(\n    r#"{ "event": "subscribe", "pair": ["GBP/USD"], "subscription": { "name": "spread" } }"#.to_owned(),\n)).await?;\n')),(0,r.yg)("p",null,"\u6b65\u9aa4 3\uff0c\u6d41\u5904\u7406\u6d88\u606f\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'loop {\n    match ws.next().await {\n        Some(Ok(Message::Text(data))) => {\n            if data == r#"{"event":"heartbeat"}"# {\n                continue; // \u8df3\u8fc7\u5fc3\u8df3\u4e8b\u4ef6\n            }\n            println!("{data}");\n        }\n        Some(Err(e)) => bail!("Socket error: {e}"),\n        None => bail!("Stream ended"),\n        e => bail!("Unexpected message {e:?}"),\n    }\n}\n')),(0,r.yg)("h2",{id:"2-redis--kafka-\u6d41\u751f\u4ea7\u8005"},"2. Redis / Kafka \u6d41\u751f\u4ea7\u8005"),(0,r.yg)("p",null,"\u6b65\u9aa4 1\uff0c\u521b\u5efa\u4e00\u4e2a\u8fde\u63a5\u5230 Redis / Kafka \u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"SeaStreamer")," \u5b9e\u4f8b\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let streamer = SeaStreamer::connect(\n        "redis://localhost", SeaConnectOptions::default()\n    ).await?;\n')),(0,r.yg)("p",null,"Redis \u548c Kafka \u5404\u81ea\u6709\u5f88\u591a\u4e0d\u540c\u7684\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003 SeaStreamer \u7684 ",(0,r.yg)("a",{parentName:"p",href:"https://www.sea-ql.org/SeaStreamer/"},"\u6587\u6863"),"\u3002"),(0,r.yg)("p",null,"\u6b65\u9aa4 2\uff0c\u521b\u5efa\u751f\u4ea7\u8005\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let producer: SeaProducer = streamer\n    .create_producer(\n        "GBP_USD".parse()?, // \u6d41\u952e\n        Default::default(),  // \u751f\u4ea7\u8005\u9009\u9879\n    )\n    .await?;\n')),(0,r.yg)("p",null,"\u751f\u4ea7\u8005\u6ca1\u6709\u7279\u5b9a\u7684\u9009\u9879\u3002"),(0,r.yg)("p",null,"\u6b65\u9aa4 3\uff0c\u89e3\u7801\u6d88\u606f\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"let spread: SpreadMessage = serde_json::from_str(&data)?;\nlet message = serde_json::to_string(&spread)?;\n")),(0,r.yg)("p",null,"\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u4f7f\u7528\u51fa\u8272\u7684 ",(0,r.yg)("a",{parentName:"p",href:"https://crates.io/crates/serde"},(0,r.yg)("inlineCode",{parentName:"a"},"serde"))," \u5e93\u6765\u8fdb\u884c\u6d88\u606f\u89e3\u6790\u548c\u8f6c\u6362\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'// \u539f\u59cb\u6d88\u606f\u683c\u5f0f\u4e3a: [80478222,["1.25475","1.25489","1714946803.030088","949.74917071","223.36195920"],"spread","GBP/USD"]\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct SpreadMessage {\n    #[allow(dead_code)]\n    #[serde(skip_serializing)]\n    channel_id: u32, // \u5360\u4f4d\u7b26; \u4e0d\u9700\u8981\n    spread: Spread, // \u5d4c\u5957\u5bf9\u8c61\n    channel_name: String,\n    pair: String,\n}\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Spread {\n    bid: Decimal,\n    ask: Decimal,\n    #[serde(with = "timestamp_serde")] // \u81ea\u5b9a\u4e49\u5e8f\u5217\u5316\n    timestamp: Timestamp,\n    bid_vol: Decimal,\n    ask_vol: Decimal,\n}\n')),(0,r.yg)("p",null,"\u6b65\u9aa4 4\uff0c\u53d1\u9001\u6d88\u606f\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"loop {\n    match ws.next().await {\n        Some(Ok(Message::Text(data))) => {\n            let spread: SpreadMessage = serde_json::from_str(&data)?;\n            let message = serde_json::to_string(&spread)?;\n            producer.send(message)?; // <--\n        }\n    }\n}\n")),(0,r.yg)("p",null,"\u8bf7\u6ce8\u610f\uff0c",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-streamer/latest/sea_streamer/trait.Producer.html#method.send"},(0,r.yg)("inlineCode",{parentName:"a"},"producer.send"))," \u8c03\u7528\u4e0d\u662f ",(0,r.yg)("inlineCode",{parentName:"p"},"async/await"),"\uff0c\u8fd9\u662f\u4e00\u4e2a\u5173\u952e\u7ec6\u8282\uff01\u8fd9\u6d88\u9664\u4e86\u6d41\u5904\u7406\u74f6\u9888\u3002\u5728\u5e55\u540e\uff0c\u6d88\u606f\u5c06\u88ab\u7f13\u51b2\u5e76\u5728\u4e0d\u540c\u7684\u7ebf\u7a0b\u4e2d\u5904\u7406\uff0c\u8fd9\u6837\u60a8\u7684\u8f93\u5165\u6d41\u53ef\u4ee5\u5c3d\u53ef\u80fd\u63a5\u8fd1\u5b9e\u65f6\u8fd0\u884c\u3002"),(0,r.yg)("p",null,"\u4ee5\u4e0b\u662f\u5b8c\u6574\u7684 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer/tree/main/examples/price-feed"},(0,r.yg)("inlineCode",{parentName:"a"},"price-feed"))," \u5e94\u7528\uff0c\u60a8\u53ef\u4ee5\u4ece SeaStreamer \u4ed3\u5e93\u4e2d\u67e5\u770b\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-log"},'$ cd examples/price-feed\n$ cargo run\n\nConnecting ..\nConnected.\nSubscribed.\n{"spread":{"bid":"1.25495","ask":"1.25513","timestamp":"2024-05-05T16:31:00.961214","bid_vol":"61.50588918","ask_vol":"787.90883861"},"channel_name":"spread","pair":"GBP/USD"}\n..\n')),(0,r.yg)("h2",{id:"3-sql-\u6570\u636e\u63a5\u6536\u5668"},"3. SQL \u6570\u636e\u63a5\u6536\u5668"),(0,r.yg)("p",null,"\u6b65\u9aa4 1\uff0c\u521b\u5efa\u4e00\u4e2a\u6d41\u6d88\u8d39\u8005\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"let streamer = SeaStreamer::connect(streamer_uri, Default::default()).await?;\n\nlet consumer = streamer\n    .create_consumer(&[stream_key], SeaConsumerOptions::default())\n    .await?;\n")),(0,r.yg)("p",null,"Redis \u548c Kafka \u5404\u81ea\u6709\u5f88\u591a\u4e0d\u540c\u7684\u9009\u9879\uff0c\u60a8\u53ef\u4ee5\u53c2\u8003 SeaStreamer \u7684 ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer/tree/main/examples/"},"\u793a\u4f8b"),"\u3002\u5728\u8fd9\u91cc\u6211\u4eec\u4f7f\u7528\u9ed8\u8ba4\u9009\u9879\uff0c\u5373\u4e00\u4e2a\u5b9e\u65f6\u65e0\u72b6\u6001\u6d41\u6d88\u8d39\u8005\u3002"),(0,r.yg)("p",null,"\u6b65\u9aa4 2\uff0c\u521b\u5efa\u6570\u636e\u5e93\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'let mut opt = ConnectOptions::new("sqlite://my_db.sqlite?mode=rwc"));\nopt.max_connections(1).sqlx_logging(false);\nlet db = Database::connect(opt).await?;\n')),(0,r.yg)("p",null,"\u6211\u4eec\u5c06 ",(0,r.yg)("inlineCode",{parentName:"p"},"max_connections")," \u8bbe\u7f6e\u4e3a ",(0,r.yg)("inlineCode",{parentName:"p"},"1"),"\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u6570\u636e\u63a5\u6536\u5668\u4e0d\u9700\u8981\u5e76\u53d1\u63d2\u5165\u3002"),(0,r.yg)("p",null,"\u4ee5\u4e0b\u662f ",(0,r.yg)("inlineCode",{parentName:"p"},"Entity"),"\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'#[derive(Debug, Clone, PartialEq, Eq, DeriveEntityModel, Deserialize)]\n#[sea_orm(table_name = "event")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    #[serde(default)]\n    pub id: i32,\n    pub timestamp: String,\n    pub bid: String,\n    pub ask: String,\n    pub bid_vol: String,\n    pub ask_vol: String,\n}\n')),(0,r.yg)("p",null,"\u8be5\u8868\u5c06\u547d\u540d\u4e3a ",(0,r.yg)("inlineCode",{parentName:"p"},"event"),"\uff0c\u5e76\u4e14\u6211\u4eec\u5728\u6a21\u578b\u4e0a\u6d3e\u751f ",(0,r.yg)("inlineCode",{parentName:"p"},"Deserialize"),"\u3002"),(0,r.yg)("p",null,"\u6211\u4eec\u5c06\u4f7f\u7528\u4ee5\u4e0b\u8f85\u52a9\u65b9\u6cd5\u521b\u5efa\u6570\u636e\u5e93\u8868\uff0c\u5176\u4e2d\u67b6\u6784\u662f\u4ece\u5b9e\u4f53\u6d3e\u751f\u7684\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'async fn create_tables(db: &DbConn) -> Result<(), DbErr> {\n    let builder = db.get_database_backend();\n    let schema = Schema::new(builder);\n\n    let stmt = builder.build(\n        schema.create_table_from_entity(Entity).if_not_exists(),\n    );\n    log::info!("{stmt}");\n    db.execute(stmt).await?;\n\n    Ok(())\n}\n')),(0,r.yg)("p",null,"\u8fd9\u5bf9\u4e8e SQLite \u7279\u522b\u65b9\u4fbf\uff0c\u56e0\u4e3a\u5e94\u7528\u7a0b\u5e8f\u62e5\u6709\u6570\u636e\u5e93\u67b6\u6784\u3002\u5bf9\u4e8e\u5176\u4ed6\u6570\u636e\u5e93\uff0c\u60a8\u53ef\u80fd\u4f1a\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://www.sea-ql.org/SeaORM/docs/next/migration/setting-up-migration/"},"SeaORM \u8fc1\u79fb\u7cfb\u7edf"),"\u3002"),(0,r.yg)("p",null,"\u6b65\u9aa4 3\uff0c\u5c06\u6570\u636e\u63d2\u5165\u6570\u636e\u5e93\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"loop {\n    let message = consumer.next().await?;\n    let payload = message.message();\n    let json = payload.as_str()?;\n    let item: Item = serde_json::from_str(json)?;\n    let mut spread = item.spread.into_active_model();\n    spread.id = NotSet; // \u8ba9\u6570\u636e\u5e93\u5206\u914d\u4e3b\u952e\n    spread.save(&db).await?;\n}\n")),(0,r.yg)("p",null,"\u5728\u51e0\u884c\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\uff1a"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"\u4ece Redis \u63a5\u6536\u6d88\u606f"),(0,r.yg)("li",{parentName:"ol"},"\u5c06\u6d88\u606f\u89e3\u7801\u4e3a JSON"),(0,r.yg)("li",{parentName:"ol"},"\u5c06\u6d88\u606f\u8f6c\u6362\u4e3a SeaORM \u6a21\u578b"),(0,r.yg)("li",{parentName:"ol"},"\u5c06\u6a21\u578b\u63d2\u5165\u6570\u636e\u5e93")),(0,r.yg)("p",null,"\u5728\u53e6\u4e00\u4e2a\u7ec8\u7aef\u4e2d\u8fd0\u884c ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer/tree/main/examples/sea-orm-sink"},(0,r.yg)("inlineCode",{parentName:"a"},"sea-orm-sink"))," \u5e94\u7528\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-log"},'$ cd examples/sea-orm-sink\n$ RUST_LOG=info cargo run\n\n[INFO  sea_streamer_sea_orm_sink] CREATE TABLE IF NOT EXISTS "event" ( "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "timestamp" varchar NOT NULL, "bid" varchar NOT NULL, "ask" varchar NOT NULL, "bid_vol" varchar NOT NULL, "ask_vol" varchar NOT NULL )\n[INFO  sea_streamer_sea_orm_sink] {"spread":{"bid":"1.25495","ask":"1.25513","timestamp":"2024-05-05T16:31:00.961214","bid_vol":"61.50588918","ask_vol":"787.90883861"},"channel_name":"spread","pair":"GBP/USD"}\n')),(0,r.yg)("p",null,"\u5c31\u662f\u8fd9\u6837\uff01\u73b0\u5728\u60a8\u53ef\u4ee5\u4f7f\u7528\u60a8\u559c\u6b22\u7684\u6570\u636e\u5e93 GUI \u68c0\u67e5\u6570\u636e\uff0c\u5e76\u7f16\u5199\u4e00\u4e9b SQL \u67e5\u8be2\uff1a"),(0,r.yg)("img",{alt:"screenshot of SQLite database",src:"/blog/img/2024-05-05-redis-kafka-data-sink-sqlite.png"}),(0,r.yg)("h2",{id:"\u7ed3\u8bba"},"\u7ed3\u8bba"),(0,r.yg)("p",null,"\u5728\u672c\u6587\u4e2d\uff0c\u6211\u4eec\u6db5\u76d6\u4e86\uff1a"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"\u6d41\u5904\u7406\u4e2d\u7684\u5fae\u670d\u52a1\u67b6\u6784"),(0,r.yg)("li",{parentName:"ol"},"Rust \u4e2d\u7684\u5f02\u6b65\u5b9e\u65f6\u7f16\u7a0b"),(0,r.yg)("li",{parentName:"ol"},"SeaQL \u548c Rust \u751f\u6001\u7cfb\u7edf\u7684\u5f3a\u5927",(0,r.yg)("sup",{parentName:"li",id:"fnref-2-e9d9cb"},(0,r.yg)("a",{parentName:"sup",href:"#fn-2-e9d9cb",className:"footnote-ref"},"2")))),(0,r.yg)("p",null,"\u4ee5\u4e0b\u662f\u4e00\u4e9b\u5efa\u8bae\uff0c\u60a8\u53ef\u4ee5\u5728\u6b64\u57fa\u7840\u4e0a\u8fdb\u4e00\u6b65\u62d3\u5c55\uff1a"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"\u5c06\u6570\u636e\u6d41\u5411 MySQL \u6216 Postgres \u7b49\u201c\u5927\u578b\u6570\u636e\u5e93\u201d"),(0,r.yg)("li",{parentName:"ol"},"\u8ba2\u9605\u66f4\u591a\u6d41\u5e76\u63a5\u6536\u81f3\u66f4\u591a\u8868"),(0,r.yg)("li",{parentName:"ol"},"\u7f13\u51b2\u4e8b\u4ef6\u5e76\u6279\u91cf\u63d2\u5165\u6570\u636e\u4ee5\u63d0\u9ad8\u541e\u5410\u91cf\uff0c\u8fdb\u4e00\u6b65\u9605\u8bfb\uff1a",(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/buffered.rs"},"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/buffered.rs")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/indexer/src/main.rs"},"https://github.com/SeaQL/FireDBG.for.Rust/blob/main/indexer/src/main.rs"))))),(0,r.yg)("h2",{id:"rustacean-\u8d34\u7eb8\u5305-"},"Rustacean \u8d34\u7eb8\u5305 \ud83e\udd80"),(0,r.yg)("p",null,"Rustacean \u8d34\u7eb8\u5305\u662f\u8868\u8fbe\u60a8\u5bf9 Rust \u70ed\u7231\u7684\u5b8c\u7f8e\u65b9\u5f0f\u3002\n\u6211\u4eec\u7684\u8d34\u7eb8\u91c7\u7528\u4f18\u8d28\u9632\u6c34\u4e59\u70ef\u57fa\u5236\u6210\uff0c\u5177\u6709\u72ec\u7279\u7684\u54d1\u5149\u6548\u679c\u3002\n\u5c06\u5b83\u4eec\u8d34\u5728\u60a8\u7684\u7b14\u8bb0\u672c\u7535\u8111\u3001\u7b14\u8bb0\u672c\u6216\u4efb\u4f55\u8bbe\u5907\u4e0a\uff0c\u5c55\u793a\u60a8\u5bf9 Rust \u7684\u70ed\u7231\uff01"),(0,r.yg)("p",null,"\u6b64\u5916\uff0c\u6240\u6709\u6536\u76ca\u76f4\u63a5\u7528\u4e8e SeaQL \u9879\u76ee\u7684\u6301\u7eed\u5f00\u53d1\u3002"),(0,r.yg)("p",null,"\u8d34\u7eb8\u5305\u5185\u5bb9\uff1a"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"SeaQL \u9879\u76ee\u7684\u6807\u5fd7\uff1aSeaQL, SeaORM, SeaQuery, Seaography, FireDBG"),(0,r.yg)("li",{parentName:"ul"},"SeaQL \u7684\u5409\u7965\u7269\uff1aTerres the Hermit Crab"),(0,r.yg)("li",{parentName:"ul"},"Rust \u7684\u5409\u7965\u7269\uff1aFerris the Crab"),(0,r.yg)("li",{parentName:"ul"},"Rustacean \u5b57\u6837")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"https://www.sea-ql.org/sticker-pack/"},"\u652f\u6301 SeaQL \u5e76\u83b7\u5f97\u8d34\u7eb8\u5305\uff01")),(0,r.yg)("a",{href:"https://www.sea-ql.org/sticker-pack/"},(0,r.yg)("img",{style:{borderRadius:"25px"},alt:"Rustacean Sticker Pack by SeaQL",src:"https://www.sea-ql.org/static/sticker-pack-1s.jpg"})),(0,r.yg)("div",{className:"footnotes"},(0,r.yg)("hr",{parentName:"div"}),(0,r.yg)("ol",{parentName:"div"},(0,r.yg)("li",{parentName:"ol",id:"fn-1-e9d9cb"},"via ",(0,r.yg)("a",{parentName:"li",href:"https://www.sea-ql.org/SeaORM-X/"},"SeaORM X"),(0,r.yg)("a",{parentName:"li",href:"#fnref-1-e9d9cb",className:"footnote-backref"},"\u21a9")),(0,r.yg)("li",{parentName:"ol",id:"fn-2-e9d9cb"},(0,r.yg)("a",{parentName:"li",href:"https://www.sea-ql.org/SeaStreamer/docs/introduction/intro-to-streams/#why-rust"},"Why Rust?"),(0,r.yg)("a",{parentName:"li",href:"#fnref-2-e9d9cb",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0}}]);