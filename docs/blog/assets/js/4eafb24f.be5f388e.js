"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[2645],{5680:(e,a,n)=>{n.d(a,{xA:()=>g,yg:()=>c});var t=n(6540);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function p(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),i=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},g=function(e){var a=i(e.components);return t.createElement(s.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},y=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,g=p(e,["components","mdxType","originalType","parentName"]),u=i(n),y=r,c=u["".concat(s,".").concat(y)]||u[y]||m[y]||o;return n?t.createElement(c,l(l({ref:a},g),{},{components:n})):t.createElement(c,l({ref:a},g))}));function c(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=y;var p={};for(var s in a)hasOwnProperty.call(a,s)&&(p[s]=a[s]);p.originalType=e,p[u]="string"==typeof e?e:r,l[1]=p;for(var i=2;i<o;i++)l[i]=n[i];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}y.displayName="MDXCreateElement"},9744:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>i});var t=n(8168),r=(n(6540),n(5680));const o={slug:"2022-12-02-whats-new-in-seaography-0.3.0",title:"Seaography 0.3.0 \u7684\u65b0\u7279\u6027",author:"SeaQL Team",author_title:"Panagiotis Karatakis",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/SeaORM/img/SeaQL.png",tags:["news"]},l=void 0,p={permalink:"/blog/2022-12-02-whats-new-in-seaography-0.3.0",editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2022-12-02-whats-new-in-seaography-0.3.0.md",source:"@site/blog/2022-12-02-whats-new-in-seaography-0.3.0.md",title:"Seaography 0.3.0 \u7684\u65b0\u7279\u6027",description:"\ud83c\udf89 \u6211\u4eec\u5f88\u9ad8\u5174\u53d1\u5e03 Seaography 0.3.0! \u8fd9\u91cc\u6709\u4e00\u4e9b\u529f\u80fd\u4eae\u70b9 \ud83c\udf1f:",date:"2022-12-02T00:00:00.000Z",formattedDate:"December 2, 2022",tags:[{label:"news",permalink:"/blog/tags/news"}],readingTime:3.975,hasTruncateMarker:!1,authors:[{name:"SeaQL Team",title:"Panagiotis Karatakis",url:"https://github.com/SeaQL",imageURL:"https://www.sea-ql.org/SeaORM/img/SeaQL.png"}],frontMatter:{slug:"2022-12-02-whats-new-in-seaography-0.3.0",title:"Seaography 0.3.0 \u7684\u65b0\u7279\u6027",author:"SeaQL Team",author_title:"Panagiotis Karatakis",author_url:"https://github.com/SeaQL",author_image_url:"https://www.sea-ql.org/SeaORM/img/SeaQL.png",tags:["news"]},prevItem:{title:"SeaQuery 0.28.0 \u65b0\u7279\u6027",permalink:"/blog/2022-12-30-whats-new-in-seaquery-0.28.0"},nextItem:{title:"SeaORM 0.10.x \u7684\u65b0\u7279\u6027",permalink:"/blog/2022-11-10-whats-new-in-0.10.x"}},s={authorsImageUrls:[void 0]},i=[{value:"\u4f9d\u8d56\u5347\u7ea7",id:"\u4f9d\u8d56\u5347\u7ea7",level:2},{value:"\u652f\u6301\u81ea\u5f15\u7528\u5173\u7cfb",id:"\u652f\u6301\u81ea\u5f15\u7528\u5173\u7cfb",level:2},{value:"Web \u6846\u67b6\u751f\u6210\u5668",id:"web-\u6846\u67b6\u751f\u6210\u5668",level:2},{value:"CLI \u751f\u6210\u5668\u9009\u9879",id:"cli-\u751f\u6210\u5668\u9009\u9879",level:3},{value:"Actix",id:"actix",level:3},{value:"Poem",id:"poem",level:3},{value:"\u76f8\u5173\u67e5\u8be2\u589e\u5f3a",id:"\u76f8\u5173\u67e5\u8be2\u589e\u5f3a",level:2},{value:"\u96c6\u6210\u793a\u4f8b",id:"\u96c6\u6210\u793a\u4f8b",level:2},{value:"\u793e\u533a",id:"\u793e\u533a",level:2}],g={toc:i},u="wrapper";function m(e){let{components:a,...n}=e;return(0,r.yg)(u,(0,t.A)({},g,n,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"\ud83c\udf89 \u6211\u4eec\u5f88\u9ad8\u5174\u53d1\u5e03 Seaography ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/seaography/releases/tag/0.3.0"},(0,r.yg)("inlineCode",{parentName:"a"},"0.3.0")),"! \u8fd9\u91cc\u6709\u4e00\u4e9b\u529f\u80fd\u4eae\u70b9 \ud83c\udf1f:"),(0,r.yg)("h2",{id:"\u4f9d\u8d56\u5347\u7ea7"},"\u4f9d\u8d56\u5347\u7ea7"),(0,r.yg)("p",null,"[",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/seaography/pull/93"},"#93"),"] \u6211\u4eec\u5347\u7ea7\u4e86\u4e00\u4e2a\u4e3b\u8981\u7684\u4f9d\u8d56:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"\u5c06 ",(0,r.yg)("a",{parentName:"li",href:"https://github.com/SeaQL/sea-orm"},(0,r.yg)("inlineCode",{parentName:"a"},"sea-orm"))," \u5347\u7ea7\u5230 0.10")),(0,r.yg)("p",null,"\u60a8\u53ef\u80fd\u4e5f\u9700\u8981\u5728\u60a8\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5347\u7ea7\u76f8\u5e94\u7684\u4f9d\u8d56\u3002"),(0,r.yg)("h2",{id:"\u652f\u6301\u81ea\u5f15\u7528\u5173\u7cfb"},"\u652f\u6301\u81ea\u5f15\u7528\u5173\u7cfb"),(0,r.yg)("p",null,"[",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/seaography/pull/99"},"#99"),"] \u73b0\u5728\u60a8\u53ef\u4ee5\u67e5\u8be2\u81ea\u5f15\u7528\u6a21\u578b\u53ca\u5176\u9006\u5411\u5173\u7cfb\u3002"),(0,r.yg)("p",null,"\u81ea\u5f15\u7528\u5173\u7cfb\u5e94\u6dfb\u52a0\u5230 ",(0,r.yg)("inlineCode",{parentName:"p"},"Relation")," \u679a\u4e3e\u4e2d\uff0c\u6ce8\u610f ",(0,r.yg)("inlineCode",{parentName:"p"},"belongs_to")," \u5c5e\u6027\u5fc5\u987b\u662f ",(0,r.yg)("inlineCode",{parentName:"p"},'belongs_to = "Entity"'),"\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use sea_orm::entity::prelude::*;\n\n#[derive(\n    Clone, Debug, PartialEq, DeriveEntityModel,\n    async_graphql::SimpleObject, seaography::macros::Filter,\n)]\n#[sea_orm(table_name = "staff")]\n#[graphql(complex)]\n#[graphql(name = "Staff")]\npub struct Model {\n    #[sea_orm(primary_key)]\n    pub staff_id: i32,\n    pub first_name: String,\n    pub last_name: String,\n    pub reports_to_id: Option<i32>,\n}\n\n#[derive(\n    Copy, Clone, Debug, EnumIter, DeriveRelation,\n    seaography::macros::RelationsCompact\n)]\npub enum Relation {\n    #[sea_orm(\n        belongs_to = "Entity",\n        from = "Column::ReportsToId",\n        to = "Column::StaffId",\n    )]\n    SelfRef,\n}\n\nimpl ActiveModelBehavior for ActiveModel {}\n')),(0,r.yg)("p",null,"\u7136\u540e\uff0c\u60a8\u53ef\u4ee5\u5728 GraphQL \u4e2d\u67e5\u8be2\u76f8\u5173\u6a21\u578b\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},"{\n    staff {\n        nodes {\n            firstName\n            reportsToId\n            selfRefReverse {\n                staffId\n                firstName\n            }\n            selfRef {\n                staffId\n                firstName\n            }\n        }\n    }\n}\n")),(0,r.yg)("p",null,"\u8fd4\u56de\u7684 JSON"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n    "staff": {\n        "nodes": [\n            {\n                "firstName": "Mike",\n                "reportsToId": null,\n                "selfRefReverse": [\n                    {\n                        "staffId": 2,\n                        "firstName": "Jon"\n                    }\n                ],\n                "selfRef": null\n            },\n            {\n                "firstName": "Jon",\n                "reportsToId": 1,\n                "selfRefReverse": null,\n                "selfRef": {\n                    "staffId": 1,\n                    "firstName": "Mike"\n                }\n            }\n        ]\n    }\n}\n')),(0,r.yg)("h2",{id:"web-\u6846\u67b6\u751f\u6210\u5668"},"Web \u6846\u67b6\u751f\u6210\u5668"),(0,r.yg)("p",null,"[",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/seaography/pull/74"},"#74"),"] \u73b0\u5728\u60a8\u53ef\u4ee5\u4f7f\u7528 Actix \u6216 Poem \u4f5c\u4e3a Web \u670d\u52a1\u5668\u6765\u751f\u6210 ",(0,r.yg)("inlineCode",{parentName:"p"},"seaography")," \u9879\u76ee\u3002"),(0,r.yg)("h3",{id:"cli-\u751f\u6210\u5668\u9009\u9879"},"CLI \u751f\u6210\u5668\u9009\u9879"),(0,r.yg)("p",null,"\u8fd0\u884c ",(0,r.yg)("inlineCode",{parentName:"p"},"seaography-cli")," \u4ee5\u4f7f\u7528 Actix \u6216 Poem \u4f5c\u4e3a Web \u6846\u67b6\u751f\u6210 ",(0,r.yg)("inlineCode",{parentName:"p"},"seaography")," \u4ee3\u7801\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"# \u8be5\u547d\u4ee4\u9700\u8981\u4e09\u4e2a\u53c2\u6570\uff0c\u9ed8\u8ba4\u751f\u6210\u9879\u76ee\u65f6\u4f7f\u7528 Poem web \u6846\u67b6\nseaography-cli <DATABASE_URL> <CRATE_NAME> <DESTINATION>\n\n# \u4f7f\u7528 Actix web \u6846\u67b6\u751f\u6210\u9879\u76ee\nseaography-cli -f actix <DATABASE_URL> <CRATE_NAME> <DESTINATION>\n\n# MySQL\nseaography-cli mysql://root:root@localhost/sakila seaography-mysql-example examples/mysql\n# PostgreSQL\nseaography-cli postgres://root:root@localhost/sakila seaography-postgres-example examples/postgres\n# SQLite\nseaography-cli sqlite://examples/sqlite/sakila.db seaography-sqlite-example examples/sqliteql\n")),(0,r.yg)("h3",{id:"actix"},"Actix"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use async_graphql::{\n    dataloader::DataLoader,\n    http::{playground_source, GraphQLPlaygroundConfig},\n    EmptyMutation, EmptySubscription, Schema,\n};\nuse async_graphql_actix_web::{GraphQLRequest, GraphQLResponse};\nuse sea_orm::Database;\nuse seaography_example_project::*;\n// ...\n\nasync fn graphql_playground() -> Result<HttpResponse> {\n    Ok(HttpResponse::Ok()\n        .content_type("text/html; charset=utf-8")\n        .body(\n            playground_source(GraphQLPlaygroundConfig::new("http://localhost:8000"))\n        ))\n}\n\n#[actix_web::main]\nasync fn main() -> std::io::Result<()> {\n    // ...\n\n    let database = Database::connect(db_url).await.unwrap();\n    let orm_dataloader: DataLoader<OrmDataloader> = DataLoader::new(\n        OrmDataloader {\n            db: database.clone(),\n        },\n        tokio::spawn,\n    );\n\n    let schema = Schema::build(QueryRoot, EmptyMutation, EmptySubscription)\n        .data(database)\n        .data(orm_dataloader)\n        .finish();\n\n    let app = App::new()\n        .app_data(Data::new(schema.clone()))\n        .service(web::resource("/").guard(guard::Post()).to(index))\n        .service(web::resource("/").guard(guard::Get()).to(graphql_playground));\n\n    HttpServer::new(app)\n        .bind("127.0.0.1:8000")?\n        .run()\n        .await\n}\n')),(0,r.yg)("h3",{id:"poem"},"Poem"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'use async_graphql::{\n    dataloader::DataLoader,\n    http::{playground_source, GraphQLPlaygroundConfig},\n    EmptyMutation, EmptySubscription, Schema,\n};\nuse async_graphql_poem::GraphQL;\nuse poem::{handler, listener::TcpListener, web::Html, IntoResponse, Route, Server};\nuse sea_orm::Database;\nuse seaography_example_project::*;\n// ...\n\n#[handler]\nasync fn graphql_playground() -> impl IntoResponse {\n    Html(playground_source(GraphQLPlaygroundConfig::new("/")))\n}\n\n#[tokio::main]\nasync fn main() {\n    // ...\n\n    let database = Database::connect(db_url).await.unwrap();\n    let orm_dataloader: DataLoader<OrmDataloader> = DataLoader::new(\n        OrmDataloader { db: database.clone() },\n        tokio::spawn,\n    );\n\n    let schema = Schema::build(QueryRoot, EmptyMutation, EmptySubscription)\n        .data(database)\n        .data(orm_dataloader)\n        .finish();\n\n    let app = Route::new()\n        .at("/", get(graphql_playground)\n        .post(GraphQL::new(schema)));\n\n    Server::new(TcpListener::bind("0.0.0.0:8000"))\n        .run(app)\n        .await\n        .unwrap();\n}\n')),(0,r.yg)("h2",{id:"\u76f8\u5173\u67e5\u8be2\u589e\u5f3a"},"\u76f8\u5173\u67e5\u8be2\u589e\u5f3a"),(0,r.yg)("p",null,"[",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/seaography/pull/84"},"#84"),"] \u5bf9\u76f8\u5173\u7684 1 \u5bf9\u591a \u67e5\u8be2\u8fdb\u884c\u4e86\u8fc7\u6ee4\u3001\u6392\u5e8f\u548c\u5206\u9875\u3002\u8bf7\u6ce8\u610f\uff0c\u5206\u9875\u6b63\u5728\u8fdb\u884c\u4e2d\uff0c\u76ee\u524d\u4e3a\u5185\u5b58\u5206\u9875\u3002"),(0,r.yg)("p",null,"\u4f8b\u5982\uff0c\u67e5\u627e\u6240\u6709\u975e\u6d3b\u8dc3\u7684\u5ba2\u6237\uff0c\u5305\u542b\u4ed6\u4eec\u7684\u5730\u5740\u4ee5\u53ca\u91d1\u989d\u5927\u4e8e 7 \u7684\u4ed8\u6b3e\uff0c\u5e76\u6309\u91d1\u989d\u5bf9\u7b2c\u4e8c\u4e2a\u7ed3\u679c\u6392\u5e8f\u3002\u60a8\u53ef\u4ee5\u5728\u6211\u4eec\u7684 ",(0,r.yg)("a",{parentName:"p",href:"https://playground.sea-ql.org/seaography"},"GraphQL playground")," \u4e2d\u6267\u884c\u4ee5\u4e0b\u67e5\u8be2\u3002"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-graphql"},'{\n  customer(\n    filters: { active: { eq: 0 } }\n    pagination: { cursor: { limit: 3, cursor: "Int[3]:271" } }\n  ) {\n    nodes {\n      customerId\n      lastName\n      email\n      address {\n        address\n      }\n      payment(\n        filters: { amount: { gt: "7" } }\n        orderBy: { amount: ASC }\n        pagination: { pages: { limit: 1, page: 1 } }\n      ) {\n        nodes {\n          paymentId\n          amount\n        }\n        pages\n        current\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n        }\n      }\n    }\n    pageInfo {\n      hasPreviousPage\n      hasNextPage\n      endCursor\n    }\n  }\n}\n')),(0,r.yg)("h2",{id:"\u96c6\u6210\u793a\u4f8b"},"\u96c6\u6210\u793a\u4f8b"),(0,r.yg)("p",null,"\u6211\u4eec\u4e3a\u60a8\u63d0\u4f9b\u4e86\u4ee5\u4e0b\u793a\u4f8b\uff0c\u5e76\u9644\u6709\u521d\u59cb\u5316\u6570\u636e\u5e93\u7684 SQL \u811a\u672c\u3002"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/SeaQL/seaography/tree/main/examples/mysql"},"MySQL")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/SeaQL/seaography/tree/main/examples/postgres"},"PostgreSQL")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("a",{parentName:"li",href:"https://github.com/SeaQL/seaography/tree/main/examples/sqlite"},"SQLite"))),(0,r.yg)("h2",{id:"\u793e\u533a"},"\u793e\u533a"),(0,r.yg)("p",null,"SeaQL \u662f\u4e00\u4e2a\u793e\u533a\u9a71\u52a8\u7684\u9879\u76ee\u3002\u6211\u4eec\u6b22\u8fce\u60a8\u53c2\u4e0e\u3001\u8d21\u732e\uff0c\u5171\u540c\u4e3a Rust \u7684\u672a\u6765\u800c\u52aa\u529b\u3002"))}m.isMDXComponent=!0}}]);