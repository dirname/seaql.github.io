"use strict";(self.webpackChunksea_ql_blog=self.webpackChunksea_ql_blog||[]).push([[3269],{5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var a=n(6540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),y=r,g=c["".concat(o,".").concat(y)]||c[y]||m[y]||s;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=y;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<s;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8041:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var a=n(8168),r=(n(6540),n(5680));const s={slug:"2023-11-22-async-runtime-generic",title:"\u7f16\u5199 Async \u8fd0\u884c\u65f6\u901a\u7528\u5e93",author:"Chris Tsang",author_title:"SeaQL \u56e2\u961f",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",tags:["news"]},l=void 0,i={permalink:"/blog/2023-11-22-async-runtime-generic",editUrl:"https://github.com/SeaQL/seaql.github.io/edit/master/Blog/blog/2023-11-22-async-runtime-generic.md",source:"@site/blog/2023-11-22-async-runtime-generic.md",title:"\u7f16\u5199 Async \u8fd0\u884c\u65f6\u901a\u7528\u5e93",description:"\u5982\u679c\u4f60\u6b63\u5728\u7528 Rust \u7f16\u5199\u4e00\u4e2a\u5f02\u6b65\u5e94\u7528\uff0c\u67d0\u4e2a\u65f6\u5019\u4f60\u4f1a\u60f3\u628a\u4ee3\u7801\u5206\u79bb\u6210\u51e0\u4e2a crate\u3002\u8fd9\u6709\u4e00\u4e9b\u597d\u5904\uff1a",date:"2023-11-22T00:00:00.000Z",formattedDate:"November 22, 2023",tags:[{label:"news",permalink:"/blog/tags/news"}],readingTime:4.8,hasTruncateMarker:!1,authors:[{name:"Chris Tsang",title:"SeaQL \u56e2\u961f",url:"https://github.com/tyt2y3",imageURL:"https://avatars.githubusercontent.com/u/1782664?v=4"}],frontMatter:{slug:"2023-11-22-async-runtime-generic",title:"\u7f16\u5199 Async \u8fd0\u884c\u65f6\u901a\u7528\u5e93",author:"Chris Tsang",author_title:"SeaQL \u56e2\u961f",author_url:"https://github.com/tyt2y3",author_image_url:"https://avatars.githubusercontent.com/u/1782664?v=4",tags:["news"]},prevItem:{title:"OpenUK \u5956\u9879 2023 \ud83c\udfc6",permalink:"/blog/2023-11-25-openuk-award"},nextItem:{title:"SeaStreamer 0.3 \u4e2d\u7684\u65b0\u529f\u80fd",permalink:"/blog/2023-09-06-whats-new-in-sea-streamer-0.3"}},o={authorsImageUrls:[void 0]},u=[{value:"\u65b9\u6cd5 1: \u5b9a\u4e49\u4f60\u81ea\u5df1\u7684 <code>AsyncRuntime</code> \u7279\u5f81",id:"\u65b9\u6cd5-1-\u5b9a\u4e49\u4f60\u81ea\u5df1\u7684-asyncruntime-\u7279\u5f81",level:3},{value:"\u65b9\u6cd5 2: \u5185\u90e8\u62bd\u8c61\u5f02\u6b65\u8fd0\u884c\u65f6\u5e76\u516c\u5f00\u7279\u6027\u6807\u5fd7",id:"\u65b9\u6cd5-2-\u5185\u90e8\u62bd\u8c61\u5f02\u6b65\u8fd0\u884c\u65f6\u5e76\u516c\u5f00\u7279\u6027\u6807\u5fd7",level:3},{value:"\u65b9\u6cd5 3: \u7ef4\u62a4\u4e00\u4e2a\u5f02\u6b65\u8fd0\u884c\u65f6\u62bd\u8c61 crate",id:"\u65b9\u6cd5-3-\u7ef4\u62a4\u4e00\u4e2a\u5f02\u6b65\u8fd0\u884c\u65f6\u62bd\u8c61-crate",level:3},{value:"\u7ed3\u8bba",id:"\u7ed3\u8bba",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.yg)(c,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"\u5982\u679c\u4f60\u6b63\u5728\u7528 Rust \u7f16\u5199\u4e00\u4e2a\u5f02\u6b65\u5e94\u7528\uff0c\u67d0\u4e2a\u65f6\u5019\u4f60\u4f1a\u60f3\u628a\u4ee3\u7801\u5206\u79bb\u6210\u51e0\u4e2a crate\u3002\u8fd9\u6709\u4e00\u4e9b\u597d\u5904\uff1a"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"\u66f4\u597d\u7684\u5c01\u88c5\u3002\u5b50\u7cfb\u7edf\u4e4b\u95f4\u6709 crate \u8fb9\u754c\u53ef\u4ee5\u5bfc\u81f4\u4ee3\u7801\u66f4\u6e05\u6670\uff0cAPI \u66f4\u660e\u786e\u5b9a\u4e49\u3002\u518d\u4e5f\u4e0d\u9700\u8981 ",(0,r.yg)("inlineCode",{parentName:"li"},"pub(crate)")," \u4e86\uff01"),(0,r.yg)("li",{parentName:"ol"},"\u66f4\u5feb\u7684\u7f16\u8bd1\u3002\u901a\u8fc7\u5c06\u4e00\u4e2a\u5927 crate \u62c6\u5206\u6210\u51e0\u4e2a\u72ec\u7acb\u7684\u5c0f crate\uff0c\u5b83\u4eec\u53ef\u4ee5\u5e76\u884c\u7f16\u8bd1\u3002")),(0,r.yg)("p",null,"\u4f46\u95ee\u9898\u662f\uff0c\u5982\u679c\u4f60\u53ea\u4f7f\u7528\u4e00\u4e2a\u5f02\u6b65\u8fd0\u884c\u65f6\uff0c\u7f16\u5199 async-runtime-generic \u5e93\u6709\u4ec0\u4e48\u597d\u5904\u5462\uff1f"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"\u53ef\u79fb\u690d\u6027\u3002\u4f60\u53ef\u4ee5\u8f7b\u677e\u5207\u6362\u5230\u4e0d\u540c\u7684\u5f02\u6b65\u8fd0\u884c\u65f6\uff0c\u6216\u8005 wasm\u3002"),(0,r.yg)("li",{parentName:"ol"},"\u6b63\u786e\u6027\u3002\u5bf9 ",(0,r.yg)("inlineCode",{parentName:"li"},"tokio")," \u548c ",(0,r.yg)("inlineCode",{parentName:"li"},"async-std")," \u540c\u65f6\u8fdb\u884c\u5e93\u7684\u6d4b\u8bd5\u53ef\u4ee5\u53d1\u73b0\u66f4\u591a\u7684\u9519\u8bef\uff0c\u5305\u62ec\u5e76\u53d1\u9519\u8bef\uff08\u7531\u4e8e\u6a21\u7cca\u7684\u4efb\u52a1\u6267\u884c\u987a\u5e8f\uff09\u4ee5\u53ca\u7531\u4e8e\u8bef\u89e3\u6216\u5f02\u6b65\u8fd0\u884c\u65f6\u5b9e\u73b0\u7ec6\u8282\u5bfc\u81f4\u7684\u201c\u672a\u5b9a\u4e49\u884c\u4e3a\u201d\u3002")),(0,r.yg)("p",null,"\u73b0\u5728\u4f60\u51b3\u5b9a\u7f16\u5199 async-runtime-generic \u5e93\uff01\u5728\u8fd9\u91cc\uff0c\u6211\u60f3\u5206\u4eab 3 \u79cd\u7b56\u7565\uff0c\u5e76\u9644\u4e0a Rust \u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u793a\u4f8b\u3002"),(0,r.yg)("h3",{id:"\u65b9\u6cd5-1-\u5b9a\u4e49\u4f60\u81ea\u5df1\u7684-asyncruntime-\u7279\u5f81"},"\u65b9\u6cd5 1: \u5b9a\u4e49\u4f60\u81ea\u5df1\u7684 ",(0,r.yg)("inlineCode",{parentName:"h3"},"AsyncRuntime")," \u7279\u5f81"),(0,r.yg)("p",null,"\u4f7f\u7528 ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/futures/latest/futures/"},(0,r.yg)("inlineCode",{parentName:"a"},"futures"))," crate\uff0c\u4f60\u53ef\u4ee5\u7f16\u5199\u975e\u5e38\u901a\u7528\u7684\u5e93\u4ee3\u7801\uff0c\u4f46\u7f3a\u5c11\u4e00\u90e8\u5206\uff1a",(0,r.yg)("inlineCode",{parentName:"p"},"time"),"\u2014\u2014\u8981 ",(0,r.yg)("inlineCode",{parentName:"p"},"sleep")," \u6216 ",(0,r.yg)("inlineCode",{parentName:"p"},"timeout"),"\uff0c\u4f60\u5fc5\u987b\u4f9d\u8d56\u4e00\u4e2a\u5f02\u6b65\u8fd0\u884c\u65f6\u3002\u5982\u679c\u8fd9\u6b63\u662f\u4f60\u9700\u8981\u7684\uff0c\u4f60\u53ef\u4ee5\u5b9a\u4e49\u81ea\u5df1\u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"AsyncRuntime")," \u7279\u5f81\uff0c\u5e76\u8981\u6c42\u4e0b\u6e38\u5b9e\u73b0\u5b83\u3002\u8fd9\u662f ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/rdkafka/latest/rdkafka/"},"rdkafka")," \u91c7\u7528\u7684\u65b9\u6cd5\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"pub trait AsyncRuntime: Send + Sync + 'static {\n    type Delay: Future<Output = ()> + Send;\n\n    /// \u57fa\u672c\u4e0a\u662f\u8bf4\u8fd4\u56de\u503c\u5fc5\u987b\u662f\u4e00\u4e2a `Future`\n    fn sleep(duration: Duration) -> Self::Delay;\n}\n")),(0,r.yg)("p",null,"\u4ee5\u4e0b\u662f\u5b83\u7684\u5b9e\u73b0\u65b9\u5f0f\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"impl AsyncRuntime for TokioRuntime {\n    type Delay = tokio::time::Sleep;\n\n    fn sleep(duration: Duration) -> Self::Delay {\n        tokio::time::sleep(duration)\n    }\n}\n")),(0,r.yg)("p",null,"\u4f7f\u7528\u4e0a\u8ff0\u5e93\u4ee3\u7801\u7684\u65b9\u6cd5\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"async fn operation<R: AsyncRuntime>() {\n    R::sleep(Duration::from_millis(1)).await;\n}\n")),(0,r.yg)("h3",{id:"\u65b9\u6cd5-2-\u5185\u90e8\u62bd\u8c61\u5f02\u6b65\u8fd0\u884c\u65f6\u5e76\u516c\u5f00\u7279\u6027\u6807\u5fd7"},"\u65b9\u6cd5 2: \u5185\u90e8\u62bd\u8c61\u5f02\u6b65\u8fd0\u884c\u65f6\u5e76\u516c\u5f00\u7279\u6027\u6807\u5fd7"),(0,r.yg)("p",null,"\u8fd9\u662f ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/redis/latest/redis/"},"redis-rs")," \u4f7f\u7528\u7684\u65b9\u6cd5\u3002"),(0,r.yg)("p",null,"\u8981\u5904\u7406\u7f51\u7edc\u8fde\u63a5\u6216\u6587\u4ef6\u53e5\u67c4\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 ",(0,r.yg)("inlineCode",{parentName:"p"},"AsyncRead")," / ",(0,r.yg)("inlineCode",{parentName:"p"},"AsyncWrite")," \u7279\u5f81\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},"#[async_trait]\npub(crate) trait AsyncRuntime: Send + Sync + 'static {\n    type Connection: AsyncRead + AsyncWrite + Send + Sync + 'static;\n\n    async fn connect(addr: SocketAddr) -> std::io::Result<Self::Connection>;\n}\n")),(0,r.yg)("p",null,"\u7136\u540e\u4f60\u4e3a\u6bcf\u4e2a\u5f02\u6b65\u8fd0\u884c\u65f6\u5b9a\u4e49\u4e00\u4e2a\u6a21\u5757\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'#[cfg(feature = "runtime-async-std")]\nmod async_std_impl;\n#[cfg(feature = "runtime-async-std")]\nuse async_std_impl::*;\n\n#[cfg(feature = "runtime-tokio")]\nmod tokio_impl;\n#[cfg(feature = "runtime-tokio")]\nuse tokio_impl::*;\n')),(0,r.yg)("p",null,"\u6bcf\u4e2a\u6a21\u5757\u7684\u7ed3\u6784\u5982\u4e0b\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="tokio_impl.rs"',title:'"tokio_impl.rs"'},"#[async_trait]\nimpl AsyncRuntime for TokioRuntime {\n    type Connection = tokio::net::TcpStream;\n\n    async fn connect(addr: SocketAddr) -> std::io::Result<Self::Connection> {\n        tokio::net::TcpStream::connect(addr).await\n    }\n}\n")),(0,r.yg)("p",null,"\u4f7f\u7528\u4e0a\u8ff0\u5e93\u4ee3\u7801\u7684\u65b9\u6cd5\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust"},'async fn operation<R: AsyncRuntime>(conn: R::Connection) {\n    conn.write(b"some bytes").await;\n}\n')),(0,r.yg)("h3",{id:"\u65b9\u6cd5-3-\u7ef4\u62a4\u4e00\u4e2a\u5f02\u6b65\u8fd0\u884c\u65f6\u62bd\u8c61-crate"},"\u65b9\u6cd5 3: \u7ef4\u62a4\u4e00\u4e2a\u5f02\u6b65\u8fd0\u884c\u65f6\u62bd\u8c61 crate"),(0,r.yg)("p",null,"\u8fd9\u662f ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/crate/sqlx-rt"},"SQLx")," \u548c ",(0,r.yg)("a",{parentName:"p",href:"https://docs.rs/sea-streamer-runtime/latest/sea_streamer_runtime/"},"SeaStreamer")," \u4f7f\u7528\u7684\u65b9\u6cd5\u3002"),(0,r.yg)("p",null,"\u57fa\u672c\u4e0a\uff0c\u5c06\u4f60\u4f1a\u4f7f\u7528\u7684\u6240\u6709\u5f02\u6b65\u8fd0\u884c\u65f6 API \u805a\u5408\u5728\u4e00\u8d77\uff0c\u7f16\u5199\u4e00\u4e2a\u5305\u88c5\u5e93\u3002\u8fd9\u53ef\u80fd\u5f88\u7e41\u7410\uff0c\u4f46\u5b83\u4e5f\u6709\u4e00\u4e2a\u597d\u5904\uff0c\u5c31\u662f\u5728 ",(0,r.yg)("em",{parentName:"p"},"\u4e00\u4e2a\u5730\u65b9")," \u4e3a ",(0,r.yg)("em",{parentName:"p"},"\u4f60\u7684")," \u9879\u76ee\u6307\u5b9a ",(0,r.yg)("em",{parentName:"p"},"\u6240\u6709\u4e0e\u5f02\u6b65\u8fd0\u884c\u65f6\u7684\u4ea4\u4e92"),"\uff0c\u8fd9\u53ef\u80fd\u5bf9\u8c03\u8bd5\u6216\u8ffd\u8e2a\u5f88\u6709\u5e2e\u52a9\u3002"),(0,r.yg)("p",null,"\u4f8b\u5982\uff0c\u5f02\u6b65 ",(0,r.yg)("inlineCode",{parentName:"p"},"Task")," \u5904\u7406\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="common-async-runtime/tokio_task.rs"',title:'"common-async-runtime/tokio_task.rs"'},"pub use tokio::task::{JoinHandle as TaskHandle};\n\npub fn spawn_task<F, T>(future: F) -> TaskHandle<T>\nwhere\n    F: Future<Output = T> + Send + 'static,\n    T: Send + 'static,\n{\n    tokio::task::spawn(future)\n}\n")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"async-std")," \u7684\u4efb\u52a1 API \u6709\u4e9b\u4e0d\u540c\uff08\u5728 ",(0,r.yg)("inlineCode",{parentName:"p"},"tokio")," \u4e2d\u8f93\u51fa\u4e3a ",(0,r.yg)("inlineCode",{parentName:"p"},"Result<T, JoinError>"),"\uff09\uff0c\u8fd9\u9700\u8981\u4e00\u4e9b\u6837\u677f\u4ee3\u7801\uff1a"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-rust",metastring:'title="common-async-runtime/async_std_task.rs"',title:'"common-async-runtime/async_std_task.rs"'},"/// \u4e0e tokio \u7684 API \u517c\u5bb9\u7684\u63a5\u53e3\npub struct TaskHandle<T>(async_std::task::JoinHandle<T>);\n\npub fn spawn_task<F, T>(future: F) -> TaskHandle<T>\nwhere\n    F: Future<Output = T> + Send + 'static,\n    T: Send + 'static,\n{\n    TaskHandle(async_std::task::spawn(future))\n}\n\n#[derive(Debug)]\npub struct JoinError;\n\nimpl std::error::Error for JoinError {}\n\n// \u8fd9\u57fa\u672c\u4e0a\u662f\u5982\u4f55\u5305\u88c5\u4e00\u4e2a `Future`\nimpl<T> Future for TaskHandle<T> {\n    type Output = Result<T, JoinError>;\n\n    fn poll(\n        mut self: std::pin::Pin<&mut Self>,\n        cx: &mut std::task::Context<'_>,\n    ) -> std::task::Poll<Self::Output> {\n        match self.0.poll_unpin(cx) {\n            std::task::Poll::Ready(res) => std::task::Poll::Ready(Ok(res)),\n            std::task::Poll::Pending => std::task::Poll::Pending,\n        }\n    }\n}\n")),(0,r.yg)("p",null,"\u5728\u5e93\u7684 ",(0,r.yg)("inlineCode",{parentName:"p"},"Cargo.toml")," \u4e2d\uff0c\u4f60\u53ea\u9700\u5c06 ",(0,r.yg)("inlineCode",{parentName:"p"},"common-async-runtime"),' \u4f5c\u4e3a\u4f9d\u8d56\u5305\u62ec\u3002\u8fd9\u4f7f\u4f60\u7684\u5e93\u4ee3\u7801 "\u7eaf\u51c0"\uff0c\u56e0\u4e3a\u9009\u62e9\u5f02\u6b65\u8fd0\u884c\u65f6\u662f\u7531\u4e0b\u6e38\u63a7\u5236\u7684\u3002\u7c7b\u4f3c\u4e8e\u65b9\u6cd5 1\uff0c\u8fd9\u4e2a crate \u53ef\u4ee5\u5728\u6ca1\u6709\u4efb\u4f55\u5f02\u6b65\u8fd0\u884c\u65f6\u7684\u60c5\u51b5\u4e0b\u7f16\u8bd1\uff0c\u8fd9\u5f88\u597d\uff01'),(0,r.yg)("h3",{id:"\u7ed3\u8bba"},"\u7ed3\u8bba"),(0,r.yg)("p",null,"\u795d\u7f16\u7a0b\u6109\u5feb\uff01\u6b22\u8fce\u4e0e ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/SeaQL/sea-streamer/discussions"},"\u793e\u533a")," \u5206\u4eab\u4f60\u7684\u7ecf\u9a8c\u3002"))}m.isMDXComponent=!0}}]);