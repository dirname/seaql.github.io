"use strict";(self.webpackChunksea_orm=self.webpackChunksea_orm||[]).push([[2634],{2605:(e,t,a)=>{a.r(t),a.d(t,{default:()=>A});var n=a(6540),r=a(9408),s=a(5489),o=a(4586);const l={heroBanner:"heroBanner_qdFl",buttons:"buttons_AeoN",homepageBanner:"homepageBanner_mBTI",homepageLogo:"homepageLogo_ewR0"};var c=a(8168),i=a(53);const m={features:"features_xdhU",featureSvg:"featureSvg__8YW"};var u=a(5273);const p=[{title:"Async",icon:n.createElement(u.vSZ,{size:26}),description:n.createElement(n.Fragment,null,"SeaStreamer provides an async API, and it supports both 'tokio' and 'async-std'. In tandem with other async Rust libraries, you can build highly concurrent stream processors.")},{title:"Generic",icon:n.createElement(u.UyI,{size:26}),description:n.createElement(n.Fragment,null,"We provide integration for Redis & Kafka / Redpanda behind a generic trait interface, so your program can be backend-agnostic.")},{title:"Testable",icon:n.createElement(u.mU9,{size:26}),description:n.createElement(n.Fragment,null,"SeaStreamer also provides a set of tools to work with streams via unix pipes, so it is testable without setting up a cluster, and extremely handy when working locally.")},{title:"Micro-service Oriented",icon:n.createElement(u.dE0,{size:26}),description:n.createElement(n.Fragment,null,"Let's build real-time (multi-threaded, no GC), self-contained (aka easy to deploy), low-resource-usage, long-running stream processors in Rust!")}];function d(e){let{icon:t,title:a,description:r}=e;return n.createElement("div",{className:(0,i.A)("col col--6")},n.createElement("div",{style:{paddingBottom:"20px",paddingTop:"20px"}},n.createElement("div",{style:{display:"flex"}},n.createElement("div",{style:{paddingRight:"22px"}},t),n.createElement("h3",{style:{fontSize:"20px",color:"var(--ifm-color-primary)"}},a)),n.createElement("p",null,r)))}function g(){return n.createElement("section",{className:(0,i.A)("home-section","home-section-alt",m.features)},n.createElement("div",{className:"container"},n.createElement("div",{className:"row"},n.createElement("div",{className:"col col--11 col--offset-1"},n.createElement("div",{className:"row"},p.map(((e,t)=>n.createElement(d,(0,c.A)({key:t},e)))))))))}var h=a(1470),f=a(9365);const E={features:"features_SiWs",tableFlexBox:"tableFlexBox_k3lM",table:"table_LYOc"};var b=a(8382),S=a(5293),k=a(1258);(void 0!==a.g?a.g:window).Prism=k.A,a(5342);const w=[{title:"Consumer",full_example:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/consumer.rs",code:'#[tokio::main]\nasync fn main() -> Result<()> {\n    env_logger::init();\n\n    let Args { stream } = Args::from_args();\n\n    let streamer = SeaStreamer::connect(stream.streamer(), Default::default()).await?;\n\n    let mut options = SeaConsumerOptions::new(ConsumerMode::RealTime);\n    options.set_auto_stream_reset(SeaStreamReset::Earliest);\n\n    let consumer: SeaConsumer = streamer\n        .create_consumer(stream.stream_keys(), options)\n        .await?;\n\n    loop {\n        let mess: SeaMessage = consumer.next().await?;\n        println!("[{}] {}", mess.timestamp(), mess.message().as_str()?);\n    }\n}'},{title:"Producer",full_example:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/producer.rs",code:'#[tokio::main]\nasync fn main() -> Result<()> {\n    env_logger::init();\n\n    let Args { stream } = Args::from_args();\n\n    let streamer = SeaStreamer::connect(stream.streamer(), Default::default()).await?;\n\n    let producer: SeaProducer = streamer\n        .create_producer(stream.stream_key()?, Default::default())\n        .await?;\n\n    for tick in 0..100 {\n        let message = format!(r#""tick {tick}""#);\n        eprintln!("{message}");\n        producer.send(message)?;\n        tokio::time::sleep(Duration::from_secs(1)).await;\n    }\n\n    producer.end().await?; // flush\n\n    Ok(())\n}'},{title:"Processor",full_example:"https://github.com/SeaQL/sea-streamer/blob/main/examples/src/bin/processor.rs",code:'#[tokio::main]\nasync fn main() -> Result<()> {\n    env_logger::init();\n\n    let Args { input, output } = Args::from_args();\n\n    let streamer = SeaStreamer::connect(input.streamer(), Default::default()).await?;\n    let options = SeaConsumerOptions::new(ConsumerMode::RealTime);\n    let consumer: SeaConsumer = streamer\n        .create_consumer(input.stream_keys(), options)\n        .await?;\n\n    let streamer = SeaStreamer::connect(output.streamer(), Default::default()).await?;\n    let producer: SeaProducer = streamer\n        .create_producer(output.stream_key()?, Default::default())\n        .await?;\n\n    loop {\n        let message: SeaMessage = consumer.next().await?;\n        let message = process(message).await?;\n        eprintln!("{message}");\n        producer.send(message)?; // send is non-blocking\n    }\n}'},{title:"Running with Kafka",code:"# Produce some input\ncargo run --bin producer -- --stream kafka://localhost:9092/hello1 &\n# Start the processor, producing some output\ncargo run --bin processor -- --input kafka://localhost:9092/hello1 --output kafka://localhost:9092/hello2 &\n# Replay the output\ncargo run --bin consumer -- --stream kafka://localhost:9092/hello2\n# Remember to stop the processes\nkill %1 %2"},{title:"Running with Redis",code:"# Produce some input\ncargo run --bin producer -- --stream redis://localhost:6379/hello1 &\n# Start the processor, producing some output\ncargo run --bin processor -- --input redis://localhost:6379/hello1 --output redis://localhost:6379/hello2 &\n# Replay the output\ncargo run --bin consumer -- --stream redis://localhost:6379/hello2\n# Remember to stop the processes\nkill %1 %2"},{title:"Running with File",code:'# Create the file\nfile=/tmp/sea-streamer-$(date +%s)\ntouch $file && echo "File created at $file"\n# Produce some input\ncargo run --bin producer -- --stream file://$file/hello &\n# Replay the input\ncargo run --bin consumer -- --stream file://$file/hello\n# Start the processor, producing some output\ncargo run --bin processor -- --input file://$file/hello --output stdio:///hello'},{title:"Running with Stdio",code:"# Pipe the producer to the processor\ncargo run --bin producer -- --stream stdio:///hello1 | cargo run --bin processor -- --input stdio:///hello1 --output stdio:///hello2"}];function v(){const{siteConfig:{themeConfig:{prism:e={}}}}=(0,o.A)(),{colorMode:t}=(0,S.G)(),[a,r]=(0,n.useState)(!1);(0,n.useEffect)((()=>{r(!0)}),[]);const s=e.theme,l=e.darkTheme;return n.createElement("section",{className:(0,i.A)("home-section",E.features)},n.createElement("div",{className:"container"},n.createElement("div",{className:"row"},n.createElement("div",{className:(0,i.A)("col col--12")},n.createElement("div",{className:"padding-horiz--md"},n.createElement("h2",{className:"text--center"},"A quick taste of SeaStreamer"),n.createElement(h.A,{className:(0,i.A)("aa"),defaultValue:w[0].title,values:w.map((e=>{let{title:t,code:a}=e;return{label:t,value:t}}))},w.map(((e,r)=>{let{title:o,code:i,full_example:m}=e;return n.createElement(f.A,{key:r,value:o},m&&n.createElement("p",null,"Here is a basic stream ",o.toLowerCase(),", ",n.createElement("a",{href:m},"full example"),":"),n.createElement(b.Ay,(0,c.A)({},b.Gs,{code:i,key:a,theme:"dark"==t?l:s,language:m?"rust":"shell"}),(e=>{let{className:t,tokens:a,getLineProps:r,getTokenProps:s}=e;return n.createElement("pre",{className:`${t}`},a.map(((e,t)=>n.createElement("div",r({line:e,key:t}),e.map(((e,t)=>n.createElement("span",s({token:e,key:t}))))))))})))}))))))))}const _={features:"features_nemC",mascot:"mascot_Rqr3"};function y(){return n.createElement("section",{className:(0,i.A)("home-section","home-section-alt",_.features)},n.createElement("div",{className:"container"},n.createElement("div",{className:"row"},n.createElement("div",{className:(0,i.A)("col col--12")},n.createElement("h2",{className:"text--center"},"Meet Terres, our official mascot"),n.createElement("p",{className:"text--center"},"A friend of ",n.createElement("a",{href:"https://www.rustacean.net/"},"Ferris"),", Terres the hermit crab is a member of the Rustacean family."),n.createElement("div",{className:"text--center padding-horiz--md"},n.createElement("img",{className:_.mascot,src:"/SeaStreamer/img/Terres.png"}))))))}function N(){const{siteConfig:e}=(0,o.A)();return n.createElement("header",{className:l.heroBanner},n.createElement("div",{className:"container"},n.createElement("img",{className:l.homepageLogo,width:"90%",src:"/SeaStreamer/img/SeaStreamer logo.png"}),n.createElement("img",{className:l.homepageBanner,width:"90%",src:"/SeaStreamer/img/SeaStreamer banner.png"}),n.createElement("br",null),n.createElement("br",null),n.createElement("h2",{className:"hero__subtitle"},e.tagline),n.createElement("div",{className:l.buttons},n.createElement(s.A,{className:"button button--primary button--lg",to:"/docs/index"},"Getting Started"))))}function A(){const{siteConfig:e}=(0,o.A)();return n.createElement(r.A,{description:e.tagline},n.createElement(N,null),n.createElement("main",null,n.createElement(g,null),n.createElement(v,null),n.createElement(y,null)))}}}]);